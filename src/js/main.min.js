!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(t.document)return e(t);throw new Error("jQuery requires a window with a document")}:e(t)}("undefined"!=typeof window?window:this,function(x,N){"use strict";function y(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item}function g(t){return null!=t&&t===t.window}var e=[],R=Object.getPrototypeOf,a=e.slice,j=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},L=e.push,H=e.indexOf,B={},q=B.toString,z=B.hasOwnProperty,W=z.toString,U=W.call(Object),m={},_=x.document,X={type:!0,src:!0,nonce:!0,noModule:!0};function V(t,e,i){var n,o,s=(i=i||_).createElement("script");if(s.text=t,e)for(n in X)(o=e[n]||e.getAttribute&&e.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function f(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?B[q.call(t)]||"object":typeof t}var t="3.6.3",C=function(t,e){return new C.fn.init(t,e)};function Y(t){var e=!!t&&"length"in t&&t.length,i=f(t);return!y(t)&&!g(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}C.fn=C.prototype={jquery:t,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){t=C.merge(this.constructor(),t);return t.prevObject=this,t},each:function(t){return C.each(this,t)},map:function(i){return this.pushStack(C.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,t=+t+(t<0?e:0);return this.pushStack(0<=t&&t<e?[this[t]]:[])},end:function(){return this.prevObject||this.constructor()},push:L,sort:e.sort,splice:e.splice},C.extend=C.fn.extend=function(){var t,e,i,n,o,s=arguments[0]||{},r=1,a=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[r]||{},r++),"object"==typeof s||y(s)||(s={}),r===a&&(s=this,r--);r<a;r++)if(null!=(t=arguments[r]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(l&&i&&(C.isPlainObject(i)||(n=Array.isArray(i)))?(o=s[e],o=n&&!Array.isArray(o)?[]:n||C.isPlainObject(o)?o:{},n=!1,s[e]=C.extend(l,o,i)):void 0!==i&&(s[e]=i));return s},C.extend({expando:"jQuery"+(t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){return!(!t||"[object Object]"!==q.call(t))&&(!(t=R(t))||"function"==typeof(t=z.call(t,"constructor")&&t.constructor)&&W.call(t)===U)},isEmptyObject:function(t){for(var e in t)return!1;return!0},globalEval:function(t,e,i){V(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(Y(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){e=e||[];return null!=t&&(Y(Object(t))?C.merge(e,"string"==typeof t?[t]:t):L.call(e,t)),e},inArray:function(t,e,i){return null==e?-1:H.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;n<i;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n=[],o=0,s=t.length,r=!i;o<s;o++)!e(t[o],o)!=r&&n.push(t[o]);return n},map:function(t,e,i){var n,o,s=0,r=[];if(Y(t))for(n=t.length;s<n;s++)null!=(o=e(t[s],s,i))&&r.push(o);else for(s in t)null!=(o=e(t[s],s,i))&&r.push(o);return j(r)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=e[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){B["[object "+e+"]"]=e.toLowerCase()});function n(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&C(t).is(i))break;n.push(t)}return n}function G(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var t=function(N){function u(t,e){return t="0x"+t.slice(1)-65536,e||(t<0?String.fromCharCode(65536+t):String.fromCharCode(t>>10|55296,1023&t|56320))}function R(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}function j(){_()}var t,h,w,s,L,p,H,B,x,l,c,_,C,i,S,f,n,o,g,T="sizzle"+ +new Date,d=N.document,k=0,q=0,z=D(),W=D(),U=D(),m=D(),X=function(t,e){return t===e&&(c=!0),0},V={}.hasOwnProperty,e=[],Y=e.pop,G=e.push,A=e.push,K=e.slice,y=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",r="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+r+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Z="\\["+r+"*("+a+")(?:"+r+"*([*^$|!~]?=)"+r+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+r+"*\\]",J=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Z+")*)|.*)\\)|)",tt=new RegExp(r+"+","g"),v=new RegExp("^"+r+"+|((?:^|[^\\\\])(?:\\\\.)*)"+r+"+$","g"),et=new RegExp("^"+r+"*,"+r+"*"),it=new RegExp("^"+r+"*([>+~]|"+r+")"+r+"*"),nt=new RegExp(r+"|>"),ot=new RegExp(J),st=new RegExp("^"+a+"$"),b={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+Z),PSEUDO:new RegExp("^"+J),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+r+"*(even|odd|(([+-]|)(\\d*)n|)"+r+"*(?:([+-]|)"+r+"*(\\d+)|))"+r+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+r+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+r+"*((?:-\\d)?\\d*)"+r+"*\\)|)(?=[^-]|$)","i")},rt=/HTML$/i,at=/^(?:input|select|textarea|button)$/i,lt=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,ct=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,dt=/[+~]/,E=new RegExp("\\\\[\\da-fA-F]{1,6}"+r+"?|\\\\([^\\r\\n\\f])","g"),ut=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ht=yt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{A.apply(e=K.call(d.childNodes),d.childNodes),e[d.childNodes.length].nodeType}catch(t){A={apply:e.length?function(t,e){G.apply(t,K.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function P(e,t,i,n){var o,s,r,a,l,c,d=t&&t.ownerDocument,u=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==u&&9!==u&&11!==u)return i;if(!n&&(_(t),t=t||C,S)){if(11!==u&&(a=ct.exec(e)))if(o=a[1]){if(9===u){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(d&&(c=d.getElementById(o))&&g(t,c)&&c.id===o)return i.push(c),i}else{if(a[2])return A.apply(i,t.getElementsByTagName(e)),i;if((o=a[3])&&h.getElementsByClassName&&t.getElementsByClassName)return A.apply(i,t.getElementsByClassName(o)),i}if(h.qsa&&!m[e+" "]&&(!f||!f.test(e))&&(1!==u||"object"!==t.nodeName.toLowerCase())){if(c=e,d=t,1===u&&(nt.test(e)||it.test(e))){for((d=dt.test(e)&&mt(t.parentNode)||t)===t&&h.scope||((r=t.getAttribute("id"))?r=r.replace(ut,R):t.setAttribute("id",r=T)),s=(l=p(e)).length;s--;)l[s]=(r?"#"+r:":scope")+" "+M(l[s]);c=l.join(",")}try{if(h.cssSupportsSelector&&!CSS.supports("selector(:is("+c+"))"))throw new Error;return A.apply(i,d.querySelectorAll(c)),i}catch(t){m(e,!0)}finally{r===T&&t.removeAttribute("id")}}}return B(e.replace(v,"$1"),t,i,n)}function D(){var i=[];function n(t,e){return i.push(t+" ")>w.cacheLength&&delete n[i.shift()],n[t+" "]=e}return n}function O(t){return t[T]=!0,t}function I(t){var e=C.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e)}}function pt(t,e){for(var i=t.split("|"),n=i.length;n--;)w.attrHandle[i[n]]=e}function ft(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ht(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function F(r){return O(function(s){return s=+s,O(function(t,e){for(var i,n=r([],t.length,s),o=n.length;o--;)t[i=n[o]]&&(t[i]=!(e[i]=t[i]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in h=P.support={},L=P.isXML=function(t){var e=t&&t.namespaceURI,t=t&&(t.ownerDocument||t).documentElement;return!rt.test(e||t&&t.nodeName||"HTML")},_=P.setDocument=function(t){var t=t?t.ownerDocument||t:d;return t!=C&&9===t.nodeType&&t.documentElement&&(i=(C=t).documentElement,S=!L(C),d!=C&&(t=C.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",j,!1):t.attachEvent&&t.attachEvent("onunload",j)),h.scope=I(function(t){return i.appendChild(t).appendChild(C.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),h.cssSupportsSelector=I(function(){return CSS.supports("selector(*)")&&C.querySelectorAll(":is(:jqfake)")&&!CSS.supports("selector(:is(*,:jqfake))")}),h.attributes=I(function(t){return t.className="i",!t.getAttribute("className")}),h.getElementsByTagName=I(function(t){return t.appendChild(C.createComment("")),!t.getElementsByTagName("*").length}),h.getElementsByClassName=$.test(C.getElementsByClassName),h.getById=I(function(t){return i.appendChild(t).id=T,!C.getElementsByName||!C.getElementsByName(T).length}),h.getById?(w.filter.ID=function(t){var e=t.replace(E,u);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&S)return(e=e.getElementById(t))?[e]:[]}):(w.filter.ID=function(t){var e=t.replace(E,u);return function(t){t=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return t&&t.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&S){var i,n,o,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(o=e.getElementsByName(t),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),w.find.TAG=h.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):h.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;i=s[o++];)1===i.nodeType&&n.push(i);return n},w.find.CLASS=h.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&S)return e.getElementsByClassName(t)},n=[],f=[],(h.qsa=$.test(C.querySelectorAll))&&(I(function(t){var e;i.appendChild(t).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]="+r+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||f.push("\\["+r+"*(?:value|"+Q+")"),t.querySelectorAll("[id~="+T+"-]").length||f.push("~="),(e=C.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||f.push("\\["+r+"*name"+r+"*="+r+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||f.push(":checked"),t.querySelectorAll("a#"+T+"+*").length||f.push(".#.+[+~]"),t.querySelectorAll("\\\f"),f.push("[\\r\\n\\f]")}),I(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=C.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&f.push("name"+r+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),i.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),f.push(",.*:")})),(h.matchesSelector=$.test(o=i.matches||i.webkitMatchesSelector||i.mozMatchesSelector||i.oMatchesSelector||i.msMatchesSelector))&&I(function(t){h.disconnectedMatch=o.call(t,"*"),o.call(t,"[s!='']:x"),n.push("!=",J)}),h.cssSupportsSelector||f.push(":has"),f=f.length&&new RegExp(f.join("|")),n=n.length&&new RegExp(n.join("|")),t=$.test(i.compareDocumentPosition),g=t||$.test(i.contains)?function(t,e){var i=9===t.nodeType&&t.documentElement||t,e=e&&e.parentNode;return t===e||!(!e||1!==e.nodeType||!(i.contains?i.contains(e):t.compareDocumentPosition&&16&t.compareDocumentPosition(e)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=t?function(t,e){var i;return t===e?(c=!0,0):(i=!t.compareDocumentPosition-!e.compareDocumentPosition)||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!h.sortDetached&&e.compareDocumentPosition(t)===i?t==C||t.ownerDocument==d&&g(d,t)?-1:e==C||e.ownerDocument==d&&g(d,e)?1:l?y(l,t)-y(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,n=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t==C?-1:e==C?1:o?-1:s?1:l?y(l,t)-y(l,e):0;if(o===s)return ft(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?ft(r[n],a[n]):r[n]==d?-1:a[n]==d?1:0}),C},P.matches=function(t,e){return P(t,null,null,e)},P.matchesSelector=function(t,e){if(_(t),h.matchesSelector&&S&&!m[e+" "]&&(!n||!n.test(e))&&(!f||!f.test(e)))try{var i=o.call(t,e);if(i||h.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){m(e,!0)}return 0<P(e,C,null,[t]).length},P.contains=function(t,e){return(t.ownerDocument||t)!=C&&_(t),g(t,e)},P.attr=function(t,e){(t.ownerDocument||t)!=C&&_(t);var i=w.attrHandle[e.toLowerCase()],i=i&&V.call(w.attrHandle,e.toLowerCase())?i(t,e,!S):void 0;return void 0!==i?i:h.attributes||!S?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},P.escape=function(t){return(t+"").replace(ut,R)},P.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},P.uniqueSort=function(t){var e,i=[],n=0,o=0;if(c=!h.detectDuplicates,l=!h.sortStable&&t.slice(0),t.sort(X),c){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)t.splice(i[n],1)}return l=null,t},s=P.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(w=P.selectors={cacheLength:50,createPseudo:O,match:b,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(E,u),t[3]=(t[3]||t[4]||t[5]||"").replace(E,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||P.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&P.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return b.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ot.test(i)&&(e=p(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(E,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=z[t+" "];return e||(e=new RegExp("(^|"+r+")"+t+"("+r+"|$)"))&&z(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(t){t=P.attr(t,e);return null==t?"!="===i:!i||(t+="","="===i?t===n:"!="===i?t!==n:"^="===i?n&&0===t.indexOf(n):"*="===i?n&&-1<t.indexOf(n):"$="===i?n&&t.slice(-n.length)===n:"~="===i?-1<(" "+t.replace(tt," ")+" ").indexOf(n):"|="===i&&(t===n||t.slice(0,n.length+1)===n+"-"))}},CHILD:function(f,t,e,g,m){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,i){var n,o,s,r,a,l,c=v!=y?"nextSibling":"previousSibling",d=t.parentNode,u=b&&t.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(d){if(v){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&h){for(p=(a=(n=(o=(s=(r=d)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(p=a=0)||l.pop();)if(1===r.nodeType&&++p&&r===t){o[f]=[k,a,p];break}}else if(!1===(p=h?a=(n=(o=(s=(r=t)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&n[1]:p))for(;(r=++a&&r&&r[c]||(p=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++p||(h&&((o=(s=r[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[k,p]),r!==t)););return(p-=m)===g||p%g==0&&0<=p/g}}},PSEUDO:function(t,s){var e,r=w.pseudos[t]||w.setFilters[t.toLowerCase()]||P.error("unsupported pseudo: "+t);return r[T]?r(s):1<r.length?(e=[t,t,"",s],w.setFilters.hasOwnProperty(t.toLowerCase())?O(function(t,e){for(var i,n=r(t,s),o=n.length;o--;)t[i=y(t,n[o])]=!(e[i]=n[o])}):function(t){return r(t,0,e)}):r}},pseudos:{not:O(function(t){var n=[],o=[],a=H(t.replace(v,"$1"));return a[T]?O(function(t,e,i,n){for(var o,s=a(t,null,n,[]),r=t.length;r--;)(o=s[r])&&(t[r]=!(e[r]=o))}):function(t,e,i){return n[0]=t,a(n,null,i,o),n[0]=null,!o.pop()}}),has:O(function(e){return function(t){return 0<P(e,t).length}}),contains:O(function(e){return e=e.replace(E,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:O(function(i){return st.test(i||"")||P.error("unsupported lang: "+i),i=i.replace(E,u).toLowerCase(),function(t){var e;do{if(e=S?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=N.location&&N.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===i},focus:function(t){return t===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return lt.test(t.nodeName)},input:function(t){return at.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(t=t.getAttribute("type"))||"text"===t.toLowerCase())},first:F(function(){return[0]}),last:F(function(t,e){return[e-1]}),eq:F(function(t,e,i){return[i<0?i+e:i]}),even:F(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:F(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:F(function(t,e,i){for(var n=i<0?i+e:e<i?e:i;0<=--n;)t.push(n);return t}),gt:F(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=function(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}(t);function vt(){}function M(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function yt(r,t,e){var a=t.dir,l=t.next,c=l||a,d=e&&"parentNode"===c,u=q++;return t.first?function(t,e,i){for(;t=t[a];)if(1===t.nodeType||d)return r(t,e,i);return!1}:function(t,e,i){var n,o,s=[k,u];if(i){for(;t=t[a];)if((1===t.nodeType||d)&&r(t,e,i))return!0}else for(;t=t[a];)if(1===t.nodeType||d)if(o=(o=t[T]||(t[T]={}))[t.uniqueID]||(o[t.uniqueID]={}),l&&l===t.nodeName.toLowerCase())t=t[a]||t;else{if((n=o[c])&&n[0]===k&&n[1]===u)return s[2]=n[2];if((o[c]=s)[2]=r(t,e,i))return!0}return!1}}function bt(o){return 1<o.length?function(t,e,i){for(var n=o.length;n--;)if(!o[n](t,e,i))return!1;return!0}:o[0]}function wt(t,e,i,n,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)!(s=t[a])||i&&!i(s,n,o)||(r.push(s),c&&e.push(a));return r}function xt(p,f,g,m,v,t){return m&&!m[T]&&(m=xt(m)),v&&!v[T]&&(v=xt(v,t)),O(function(t,e,i,n){var o,s,r,a=[],l=[],c=e.length,d=t||function(t,e,i){for(var n=0,o=e.length;n<o;n++)P(t,e[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!t&&f?d:wt(d,a,p,i,n),h=g?v||(t?p:c||m)?[]:e:u;if(g&&g(u,h,i,n),m)for(o=wt(h,l),m(o,[],i,n),s=o.length;s--;)(r=o[s])&&(h[l[s]]=!(u[l[s]]=r));if(t){if(v||p){if(v){for(o=[],s=h.length;s--;)(r=h[s])&&o.push(u[s]=r);v(null,h=[],o,n)}for(s=h.length;s--;)(r=h[s])&&-1<(o=v?y(t,r):a[s])&&(t[o]=!(e[o]=r))}}else h=wt(h===e?h.splice(c,h.length):h),v?v(null,e,h,n):A.apply(e,h)})}function _t(m,v){function t(t,e,i,n,o){var s,r,a,l=0,c="0",d=t&&[],u=[],h=x,p=t||b&&w.find.TAG("*",o),f=k+=null==h?1:Math.random()||.1,g=p.length;for(o&&(x=e==C||e||o);c!==g&&null!=(s=p[c]);c++){if(b&&s){for(r=0,e||s.ownerDocument==C||(_(s),i=!S);a=m[r++];)if(a(s,e||C,i)){n.push(s);break}o&&(k=f)}y&&((s=!a&&s)&&l--,t&&d.push(s))}if(l+=c,y&&c!==l){for(r=0;a=v[r++];)a(d,u,e,i);if(t){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=Y.call(n));u=wt(u)}A.apply(n,u),o&&!t&&0<u.length&&1<l+v.length&&P.uniqueSort(n)}return o&&(k=f,x=h),d}var y=0<v.length,b=0<m.length;return y?O(t):t}return vt.prototype=w.filters=w.pseudos,w.setFilters=new vt,p=P.tokenize=function(t,e){var i,n,o,s,r,a,l,c=W[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=w.preFilter;r;){for(s in i&&!(n=et.exec(r))||(n&&(r=r.slice(n[0].length)||r),a.push(o=[])),i=!1,(n=it.exec(r))&&(i=n.shift(),o.push({value:i,type:n[0].replace(v," ")}),r=r.slice(i.length)),w.filter)!(n=b[s].exec(r))||l[s]&&!(n=l[s](n))||(i=n.shift(),o.push({value:i,type:s,matches:n}),r=r.slice(i.length));if(!i)break}return e?r.length:r?P.error(t):W(t,a).slice(0)},H=P.compile=function(t,e){var i,n=[],o=[],s=U[t+" "];if(!s){for(i=(e=e||p(t)).length;i--;)((s=function t(e){for(var n,i,o,s=e.length,r=w.relative[e[0].type],a=r||w.relative[" "],l=r?1:0,c=yt(function(t){return t===n},a,!0),d=yt(function(t){return-1<y(n,t)},a,!0),u=[function(t,e,i){return t=!r&&(i||e!==x)||((n=e).nodeType?c:d)(t,e,i),n=null,t}];l<s;l++)if(i=w.relative[e[l].type])u=[yt(bt(u),i)];else{if((i=w.filter[e[l].type].apply(null,e[l].matches))[T]){for(o=++l;o<s&&!w.relative[e[o].type];o++);return xt(1<l&&bt(u),1<l&&M(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(v,"$1"),i,l<o&&t(e.slice(l,o)),o<s&&t(e=e.slice(o)),o<s&&M(e))}u.push(i)}return bt(u)}(e[i]))[T]?n:o).push(s);(s=U(t,_t(o,n))).selector=t}return s},B=P.select=function(t,e,i,n){var o,s,r,a,l,c="function"==typeof t&&t,d=!n&&p(t=c.selector||t);if(i=i||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&S&&w.relative[s[1].type]){if(!(e=(w.find.ID(r.matches[0].replace(E,u),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=b.needsContext.test(t)?0:s.length;o--&&(r=s[o],!w.relative[a=r.type]);)if((l=w.find[a])&&(n=l(r.matches[0].replace(E,u),dt.test(s[0].type)&&mt(e.parentNode)||e))){if(s.splice(o,1),t=n.length&&M(s))break;return A.apply(i,n),i}}return(c||H(t,d))(n,e,!S,i,!e||dt.test(t)&&mt(e.parentNode)||e),i},h.sortStable=T.split("").sort(X).join("")===T,h.detectDuplicates=!!c,_(),h.sortDetached=I(function(t){return 1&t.compareDocumentPosition(C.createElement("fieldset"))}),I(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||pt("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),h.attributes&&I(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||pt("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),I(function(t){return null==t.getAttribute("disabled")})||pt(Q,function(t,e,i){if(!i)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),P}(x),K=(C.find=t,C.expr=t.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=t.uniqueSort,C.text=t.getText,C.isXMLDoc=t.isXML,C.contains=t.contains,C.escapeSelector=t.escape,C.expr.match.needsContext);function l(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var Q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Z(t,i,n){return y(i)?C.grep(t,function(t,e){return!!i.call(t,e,t)!==n}):i.nodeType?C.grep(t,function(t){return t===i!==n}):"string"!=typeof i?C.grep(t,function(t){return-1<H.call(i,t)!==n}):C.filter(i,t,n)}C.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?C.find.matchesSelector(n,t)?[n]:[]:C.find.matches(t,C.grep(e,function(t){return 1===t.nodeType}))},C.fn.extend({find:function(t){var e,i,n=this.length,o=this;if("string"!=typeof t)return this.pushStack(C(t).filter(function(){for(e=0;e<n;e++)if(C.contains(o[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)C.find(t,o[e],i);return 1<n?C.uniqueSort(i):i},filter:function(t){return this.pushStack(Z(this,t||[],!1))},not:function(t){return this.pushStack(Z(this,t||[],!0))},is:function(t){return!!Z(this,"string"==typeof t&&K.test(t)?C(t):t||[],!1).length}});var J,tt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,et=((C.fn.init=function(t,e,i){if(t){if(i=i||J,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==i.ready?i.ready(t):t(C):C.makeArray(t,this);if(!(n="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:tt.exec(t))||!n[1]&&e)return(!e||e.jquery?e||i:this.constructor(e)).find(t);if(n[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:_,!0)),Q.test(n[1])&&C.isPlainObject(e))for(var n in e)y(this[n])?this[n](e[n]):this.attr(n,e[n])}else(i=_.getElementById(n[2]))&&(this[0]=i,this.length=1)}return this}).prototype=C.fn,J=C(_),/^(?:parents|prev(?:Until|All))/),it={children:!0,contents:!0,next:!0,prev:!0};function nt(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(C.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,o=this.length,s=[],r="string"!=typeof t&&C(t);if(!K.test(t))for(;n<o;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&C.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(1<s.length?C.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?H.call(C(t),this[0]):H.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){t=t.parentNode;return t&&11!==t.nodeType?t:null},parents:function(t){return n(t,"parentNode")},parentsUntil:function(t,e,i){return n(t,"parentNode",i)},next:function(t){return nt(t,"nextSibling")},prev:function(t){return nt(t,"previousSibling")},nextAll:function(t){return n(t,"nextSibling")},prevAll:function(t){return n(t,"previousSibling")},nextUntil:function(t,e,i){return n(t,"nextSibling",i)},prevUntil:function(t,e,i){return n(t,"previousSibling",i)},siblings:function(t){return G((t.parentNode||{}).firstChild,t)},children:function(t){return G(t.firstChild)},contents:function(t){return null!=t.contentDocument&&R(t.contentDocument)?t.contentDocument:(l(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},function(n,o){C.fn[n]=function(t,e){var i=C.map(this,o,t);return(e="Until"!==n.slice(-5)?t:e)&&"string"==typeof e&&(i=C.filter(e,i)),1<this.length&&(it[n]||C.uniqueSort(i),et.test(n)&&i.reverse()),this.pushStack(i)}});var S=/[^\x20\t\r\n\f]+/g;function d(t){return t}function ot(t){throw t}function st(t,e,i,n){var o;try{t&&y(o=t.promise)?o.call(t).done(e).fail(i):t&&y(o=t.then)?o.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}C.Callbacks=function(n){var t,i;n="string"==typeof n?(t=n,i={},C.each(t.match(S)||[],function(t,e){i[e]=!0}),i):C.extend({},n);function o(){for(a=a||n.once,r=s=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&n.stopOnFalse&&(d=l.length,e=!1);n.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(e&&!s&&(d=l.length-1,c.push(e)),function i(t){C.each(t,function(t,e){y(e)?n.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==f(e)&&i(e)})}(arguments),e&&!s&&o()),this},remove:function(){return C.each(arguments,function(t,e){for(var i;-1<(i=C.inArray(e,l,i));)l.splice(i,1),i<=d&&d--}),this},has:function(t){return t?-1<C.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s||o()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},C.extend({Deferred:function(t){var s=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var o=arguments;return C.Deferred(function(n){C.each(s,function(t,e){var i=y(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[e[0]+"With"](this,i?[t]:arguments)})}),o=null}).promise()},then:function(e,i,n){var l=0;function c(o,s,r,a){return function(){function t(){var t,e;if(!(o<l)){if((t=r.apply(i,n))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?a?e.call(t,c(l,s,d,a),c(l,s,ot,a)):(l++,e.call(t,c(l,s,d,a),c(l,s,ot,a),c(l,s,d,s.notifyWith))):(r!==d&&(i=void 0,n=[t]),(a||s.resolveWith)(i,n))}}var i=this,n=arguments,e=a?t:function(){try{t()}catch(t){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(r!==ot&&(i=void 0,n=[t]),s.rejectWith(i,n))}};o?e():(C.Deferred.getStackHook&&(e.stackTrace=C.Deferred.getStackHook()),x.setTimeout(e))}}return C.Deferred(function(t){s[0][3].add(c(0,t,y(n)?n:d,t.notifyWith)),s[1][3].add(c(0,t,y(e)?e:d)),s[2][3].add(c(0,t,y(i)?i:ot))}).promise()},promise:function(t){return null!=t?C.extend(t,r):r}},a={};return C.each(s,function(t,e){var i=e[2],n=e[5];r[e[1]]=i.add,n&&i.add(function(){o=n},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(o,s)}}var i=arguments.length,n=i,o=Array(n),s=a.call(arguments),r=C.Deferred();if(i<=1&&(st(t,r.done(e(n)).resolve,r.reject,!i),"pending"===r.state()||y(s[n]&&s[n].then)))return r.then();for(;n--;)st(s[n],e(n),r.reject);return r.promise()}});var rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,at=(C.Deferred.exceptionHook=function(t,e){x.console&&x.console.warn&&t&&rt.test(t.name)&&x.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){x.setTimeout(function(){throw t})},C.Deferred());function lt(){_.removeEventListener("DOMContentLoaded",lt),x.removeEventListener("load",lt),C.ready()}C.fn.ready=function(t){return at.then(t).catch(function(t){C.readyException(t)}),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0)!==t&&0<--C.readyWait||at.resolveWith(_,[C])}}),C.ready.then=at.then,"complete"===_.readyState||"loading"!==_.readyState&&!_.documentElement.doScroll?x.setTimeout(C.ready):(_.addEventListener("DOMContentLoaded",lt),x.addEventListener("load",lt));function u(t,e,i,n,o,s,r){var a=0,l=t.length,c=null==i;if("object"===f(i))for(a in o=!0,i)u(t,e,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,y(n)||(r=!0),e=c?r?(e.call(t,n),null):(c=e,function(t,e,i){return c.call(C(t),i)}):e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return o?t:c?e.call(t):l?e(t[0],i):s}var ct=/^-ms-/,dt=/-([a-z])/g;function ut(t,e){return e.toUpperCase()}function b(t){return t.replace(ct,"ms-").replace(dt,ut)}function v(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function ht(){this.expando=C.expando+ht.uid++}ht.uid=1,ht.prototype={cache:function(t){var e=t[this.expando];return e||(e={},v(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,o=this.cache(t);if("string"==typeof e)o[b(e)]=i;else for(n in e)o[b(n)]=e[n];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][b(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(b):(e=b(e))in n?[e]:e.match(S)||[]).length;for(;i--;)delete n[e[i]]}void 0!==e&&!C.isEmptyObject(n)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){t=t[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var w=new ht,c=new ht,pt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ft=/[A-Z]/g;function gt(t,e,i){var n,o;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(ft,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i="true"===(o=i)||"false"!==o&&("null"===o?null:o===+o+""?+o:pt.test(o)?JSON.parse(o):o)}catch(t){}c.set(t,e,i)}else i=void 0;return i}C.extend({hasData:function(t){return c.hasData(t)||w.hasData(t)},data:function(t,e,i){return c.access(t,e,i)},removeData:function(t,e){c.remove(t,e)},_data:function(t,e,i){return w.access(t,e,i)},_removeData:function(t,e){w.remove(t,e)}}),C.fn.extend({data:function(i,t){var e,n,o,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){c.set(this,i)}):u(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=c.get(s,i))||void 0!==gt(s,i)?e:void 0;this.each(function(){c.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=c.get(s),1===s.nodeType&&!w.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(n=r[e].name).indexOf("data-")&&(n=b(n.slice(5)),gt(s,n,o[n]));w.set(s,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){c.remove(this,t)})}}),C.extend({queue:function(t,e,i){var n;if(t)return n=w.get(t,e=(e||"fx")+"queue"),i&&(!n||Array.isArray(i)?n=w.access(t,e,C.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=C.queue(t,e),n=i.length,o=i.shift(),s=C._queueHooks(t,e);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,function(){C.dequeue(t,e)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return w.get(t,i)||w.access(t,i,{empty:C.Callbacks("once memory").add(function(){w.remove(t,[e+"queue",i])})})}}),C.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?C.queue(this[0],e):void 0===i?this:this.each(function(){var t=C.queue(this,e,i);C._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&C.dequeue(this,e)})},dequeue:function(t){return this.each(function(){C.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--o||s.resolveWith(r,[r])}var n,o=1,s=C.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=w.get(r[a],t+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),s.promise(e)}});function mt(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&k(t)&&"none"===C.css(t,"display")}var t=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,vt=new RegExp("^(?:([+-])=|)("+t+")([a-z%]*)$","i"),h=["Top","Right","Bottom","Left"],T=_.documentElement,k=function(t){return C.contains(t.ownerDocument,t)},yt={composed:!0};T.getRootNode&&(k=function(t){return C.contains(t.ownerDocument,t)||t.getRootNode(yt)===t.ownerDocument});function bt(t,e,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return C.css(t,e,"")},l=a(),c=i&&i[3]||(C.cssNumber[e]?"":"px"),d=t.nodeType&&(C.cssNumber[e]||"px"!==c&&+l)&&vt.exec(C.css(t,e));if(d&&d[3]!==c){for(c=c||d[3],d=+(l/=2)||1;r--;)C.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;C.style(t,e,(d*=2)+c),i=i||[]}return i&&(d=+d||+l||0,o=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=o)),o}var wt={};function A(t,e){for(var i,n,o,s,r,a=[],l=0,c=t.length;l<c;l++)(n=t[l]).style&&(i=n.style.display,e?("none"===i&&(a[l]=w.get(n,"display")||null,a[l]||(n.style.display="")),""===n.style.display&&mt(n)&&(a[l]=(r=s=void 0,s=(o=n).ownerDocument,o=o.nodeName,(r=wt[o])||(s=s.body.appendChild(s.createElement(o)),r=C.css(s,"display"),s.parentNode.removeChild(s),wt[o]=r="none"===r?"block":r),r))):"none"!==i&&(a[l]="none",w.set(n,"display",i)));for(l=0;l<c;l++)null!=a[l]&&(t[l].style.display=a[l]);return t}C.fn.extend({show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){mt(this)?C(this).show():C(this).hide()})}});var xt=/^(?:checkbox|radio)$/i,_t=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ct=/^$|^module$|\/(?:java|ecma)script/i,$=(O=_.createDocumentFragment().appendChild(_.createElement("div")),(s=_.createElement("input")).setAttribute("type","radio"),s.setAttribute("checked","checked"),s.setAttribute("name","t"),O.appendChild(s),m.checkClone=O.cloneNode(!0).cloneNode(!0).lastChild.checked,O.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!O.cloneNode(!0).lastChild.defaultValue,O.innerHTML="<option></option>",m.option=!!O.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function E(t,e){var i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&l(t,e)?C.merge([t],i):i}function St(t,e){for(var i=0,n=t.length;i<n;i++)w.set(t[i],"globalEval",!e||w.get(e[i],"globalEval"))}$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td,m.option||($.optgroup=$.option=[1,"<select multiple='multiple'>","</select>"]);var Tt=/<|&#?\w+;/;function kt(t,e,i,n,o){for(var s,r,a,l,c,d=e.createDocumentFragment(),u=[],h=0,p=t.length;h<p;h++)if((s=t[h])||0===s)if("object"===f(s))C.merge(u,s.nodeType?[s]:s);else if(Tt.test(s)){for(r=r||d.appendChild(e.createElement("div")),a=(_t.exec(s)||["",""])[1].toLowerCase(),a=$[a]||$._default,r.innerHTML=a[1]+C.htmlPrefilter(s)+a[2],c=a[0];c--;)r=r.lastChild;C.merge(u,r.childNodes),(r=d.firstChild).textContent=""}else u.push(e.createTextNode(s));for(d.textContent="",h=0;s=u[h++];)if(n&&-1<C.inArray(s,n))o&&o.push(s);else if(l=k(s),r=E(d.appendChild(s),"script"),l&&St(r),i)for(c=0;s=r[c++];)Ct.test(s.type||"")&&i.push(s);return d}var At=/^([^.]*)(?:\.(.+)|)/;function i(){return!0}function p(){return!1}function $t(t,e){return t===function(){try{return _.activeElement}catch(t){}}()==("focus"===e)}function Et(t,e,i,n,o,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Et(t,a,i,n,e[a],s);return t}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=p;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return C().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=C.guid++)),t.each(function(){C.event.add(this,e,o,n,i)})}function Pt(t,o,s){s?(w.set(t,o,!1),C.event.add(t,o,{namespace:!1,handler:function(t){var e,i,n=w.get(this,o);if(1&t.isTrigger&&this[o]){if(n.length)(C.event.special[o]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),w.set(this,o,n),e=s(this,o),this[o](),n!==(i=w.get(this,o))||e?w.set(this,o,!1):i={},n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i&&i.value}else n.length&&(w.set(this,o,{value:C.event.trigger(C.extend(n[0],C.Event.prototype),n.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===w.get(t,o)&&C.event.add(t,o,i)}C.event={global:{},add:function(e,t,i,n,o){var s,r,a,l,c,d,u,h,p,f=w.get(e);if(v(e))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&C.find.matchesSelector(T,o),i.guid||(i.guid=C.guid++),(a=f.events)||(a=f.events=Object.create(null)),(r=f.handle)||(r=f.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(S)||[""]).length;l--;)u=p=(h=At.exec(t[l])||[])[1],h=(h[2]||"").split(".").sort(),u&&(c=C.event.special[u]||{},u=(o?c.delegateType:c.bindType)||u,c=C.event.special[u]||{},p=C.extend({type:u,origType:p,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},s),(d=a[u])||((d=a[u]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,n,h,r)||e.addEventListener&&e.addEventListener(u,r)),c.add&&(c.add.call(e,p),p.handler.guid||(p.handler.guid=i.guid)),o?d.splice(d.delegateCount++,0,p):d.push(p),C.event.global[u]=!0)},remove:function(t,e,i,n,o){var s,r,a,l,c,d,u,h,p,f,g,m=w.hasData(t)&&w.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(S)||[""]).length;c--;)if(p=g=(a=At.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=C.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)d=h[s],!o&&g!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(t,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||C.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)C.event.remove(t,p+e[c],i,n,!0);C.isEmptyObject(l)&&w.remove(t,"handle events")}},dispatch:function(t){var e,i,n,o,s,r=new Array(arguments.length),a=C.event.fix(t),t=(w.get(this,"events")||Object.create(null))[a.type]||[],l=C.event.special[a.type]||{};for(r[0]=a,e=1;e<arguments.length;e++)r[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=C.event.handlers.call(this,a,t),e=0;(n=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=n.elem,i=0;(o=n.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(o=((C.event.special[o.origType]||{}).handle||o.handler).apply(n.elem,r))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=e[i]).selector+" "]&&(r[o]=n.needsContext?-1<C(o,this).index(c):C.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&Pt(t,"click",i),!1},trigger:function(t){t=this||t;return xt.test(t.type)&&t.click&&l(t,"input")&&Pt(t,"click"),!0},_default:function(t){t=t.target;return xt.test(t.type)&&t.click&&l(t,"input")&&w.get(t,"click")||l(t,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?i:p,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=i,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=i,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=i,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(e,t){C.event.special[e]={setup:function(){return Pt(this,e,$t),!1},trigger:function(){return Pt(this,e),!0},_default:function(t){return w.get(t.target,e)},delegateType:t}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){C.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,i=t.relatedTarget,n=t.handleObj;return i&&(i===this||C.contains(this,i))||(t.type=n.origType,e=n.handler.apply(this,arguments),t.type=o),e}}}),C.fn.extend({on:function(t,e,i,n){return Et(this,t,e,i,n)},one:function(t,e,i,n){return Et(this,t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)n=t.handleObj,C(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler);else{if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=p),this.each(function(){C.event.remove(this,t,i,e)});for(o in t)this.off(o,e,t[o])}return this}});var Dt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,It=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ft(t,e){return l(t,"table")&&l(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function Mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Nt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Rt(t,e){var i,n,o,s;if(1===e.nodeType){if(w.hasData(t)&&(s=w.get(t).events))for(o in w.remove(e,"handle events"),s)for(i=0,n=s[o].length;i<n;i++)C.event.add(e,o,s[o][i]);c.hasData(t)&&(t=c.access(t),t=C.extend({},t),c.set(e,t))}}function P(i,n,o,s){n=j(n);var t,e,r,a,l,c,d=0,u=i.length,h=u-1,p=n[0],f=y(p);if(f||1<u&&"string"==typeof p&&!m.checkClone&&Ot.test(p))return i.each(function(t){var e=i.eq(t);f&&(n[0]=p.call(this,t,e.html())),P(e,n,o,s)});if(u&&(e=(t=kt(n,i[0].ownerDocument,!1,i,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=C.map(E(t,"script"),Mt)).length;d<u;d++)l=t,d!==h&&(l=C.clone(l,!0,!0),a&&C.merge(r,E(l,"script"))),o.call(i[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,C.map(r,Nt),d=0;d<a;d++)l=r[d],Ct.test(l.type||"")&&!w.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):V(l.textContent.replace(It,""),l,c))}return i}function jt(t,e,i){for(var n,o=e?C.filter(e,t):t,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||C.cleanData(E(n)),n.parentNode&&(i&&k(n)&&St(E(n,"script")),n.parentNode.removeChild(n));return t}C.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,o,s,r,a,l,c,d=t.cloneNode(!0),u=k(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(r=E(d),n=0,o=(s=E(t)).length;n<o;n++)a=s[n],l=r[n],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&xt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||E(t),r=r||E(d),n=0,o=s.length;n<o;n++)Rt(s[n],r[n]);else Rt(t,d);return 0<(r=E(d,"script")).length&&St(r,!u&&E(t,"script")),d},cleanData:function(t){for(var e,i,n,o=C.event.special,s=0;void 0!==(i=t[s]);s++)if(v(i)){if(e=i[w.expando]){if(e.events)for(n in e.events)o[n]?C.event.remove(i,n):C.removeEvent(i,n,e.handle);i[w.expando]=void 0}i[c.expando]&&(i[c.expando]=void 0)}}}),C.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return u(this,function(t){return void 0===t?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return P(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ft(this,t).appendChild(t)})},prepend:function(){return P(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=Ft(this,t)).insertBefore(t,e.firstChild)})},before:function(){return P(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return P(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(E(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return C.clone(this,t,e)})},html:function(t){return u(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!$[(_t.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(C.cleanData(E(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return P(this,arguments,function(t){var e=this.parentNode;C.inArray(this,i)<0&&(C.cleanData(E(this)),e&&e.replaceChild(t,this))},i)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){C.fn[t]=function(t){for(var e,i=[],n=C(t),o=n.length-1,s=0;s<=o;s++)e=s===o?this:this.clone(!0),C(n[s])[r](e),L.apply(i,e.get());return this.pushStack(i)}});function Lt(t){var e=t.ownerDocument.defaultView;return(e=e&&e.opener?e:x).getComputedStyle(t)}function Ht(t,e,i){var n,o={};for(n in e)o[n]=t.style[n],t.style[n]=e[n];for(n in i=i.call(t),e)t.style[n]=o[n];return i}var Bt,qt,zt,Wt,Ut,Xt,Vt,o,Yt=new RegExp("^("+t+")(?!px)[a-z%]+$","i"),Gt=/^--/,Kt=new RegExp(h.join("|"),"i"),s="[\\x20\\t\\r\\n\\f]",Qt=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g");function Zt(){var t;o&&(Vt.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",o.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",T.appendChild(Vt).appendChild(o),t=x.getComputedStyle(o),Bt="1%"!==t.top,Xt=12===Jt(t.marginLeft),o.style.right="60%",Wt=36===Jt(t.right),qt=36===Jt(t.width),o.style.position="absolute",zt=12===Jt(o.offsetWidth/3),T.removeChild(Vt),o=null)}function Jt(t){return Math.round(parseFloat(t))}function te(t,e,i){var n,o=Gt.test(e),s=t.style;return(i=i||Lt(t))&&(n=i.getPropertyValue(e)||i[e],""!==(n=o&&n?n.replace(Qt,"$1")||void 0:n)||k(t)||(n=C.style(t,e)),!m.pixelBoxStyles()&&Yt.test(n)&&Kt.test(e)&&(o=s.width,t=s.minWidth,e=s.maxWidth,s.minWidth=s.maxWidth=s.width=n,n=i.width,s.width=o,s.minWidth=t,s.maxWidth=e)),void 0!==n?n+"":n}function ee(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Vt=_.createElement("div"),(o=_.createElement("div")).style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===o.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return Zt(),qt},pixelBoxStyles:function(){return Zt(),Wt},pixelPosition:function(){return Zt(),Bt},reliableMarginLeft:function(){return Zt(),Xt},scrollboxSize:function(){return Zt(),zt},reliableTrDimensions:function(){var t,e,i;return null==Ut&&(t=_.createElement("table"),e=_.createElement("tr"),i=_.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",i.style.height="9px",i.style.display="block",T.appendChild(t).appendChild(e).appendChild(i),i=x.getComputedStyle(e),Ut=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===e.offsetHeight,T.removeChild(t)),Ut}}));var ie=["Webkit","Moz","ms"],ne=_.createElement("div").style,oe={};function se(t){var e=C.cssProps[t]||oe[t];return e||(t in ne?t:oe[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=ie.length;i--;)if((t=ie[i]+e)in ne)return t}(t)||t)}var re=/^(none|table(?!-c[ea]).+)/,ae={position:"absolute",visibility:"hidden",display:"block"},le={letterSpacing:"0",fontWeight:"400"};function ce(t,e,i){var n=vt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function de(t,e,i,n,o,s){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=C.css(t,i+h[r],!0,o)),n?("content"===i&&(l-=C.css(t,"padding"+h[r],!0,o)),"margin"!==i&&(l-=C.css(t,"border"+h[r]+"Width",!0,o))):(l+=C.css(t,"padding"+h[r],!0,o),"padding"!==i?l+=C.css(t,"border"+h[r]+"Width",!0,o):a+=C.css(t,"border"+h[r]+"Width",!0,o));return!n&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function ue(t,e,i){var n=Lt(t),o=(!m.boxSizingReliable()||i)&&"border-box"===C.css(t,"boxSizing",!1,n),s=o,r=te(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Yt.test(r)){if(!i)return r;r="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&l(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,n))&&t.getClientRects().length&&(o="border-box"===C.css(t,"boxSizing",!1,n),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+de(t,e,i||(o?"border":"content"),s,n,r)+"px"}function r(t,e,i,n,o){return new r.prototype.init(t,e,i,n,o)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e)return""===(e=te(t,"opacity"))?"1":e}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=b(e),l=Gt.test(e),c=t.style;if(l||(e=se(a)),r=C.cssHooks[e]||C.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(t,!1,n))?o:c[e];"string"===(s=typeof i)&&(o=vt.exec(i))&&o[1]&&(i=bt(t,e,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var o,s=b(e);return Gt.test(e)||(e=se(s)),"normal"===(o=void 0===(o=(s=C.cssHooks[e]||C.cssHooks[s])&&"get"in s?s.get(t,!0,i):o)?te(t,e,n):o)&&e in le&&(o=le[e]),(""===i||i)&&(s=parseFloat(o),!0===i||isFinite(s))?s||0:o}}),C.each(["height","width"],function(t,r){C.cssHooks[r]={get:function(t,e,i){if(e)return!re.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ue(t,r,i):Ht(t,ae,function(){return ue(t,r,i)})},set:function(t,e,i){var n=Lt(t),o=!m.scrollboxSize()&&"absolute"===n.position,s=(o||i)&&"border-box"===C.css(t,"boxSizing",!1,n),i=i?de(t,r,i,s,n):0;return s&&o&&(i-=Math.ceil(t["offset"+r[0].toUpperCase()+r.slice(1)]-parseFloat(n[r])-de(t,r,"border",!1,n)-.5)),i&&(s=vt.exec(e))&&"px"!==(s[3]||"px")&&(t.style[r]=e,e=C.css(t,r)),ce(0,e,i)}}}),C.cssHooks.marginLeft=ee(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(te(t,"marginLeft"))||t.getBoundingClientRect().left-Ht(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(o,s){C.cssHooks[o+s]={expand:function(t){for(var e=0,i={},n="string"==typeof t?t.split(" "):[t];e<4;e++)i[o+h[e]+s]=n[e]||n[e-2]||n[0];return i}},"margin"!==o&&(C.cssHooks[o+s].set=ce)}),C.fn.extend({css:function(t,e){return u(this,function(t,e,i){var n,o,s={},r=0;if(Array.isArray(e)){for(n=Lt(t),o=e.length;r<o;r++)s[e[r]]=C.css(t,e[r],!1,n);return s}return void 0!==i?C.style(t,e,i):C.css(t,e)},t,e,1<arguments.length)}}),((C.Tween=r).prototype={constructor:r,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(C.cssNumber[i]?"":"px")},cur:function(){var t=r.propHooks[this.prop];return(t&&t.get?t:r.propHooks._default).get(this)},run:function(t){var e,i=r.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(i&&i.set?i:r.propHooks._default).set(this),this}}).init.prototype=r.prototype,(r.propHooks={_default:{get:function(t){return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(t=C.css(t.elem,t.prop,""))&&"auto"!==t?t:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||!C.cssHooks[t.prop]&&null==t.elem.style[se(t.prop)]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=r.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=r.prototype.init,C.fx.step={};var D,he,O,pe=/^(?:toggle|show|hide)$/,fe=/queueHooks$/;function ge(){he&&(!1===_.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(ge):x.setTimeout(ge,C.fx.interval),C.fx.tick())}function me(){return x.setTimeout(function(){D=void 0}),D=Date.now()}function ve(t,e){var i,n=0,o={height:t};for(e=e?1:0;n<4;n+=2-e)o["margin"+(i=h[n])]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function ye(t,e,i){for(var n,o=(I.tweeners[e]||[]).concat(I.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,e,t))return n}function I(o,t,e){var i,s,n,r,a,l,c,d=0,u=I.prefilters.length,h=C.Deferred().always(function(){delete p.elem}),p=function(){if(!s){for(var t=D||me(),t=Math.max(0,f.startTime+f.duration-t),e=1-(t/f.duration||0),i=0,n=f.tweens.length;i<n;i++)f.tweens[i].run(e);if(h.notifyWith(o,[f,e,t]),e<1&&n)return t;n||h.notifyWith(o,[f,1,0]),h.resolveWith(o,[f])}return!1},f=h.promise({elem:o,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},e),originalProperties:t,originalOptions:e,startTime:D||me(),duration:e.duration,tweens:[],createTween:function(t,e){e=C.Tween(o,f.opts,t,e,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(e),e},stop:function(t){var e=0,i=t?f.tweens.length:0;if(!s){for(s=!0;e<i;e++)f.tweens[e].run(1);t?(h.notifyWith(o,[f,1,0]),h.resolveWith(o,[f,t])):h.rejectWith(o,[f,t])}return this}}),g=f.props,m=g,v=f.opts.specialEasing;for(n in m)if(a=v[r=b(n)],l=m[n],Array.isArray(l)&&(a=l[1],l=m[n]=l[0]),n!==r&&(m[r]=l,delete m[n]),(c=C.cssHooks[r])&&"expand"in c)for(n in l=c.expand(l),delete m[r],l)n in m||(m[n]=l[n],v[n]=a);else v[r]=a;for(;d<u;d++)if(i=I.prefilters[d].call(f,o,g,f.opts))return y(i.stop)&&(C._queueHooks(f.elem,f.opts.queue).stop=i.stop.bind(i)),i;return C.map(g,ye,f),y(f.opts.start)&&f.opts.start.call(o,f),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always),C.fx.timer(C.extend(p,{elem:o,anim:f,queue:f.opts.queue})),f}C.Animation=C.extend(I,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return bt(i.elem,t,vt.exec(e),i),i}]},tweener:function(t,e){for(var i,n=0,o=(t=y(t)?(e=t,["*"]):t.match(S)).length;n<o;n++)i=t[n],I.tweeners[i]=I.tweeners[i]||[],I.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,o,s,r,a,l,c,d="width"in e||"height"in e,u=this,h={},p=t.style,f=t.nodeType&&mt(t),g=w.get(t,"fxshow");for(n in i.queue||(null==(r=C._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,u.always(function(){u.always(function(){r.unqueued--,C.queue(t,"fx").length||r.empty.fire()})})),e)if(o=e[n],pe.test(o)){if(delete e[n],s=s||"toggle"===o,o===(f?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;f=!0}h[n]=g&&g[n]||C.style(t,n)}if((l=!C.isEmptyObject(e))||!C.isEmptyObject(h))for(n in d&&1===t.nodeType&&(i.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=g&&g.display)&&(c=w.get(t,"display")),"none"===(d=C.css(t,"display"))&&(c?d=c:(A([t],!0),c=t.style.display||c,d=C.css(t,"display"),A([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===C.css(t,"float")&&(l||(u.done(function(){p.display=c}),null==c&&(d=p.display,c="none"===d?"":d)),p.display="inline-block")),i.overflow&&(p.overflow="hidden",u.always(function(){p.overflow=i.overflow[0],p.overflowX=i.overflow[1],p.overflowY=i.overflow[2]})),l=!1,h)l||(g?"hidden"in g&&(f=g.hidden):g=w.access(t,"fxshow",{display:c}),s&&(g.hidden=!f),f&&A([t],!0),u.done(function(){for(n in f||A([t]),w.remove(t,"fxshow"),h)C.style(t,n,h[n])})),l=ye(f?g[n]:0,n,u),n in g||(g[n]=l.start,f&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?I.prefilters.unshift(t):I.prefilters.push(t)}}),C.speed=function(t,e,i){var n=t&&"object"==typeof t?C.extend({},t):{complete:i||!i&&e||y(t)&&t,duration:t,easing:i&&e||e&&!y(e)&&e};return C.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in C.fx.speeds?n.duration=C.fx.speeds[n.duration]:n.duration=C.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){y(n.old)&&n.old.call(this),n.queue&&C.dequeue(this,n.queue)},n},C.fn.extend({fadeTo:function(t,e,i,n){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(e,t,i,n){function o(){var t=I(this,C.extend({},e),r);(s||w.get(this,"finish"))&&t.stop(!0)}var s=C.isEmptyObject(e),r=C.speed(t,i,n);return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(o,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof o&&(s=t,t=o,o=void 0),t&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",i=C.timers,n=w.get(this);if(e)n[e]&&n[e].stop&&r(n[e]);else for(e in n)n[e]&&n[e].stop&&fe.test(e)&&r(n[e]);for(e=i.length;e--;)i[e].elem!==this||null!=o&&i[e].queue!==o||(i[e].anim.stop(s),t=!1,i.splice(e,1));!t&&s||C.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=w.get(this),i=e[r+"queue"],n=e[r+"queueHooks"],o=C.timers,s=i?i.length:0;for(e.finish=!0,C.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===r&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),C.each(["toggle","show","hide"],function(t,n){var o=C.fn[n];C.fn[n]=function(t,e,i){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(ve(n,!0),t,e,i)}}),C.each({slideDown:ve("show"),slideUp:ve("hide"),slideToggle:ve("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){C.fn[t]=function(t,e,i){return this.animate(n,t,e,i)}}),C.timers=[],C.fx.tick=function(){var t,e=0,i=C.timers;for(D=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||C.fx.stop(),D=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){he||(he=!0,ge())},C.fx.stop=function(){he=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(n,t){return n=C.fx&&C.fx.speeds[n]||n,this.queue(t=t||"fx",function(t,e){var i=x.setTimeout(t,n);e.stop=function(){x.clearTimeout(i)}})},O=_.createElement("input"),t=_.createElement("select").appendChild(_.createElement("option")),O.type="checkbox",m.checkOn=""!==O.value,m.optSelected=t.selected,(O=_.createElement("input")).value="t",O.type="radio",m.radioValue="t"===O.value;var be,we=C.expr.attrHandle,xe=(C.fn.extend({attr:function(t,e){return u(this,C.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){C.removeAttr(this,t)})}}),C.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?C.prop(t,e,i):(1===s&&C.isXMLDoc(t)||(o=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?be:void 0)),void 0!==i?null===i?void C.removeAttr(t,e):o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:(t.setAttribute(e,i+""),i):!(o&&"get"in o&&null!==(n=o.get(t,e)))&&null==(n=C.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){var i;if(!m.radioValue&&"radio"===e&&l(t,"input"))return i=t.value,t.setAttribute("type",e),i&&(t.value=i),e}}},removeAttr:function(t,e){var i,n=0,o=e&&e.match(S);if(o&&1===t.nodeType)for(;i=o[n++];)t.removeAttribute(i)}}),be={set:function(t,e,i){return!1===e?C.removeAttr(t,i):t.setAttribute(i,i),i}},C.each(C.expr.match.bool.source.match(/\w+/g),function(t,e){var r=we[e]||C.find.attr;we[e]=function(t,e,i){var n,o,s=e.toLowerCase();return i||(o=we[s],we[s]=n,n=null!=r(t,e,i)?s:null,we[s]=o),n}}),/^(?:input|select|textarea|button)$/i),_e=/^(?:a|area)$/i;function F(t){return(t.match(S)||[]).join(" ")}function M(t){return t.getAttribute&&t.getAttribute("class")||""}function Ce(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(S)||[]}C.fn.extend({prop:function(t,e){return u(this,C.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[C.propFix[t]||t]})}}),C.extend({prop:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&C.isXMLDoc(t)||(e=C.propFix[e]||e,o=C.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):xe.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(t){t=t.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(t){t=t.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,i,n,o,s,r;return y(e)?this.each(function(t){C(this).addClass(e.call(this,t,M(this)))}):(t=Ce(e)).length?this.each(function(){if(n=M(this),i=1===this.nodeType&&" "+F(n)+" "){for(s=0;s<t.length;s++)o=t[s],i.indexOf(" "+o+" ")<0&&(i+=o+" ");r=F(i),n!==r&&this.setAttribute("class",r)}}):this},removeClass:function(e){var t,i,n,o,s,r;return y(e)?this.each(function(t){C(this).removeClass(e.call(this,t,M(this)))}):arguments.length?(t=Ce(e)).length?this.each(function(){if(n=M(this),i=1===this.nodeType&&" "+F(n)+" "){for(s=0;s<t.length;s++)for(o=t[s];-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r=F(i),n!==r&&this.setAttribute("class",r)}}):this:this.attr("class","")},toggleClass:function(e,i){var t,n,o,s,r=typeof e,a="string"==r||Array.isArray(e);return y(e)?this.each(function(t){C(this).toggleClass(e.call(this,t,M(this),i),i)}):"boolean"==typeof i&&a?i?this.addClass(e):this.removeClass(e):(t=Ce(e),this.each(function(){if(a)for(s=C(this),o=0;o<t.length;o++)n=t[o],s.hasClass(n)?s.removeClass(n):s.addClass(n);else void 0!==e&&"boolean"!=r||((n=M(this))&&w.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",!n&&!1!==e&&w.get(this,"__className__")||""))}))},hasClass:function(t){for(var e,i=0,n=" "+t+" ";e=this[i++];)if(1===e.nodeType&&-1<(" "+F(M(e))+" ").indexOf(n))return!0;return!1}});function Se(t){t.stopPropagation()}var Te=/\r/g,ke=(C.fn.extend({val:function(e){var i,t,n,o=this[0];return arguments.length?(n=y(e),this.each(function(t){1===this.nodeType&&(null==(t=n?e.call(this,t,C(this).val()):e)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=C.map(t,function(t){return null==t?"":t+""})),(i=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):o?(i=C.valHooks[o.type]||C.valHooks[o.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(o,"value"))?t:"string"==typeof(t=o.value)?t.replace(Te,""):null==t?"":t:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:F(C.text(t))}},select:{get:function(t){for(var e,i=t.options,n=t.selectedIndex,o="select-one"===t.type,s=o?null:[],r=o?n+1:i.length,a=n<0?r:o?n:0;a<r;a++)if(((e=i[a]).selected||a===n)&&!e.disabled&&(!e.parentNode.disabled||!l(e.parentNode,"optgroup"))){if(e=C(e).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var i,n,o=t.options,s=C.makeArray(e),r=o.length;r--;)((n=o[r]).selected=-1<C.inArray(C.valHooks.option.get(n),s))&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<C.inArray(C(t).val(),e)}},m.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),m.focusin="onfocusin"in x,/^(?:focusinfocus|focusoutblur)$/),Ae=(C.extend(C.event,{trigger:function(t,e,i,n){var o,s,r,a,l,c,d,u=[i||_],h=z.call(t,"type")?t.type:t,p=z.call(t,"namespace")?t.namespace.split("."):[],f=d=s=i=i||_;if(3!==i.nodeType&&8!==i.nodeType&&!ke.test(h+C.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),a=h.indexOf(":")<0&&"on"+h,(t=t[C.expando]?t:new C.Event(h,"object"==typeof t&&t)).isTrigger=n?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:C.makeArray(e,[t]),c=C.event.special[h]||{},n||!c.trigger||!1!==c.trigger.apply(i,e))){if(!n&&!c.noBubble&&!g(i)){for(r=c.delegateType||h,ke.test(r+h)||(f=f.parentNode);f;f=f.parentNode)u.push(f),s=f;s===(i.ownerDocument||_)&&u.push(s.defaultView||s.parentWindow||x)}for(o=0;(f=u[o++])&&!t.isPropagationStopped();)d=f,t.type=1<o?r:c.bindType||h,(l=(w.get(f,"events")||Object.create(null))[t.type]&&w.get(f,"handle"))&&l.apply(f,e),(l=a&&f[a])&&l.apply&&v(f)&&(t.result=l.apply(f,e),!1===t.result&&t.preventDefault());return t.type=h,n||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),e)||!v(i)||a&&y(i[h])&&!g(i)&&((s=i[a])&&(i[a]=null),C.event.triggered=h,t.isPropagationStopped()&&d.addEventListener(h,Se),i[h](),t.isPropagationStopped()&&d.removeEventListener(h,Se),C.event.triggered=void 0,s&&(i[a]=s)),t.result}},simulate:function(t,e,i){i=C.extend(new C.Event,i,{type:t,isSimulated:!0});C.event.trigger(i,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each(function(){C.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return C.event.trigger(t,e,i,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},function(i,n){function o(t){C.event.simulate(n,t.target,C.event.fix(t))}C.event.special[n]={setup:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,n);e||t.addEventListener(i,o,!0),w.access(t,n,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=w.access(t,n)-1;e?w.access(t,n,e):(t.removeEventListener(i,o,!0),w.remove(t,n))}}}),x.location),$e={guid:Date.now()},Ee=/\?/,Pe=(C.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{e=(new x.DOMParser).parseFromString(t,"text/xml")}catch(t){}return i=e&&e.getElementsByTagName("parsererror")[0],e&&!i||C.error("Invalid XML: "+(i?C.map(i.childNodes,function(t){return t.textContent}).join("\n"):t)),e},/\[\]$/),De=/\r?\n/g,Oe=/^(?:submit|button|image|reset|file)$/i,Ie=/^(?:input|select|textarea|keygen)/i;C.param=function(t,e){function i(t,e){e=y(e)?e():e,o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)}var n,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,function(){i(this.name,this.value)});else for(n in t)!function i(n,t,o,s){if(Array.isArray(t))C.each(t,function(t,e){o||Pe.test(n)?s(n,e):i(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,s)});else if(o||"object"!==f(t))s(n,t);else for(var e in t)i(n+"["+e+"]",t[e],o,s)}(n,t[n],e,i);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&Ie.test(this.nodeName)&&!Oe.test(t)&&(this.checked||!xt.test(t))}).map(function(t,e){var i=C(this).val();return null==i?null:Array.isArray(i)?C.map(i,function(t){return{name:e.name,value:t.replace(De,"\r\n")}}):{name:e.name,value:i.replace(De,"\r\n")}}).get()}});var Fe=/%20/g,Me=/#.*$/,Ne=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,je=/^(?:GET|HEAD)$/,Le=/^\/\//,He={},Be={},qe="*/".concat("*"),ze=_.createElement("a");function We(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,n=0,o=t.toLowerCase().match(S)||[];if(y(e))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(e)):(s[i]=s[i]||[]).push(e)}}function Ue(e,n,o,s){var r={},a=e===Be;function l(t){var i;return r[t]=!0,C.each(e[t]||[],function(t,e){e=e(n,o,s);return"string"!=typeof e||a||r[e]?a?!(i=e):void 0:(n.dataTypes.unshift(e),l(e),!1)}),i}return l(n.dataTypes[0])||!r["*"]&&l("*")}function Xe(t,e){var i,n,o=C.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n=n||{})[i]=e[i]);return n&&C.extend(!0,t,n),t}ze.href=Ae.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Xe(Xe(t,C.ajaxSettings),e):Xe(C.ajaxSettings,t)},ajaxPrefilter:We(He),ajaxTransport:We(Be),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0);var l,c,d,i,u,h,p,n,f=C.ajaxSetup({},e=e||{}),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?C(g):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),b=f.statusCode||{},o={},s={},r="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(h){if(!i)for(i={};e=Re.exec(d);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return h?d:null},setRequestHeader:function(t,e){return null==h&&(t=s[t.toLowerCase()]=s[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==h&&(f.mimeType=t),this},statusCode:function(t){if(t)if(h)w.always(t[w.status]);else for(var e in t)b[e]=[b[e],t[e]];return this},abort:function(t){t=t||r;return l&&l.abort(t),a(0,t),this}};if(v.promise(w),f.url=((t||f.url||Ae.href)+"").replace(Le,Ae.protocol+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(S)||[""],null==f.crossDomain){t=_.createElement("a");try{t.href=f.url,t.href=t.href,f.crossDomain=ze.protocol+"//"+ze.host!=t.protocol+"//"+t.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),Ue(He,f,e,w),!h){for(n in(p=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!je.test(f.type),c=f.url.replace(Me,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Fe,"+")):(t=f.url.slice(c.length),f.data&&(f.processData||"string"==typeof f.data)&&(c+=(Ee.test(c)?"&":"?")+f.data,delete f.data),!1===f.cache&&(c=c.replace(Ne,"$1"),t=(Ee.test(c)?"&":"?")+"_="+$e.guid+++t),f.url=c+t),f.ifModified&&(C.lastModified[c]&&w.setRequestHeader("If-Modified-Since",C.lastModified[c]),C.etag[c]&&w.setRequestHeader("If-None-Match",C.etag[c])),(f.data&&f.hasContent&&!1!==f.contentType||e.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+qe+"; q=0.01":""):f.accepts["*"]),f.headers)w.setRequestHeader(n,f.headers[n]);if(f.beforeSend&&(!1===f.beforeSend.call(g,w,f)||h))return w.abort();if(r="abort",y.add(f.complete),w.done(f.success),w.fail(f.error),l=Ue(Be,f,e,w)){if(w.readyState=1,p&&m.trigger("ajaxSend",[w,f]),h)return w;f.async&&0<f.timeout&&(u=x.setTimeout(function(){w.abort("timeout")},f.timeout));try{h=!1,l.send(o,a)}catch(t){if(h)throw t;a(-1,t)}}else a(-1,"No Transport")}return w;function a(t,e,i,n){var o,s,r,a=e;h||(h=!0,u&&x.clearTimeout(u),l=void 0,d=n||"",w.readyState=0<t?4:0,n=200<=t&&t<300||304===t,i&&(r=function(t,e,i){for(var n,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(f,w,i)),!n&&-1<C.inArray("script",f.dataTypes)&&C.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),r=function(t,e,i,n){var o,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(f,r,w,n),n?(f.ifModified&&((i=w.getResponseHeader("Last-Modified"))&&(C.lastModified[c]=i),(i=w.getResponseHeader("etag"))&&(C.etag[c]=i)),204===t||"HEAD"===f.type?a="nocontent":304===t?a="notmodified":(a=r.state,o=r.data,n=!(s=r.error))):(s=a,!t&&a||(a="error",t<0&&(t=0))),w.status=t,w.statusText=(e||a)+"",n?v.resolveWith(g,[o,a,w]):v.rejectWith(g,[w,a,s]),w.statusCode(b),b=void 0,p&&m.trigger(n?"ajaxSuccess":"ajaxError",[w,f,n?o:s]),y.fireWith(g,[w,a]),p&&(m.trigger("ajaxComplete",[w,f]),--C.active||C.event.trigger("ajaxStop")))}},getJSON:function(t,e,i){return C.get(t,e,i,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],function(t,o){C[o]=function(t,e,i,n){return y(e)&&(n=n||i,i=e,e=void 0),C.ajax(C.extend({url:t,type:o,dataType:n,data:e,success:i},C.isPlainObject(t)&&t))}}),C.ajaxPrefilter(function(t){for(var e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),C._evalUrl=function(t,e,i){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){C.globalEval(t,e,i)}})},C.fn.extend({wrapAll:function(t){return this[0]&&(y(t)&&(t=t.call(this[0])),t=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return y(i)?this.each(function(t){C(this).wrapInner(i.call(this,t))}):this.each(function(){var t=C(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=y(e);return this.each(function(t){C(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(t){}};var Ve={0:200,1223:204},Ye=C.ajaxSettings.xhr(),Ge=(m.cors=!!Ye&&"withCredentials"in Ye,m.ajax=Ye=!!Ye,C.ajaxTransport(function(o){var s,r;if(m.cors||Ye&&!o.crossDomain)return{send:function(t,e){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)n.setRequestHeader(i,t[i]);s=function(t){return function(){s&&(s=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===t?n.abort():"error"===t?"number"!=typeof n.status?e(0,"error"):e(n.status,n.statusText):e(Ve[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=s(),r=n.onerror=n.ontimeout=s("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&x.setTimeout(function(){s&&r()})},s=s("abort");try{n.send(o.hasContent&&o.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),C.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),C.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){n=C("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(t){n.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),_.head.appendChild(n[0])},abort:function(){o&&o()}}}),[]),Ke=/(=)\?(?=&|$)|\?\?/,Qe=(C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ge.pop()||C.expando+"_"+$e.guid++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",function(t,e,i){var n,o,s,r=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return n=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(Ke,"$1"+n):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+n),t.converters["script json"]=function(){return s||C.error(n+" was not called"),s[0]},t.dataTypes[0]="json",o=x[n],x[n]=function(){s=arguments},i.always(function(){void 0===o?C(x).removeProp(n):x[n]=o,t[n]&&(t.jsonpCallback=e.jsonpCallback,Ge.push(n)),s&&y(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((s=_.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===s.childNodes.length),C.parseHTML=function(t,e,i){var n;return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=_.implementation.createHTMLDocument("")).createElement("base")).href=_.location.href,e.head.appendChild(n)):e=_),n=!i&&[],(i=Q.exec(t))?[e.createElement(i[1])]:(i=kt([t],e,n),n&&n.length&&C(n).remove(),C.merge([],i.childNodes)))},C.fn.load=function(t,e,i){var n,o,s,r=this,a=t.indexOf(" ");return-1<a&&(n=F(t.slice(a)),t=t.slice(0,a)),y(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<r.length&&C.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(n?C("<div>").append(C.parseHTML(t)).find(n):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(t,e,i){var n,o,s,r,a=C.css(t,"position"),l=C(t),c={};"static"===a&&(t.style.position="relative"),s=l.offset(),n=C.css(t,"top"),r=C.css(t,"left"),a=("absolute"===a||"fixed"===a)&&-1<(n+r).indexOf("auto")?(o=(a=l.position()).top,a.left):(o=parseFloat(n)||0,parseFloat(r)||0),null!=(e=y(e)?e.call(t,i,C.extend({},s)):e).top&&(c.top=e.top-s.top+o),null!=e.left&&(c.left=e.left-s.left+a),"using"in e?e.using.call(t,c):l.css(c)}},C.fn.extend({offset:function(e){var t,i;return arguments.length?void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)}):(i=this[0])?i.getClientRects().length?(t=i.getBoundingClientRect(),i=i.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],o={top:0,left:0};if("fixed"===C.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((o=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),o.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-C.css(n,"marginTop",!0),left:e.left-o.left-C.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||T})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var s="pageYOffset"===o;C.fn[e]=function(t){return u(this,function(t,e,i){var n;if(g(t)?n=t:9===t.nodeType&&(n=t.defaultView),void 0===i)return n?n[o]:t[e];n?n.scrollTo(s?n.pageXOffset:i,s?i:n.pageYOffset):t[e]=i},e,t,arguments.length)}}),C.each(["top","left"],function(t,i){C.cssHooks[i]=ee(m.pixelPosition,function(t,e){if(e)return e=te(t,i),Yt.test(e)?C(t).position()[i]+"px":e})}),C.each({Height:"height",Width:"width"},function(r,a){C.each({padding:"inner"+r,content:a,"":"outer"+r},function(n,s){C.fn[s]=function(t,e){var i=arguments.length&&(n||"boolean"!=typeof t),o=n||(!0===t||!0===e?"margin":"border");return u(this,function(t,e,i){var n;return g(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(n=t.documentElement,Math.max(t.body["scroll"+r],n["scroll"+r],t.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?C.css(t,e,o):C.style(t,e,i,o)},a,i?t:void 0,i)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){C.fn[e]=function(t){return this.on(e,t)}}),C.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){C.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Ze=(C.proxy=function(t,e){var i,n;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=a.call(arguments,2),(n=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||C.guid++,n},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=l,C.isFunction=y,C.isWindow=g,C.camelCase=b,C.type=f,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},C.trim=function(t){return null==t?"":(t+"").replace(Qe,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C}),x.jQuery),Je=x.$;return C.noConflict=function(t){return x.$===C&&(x.$=Je),t&&x.jQuery===C&&(x.jQuery=Ze),C},void 0===N&&(x.jQuery=x.$=C),C}),function(h){"use strict";for(var p,o,s,r,a,f=null,t=["webkit","moz","o","ms"],e=h.document.createElement("div"),i=-1,i=0;i<t.length&&!h.requestAnimationFrame;i++)h.requestAnimationFrame=h[t[i]+"RequestAnimationFrame"];function n(){}void 0===e.nextElementSibling&&Object.defineProperty(h.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(e=h.Element.prototype).matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(s=Object.prototype.hasOwnProperty,r=!{toString:null}.propertyIsEnumerable("toString"),a=(o=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],i="",n=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(i in t)s.call(t,i)&&e.push(i);if(r)for(n=0;n<a;n++)s.call(t,o[n])&&e.push(o[n]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");n.prototype=t||{};var i=new n;return n.prototype=null,void 0!==e&&Object.defineProperties(i,e),null===t&&(i.__proto__=null),i}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,i,n,o;if(null===this)throw new TypeError;if(0!=(o=(n=Object(this)).length>>>0)&&(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),!(o<=e)))for(i=0<=e?e:Math.max(o-Math.abs(e),0);i<o;i++)if(i in n&&n[i]===t)return i;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,i,n,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),n=function(){},o=function(){return i.apply(this instanceof n?this:t,e.concat(Array.prototype.slice.call(arguments)))},(i=this).prototype&&(n.prototype=this.prototype),o.prototype=new n,o}),h.Element.prototype.dispatchEvent||(h.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}}),(p=function(t,e,i){var n,o=null,s=!1,r=null,a=null,l=[],c="",d=[],u=-1,a=i||h.document;if((s=arguments[3])&&(s="boolean"==typeof s),"string"==typeof t)d=a.querySelectorAll(t);else if(t&&"object"==typeof t&&f.isElement(t,a))d=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(p.messages.errorFactoryInvalidContainer());d=t}if(d.length<1)throw new Error(p.messages.errorFactoryContainerNotFound());for(u=0;(o=d[u])&&(!(0<u)||s);u++)o.id?c=o.id:(c="MixItUp"+f.randomHex(),o.id=c),p.instances[c]instanceof p.Mixer?(r=p.instances[c],(!e||e.debug&&!1!==e.debug.showWarnings)&&console.warn(p.messages.warningFactoryPreexistingInstance())):((r=new p.Mixer).attach(o,a,c,e),p.instances[c]=r),n=new p.Facade(r),e&&e.debug&&e.debug.enable?l.push(r):l.push(n);return s?new p.Collection(l):l[0]}).use=function(t){p.Base.prototype.callActions.call(p,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===p.extensions[t.NAME]&&(t(p),p.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(p.libraries.$=t),p.Base.prototype.callActions.call(p,"afterUse",arguments)},p.instances={},p.extensions={},p.libraries={},f={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){this.hasClass(t,e)&&(e=new RegExp("(\\s|^)"+e+"(\\s|$)"),t.className=t.className.replace(e," ").trim())},extend:function(e,t,i,n){var o,s=[],r=-1;i=i||!1,n=n||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)s.push(r);else t&&(s=Object.keys(t));for(r=0;r<s.length;r++)o=s[r],!i||"object"!=typeof t[o]||this.isElement(t[o])?e[o]=t[o]:(Array.isArray(t[o])?e[o]||(e[o]=[]):e[o]||(e[o]={}),this.extend(e[o],t[o],i,n))}catch(t){if(!n)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var i=null,n="",o="",s="",r="",a=-1,l=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(r in n=i[1],e){for(l=0;l<n.length&&n.charAt(l)===r.charAt(l);)l++;a<l&&(a=l,s=r)}throw 1<a&&(o=p.messages.errorConfigInvalidPropertySuggestion({probableMatch:s})),i=p.messages.errorConfigInvalidProperty({erroneous:n,suggestion:o}),new TypeError(i)}throw t},template:function(n){for(var t,e=/\${([\w]*)}/g,o={};t=e.exec(n);)o[t[1]]=new RegExp("\\${"+t[1]+"}","g");return function(t){var e="",i=n;for(e in t=t||{},o)i=i.replace(o[e],void 0!==t[e]?t[e]:"");return i}},on:function(t,e,i,n){t&&(t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&(t["e"+e+i]=i,t[e+i]=function(){t["e"+e+i](h.event)},t.attachEvent("on"+e,t[e+i])))},off:function(t,e,i){t&&(t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+i]),t[e+i]=null))},getCustomEvent:function(t,e,i){var n=null;return i=i||h.document,"function"==typeof h.CustomEvent?n=new h.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(n=i.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((n=i.createEventObject()).type=t,n.returnValue=!1,n.cancelBubble=!1,n.detail=e),n},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var i=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++i;return i},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||h.document,!!(h.HTMLElement&&t instanceof h.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var i=null,n=null,i=(e=e||h.document).createDocumentFragment();for((n=e.createElement("div")).innerHTML=t.trim();n.firstChild;)i.appendChild(n.firstChild);return i},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var i=t.length;if(i!==e.length)return!1;for(;i--;)if(t[i]!==e[i])return!1;return!0},deepEquals:function(t,e){if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(var i in t)if(!e.hasOwnProperty(i)||!this.deepEquals(t[i],e[i]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e,i,n=t.slice(),o=n.length,s=o;s--;)e=~~(Math.random()*o),i=n[s],n[s]=n[e],n[e]=i;return n},arrayFromList:function(e){var i,n;try{return Array.prototype.slice.call(e)}catch(t){for(i=[],n=0;n<e.length;n++)i.push(e[n]);return i}},debounce:function(o,s,r){var a;return function(){var t=this,e=arguments,i=r&&!a,n=function(){a=null,r||o.apply(t,e)};clearTimeout(a),a=setTimeout(n,s),i&&o.apply(t,e)}},position:function(t){for(var e=0,i=0,n=t;t;)e-=t.scrollLeft,i-=t.scrollTop,t===n&&(e+=t.offsetLeft,i+=t.offsetTop,n=t.offsetParent),t=t.parentElement;return{x:e,y:i}},getHypotenuse:function(t,e){var i=(i=t.x-e.x)<0?-1*i:i,t=(t=t.y-e.y)<0?-1*t:t;return Math.sqrt(Math.pow(i,2)+Math.pow(t,2))},getIntersectionRatio:function(t,e){var i=t.width*t.height,n=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left));return Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*n/i},closestParent:function(t,e,i,n){var o=t.parentNode;if(n=n||h.document,i&&t.matches(e))return t;for(;o&&o!=n.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,i){var n=[],o="";return i=i||h.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),n=i.querySelectorAll("#"+t.id+" > "+e),o&&t.removeAttribute("id")),n},clean:function(t){for(var e=[],i=-1,i=0;i<t.length;i++)""!==t[i]&&e.push(t[i]);return e},defer:function(t){var e=null,i=null,n=null,i=new this.Deferred;return p.features.has.promises?i.promise=new Promise(function(t,e){i.resolve=t,i.reject=e}):(n=h.jQuery||t.$)&&"function"==typeof n.Deferred?(e=n.Deferred(),i.promise=e.promise(),i.resolve=e.resolve,i.reject=e.reject):h.console&&console.warn(p.messages.warningNoPromiseImplementation()),i},all:function(t,e){var i=null;return p.features.has.promises?Promise.all(t):(i=h.jQuery||e.$)&&"function"==typeof i.when?i.when.apply(i,t).done(function(){return arguments}):(h.console&&console.warn(p.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,i){var n=-1,o="";if(f.dashCase(e)in t.style)return"";for(n=0;o=i[n];n++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:h.document,{scrollTop:h.pageYOffset,scrollLeft:h.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){return!!t.offsetParent||"fixed"===(t=h.getComputedStyle(t)).position&&"hidden"!==t.visibility&&"0"!==t.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){for(var i,n,o=t.split("."),s=e.split("."),r=-1,r=0;r<o.length;r++){if(i=parseInt(o[r].replace(/[^\d.]/g,"")),(n=parseInt(s[r].replace(/[^\d.]/g,"")||0))<i)return!1;if(i<n)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=f.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,i){var n="";return(n+=t.block).length&&(n+=t.delineatorElement),n+=t["element"+this.pascalCase(e)],i&&(n.length&&(n+=t.delineatorModifier),n+=i),n},getProperty:function(t,e){var i,n=e.split("."),o="",s=0;if(!e)return t;for(i=function(t){return t?t[o]:null};s<n.length;)o=n[s],t=i(t),s++;return void 0!==t?t:null}},p.h=f,(p.Base=function(){}).prototype={constructor:p.Base,callActions:function(t,e){var i=this.constructor.actions[t],n="";if(i&&!f.isEmptyObject(i))for(n in i)i[n].apply(this,e)},callFilters:function(t,e,i){var n=this.constructor.filters[t],o=e,s="";if(n&&!f.isEmptyObject(n))for(s in i=i||[],n)(i=f.arrayFromList(i)).unshift(o),o=n[s].apply(this,i);return o}},(p.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){f.extend(this.prototype,t)},this.registerAction=function(t,e,i){(this.actions[t]=this.actions[t]||{})[e]=i},this.registerFilter=function(t,e,i){(this.filters[t]=this.filters[t]||{})[e]=i}}).call(p.Features=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new p.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")}),p.Features.prototype=Object.create(p.Base.prototype),f.extend(p.Features.prototype,{constructor:p.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof h.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),f.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=f.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=f.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=f.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+f.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+f.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),p.Has=function(){this.transitions=!1,this.promises=!1,f.seal(this)},(p.features=new p.Features).init(),p.BaseStatic.call(p.ConfigAnimation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigAnimation.prototype=Object.create(p.Base.prototype),p.ConfigAnimation.prototype.constructor=p.ConfigAnimation,p.BaseStatic.call(p.ConfigBehavior=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigBehavior.prototype=Object.create(p.Base.prototype),p.ConfigBehavior.prototype.constructor=p.ConfigBehavior,p.BaseStatic.call(p.ConfigCallbacks=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigCallbacks.prototype=Object.create(p.Base.prototype),p.ConfigCallbacks.prototype.constructor=p.ConfigCallbacks,p.BaseStatic.call(p.ConfigControls=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),f.seal(this)}),p.ConfigControls.prototype=Object.create(p.Base.prototype),p.ConfigControls.prototype.constructor=p.ConfigControls,p.BaseStatic.call(p.ConfigClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),f.seal(this)}),p.ConfigClassNames.prototype=Object.create(p.Base.prototype),p.ConfigClassNames.prototype.constructor=p.ConfigClassNames,p.BaseStatic.call(p.ConfigData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigData.prototype=Object.create(p.Base.prototype),p.ConfigData.prototype.constructor=p.ConfigData,p.BaseStatic.call(p.ConfigDebug=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigDebug.prototype=Object.create(p.Base.prototype),p.ConfigDebug.prototype.constructor=p.ConfigDebug,p.BaseStatic.call(p.ConfigLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigLayout.prototype=Object.create(p.Base.prototype),p.ConfigLayout.prototype.constructor=p.ConfigLayout,p.BaseStatic.call(p.ConfigLoad=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigLoad.prototype=Object.create(p.Base.prototype),p.ConfigLoad.prototype.constructor=p.ConfigLoad,p.BaseStatic.call(p.ConfigSelectors=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),f.seal(this)}),p.ConfigSelectors.prototype=Object.create(p.Base.prototype),p.ConfigSelectors.prototype.constructor=p.ConfigSelectors,p.BaseStatic.call(p.ConfigRender=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),f.seal(this)}),p.ConfigRender.prototype=Object.create(p.Base.prototype),p.ConfigRender.prototype.constructor=p.ConfigRender,p.BaseStatic.call(p.ConfigTemplates=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),f.seal(this)}),p.ConfigTemplates.prototype=Object.create(p.Base.prototype),p.ConfigTemplates.prototype.constructor=p.ConfigTemplates,p.BaseStatic.call(p.Config=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.animation=new p.ConfigAnimation,this.behavior=new p.ConfigBehavior,this.callbacks=new p.ConfigCallbacks,this.controls=new p.ConfigControls,this.classNames=new p.ConfigClassNames,this.data=new p.ConfigData,this.debug=new p.ConfigDebug,this.layout=new p.ConfigLayout,this.load=new p.ConfigLoad,this.selectors=new p.ConfigSelectors,this.render=new p.ConfigRender,this.templates=new p.ConfigTemplates,this.callActions("afterConstruct"),f.seal(this)}),p.Config.prototype=Object.create(p.Base.prototype),p.Config.prototype.constructor=p.Config,p.BaseStatic.call(p.MixerDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),f.seal(this)}),p.MixerDom.prototype=Object.create(p.Base.prototype),p.MixerDom.prototype.constructor=p.MixerDom,p.BaseStatic.call(p.UiClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),f.seal(this)}),p.UiClassNames.prototype=Object.create(p.Base.prototype),p.UiClassNames.prototype.constructor=p.UiClassNames,p.BaseStatic.call(p.CommandDataset=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),f.seal(this)}),p.CommandDataset.prototype=Object.create(p.Base.prototype),p.CommandDataset.prototype.constructor=p.CommandDataset,p.BaseStatic.call(p.CommandMultimix=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),f.seal(this)}),p.CommandMultimix.prototype=Object.create(p.Base.prototype),p.CommandMultimix.prototype.constructor=p.CommandMultimix,p.BaseStatic.call(p.CommandFilter=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),f.seal(this)}),p.CommandFilter.prototype=Object.create(p.Base.prototype),p.CommandFilter.prototype.constructor=p.CommandFilter,p.BaseStatic.call(p.CommandSort=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),f.seal(this)}),p.CommandSort.prototype=Object.create(p.Base.prototype),p.CommandSort.prototype.constructor=p.CommandSort,p.BaseStatic.call(p.CommandInsert=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),f.seal(this)}),p.CommandInsert.prototype=Object.create(p.Base.prototype),p.CommandInsert.prototype.constructor=p.CommandInsert,p.BaseStatic.call(p.CommandRemove=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),f.seal(this)}),p.CommandRemove.prototype=Object.create(p.Base.prototype),p.CommandRemove.prototype.constructor=p.CommandRemove,p.BaseStatic.call(p.CommandChangeLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),f.seal(this)}),p.CommandChangeLayout.prototype=Object.create(p.Base.prototype),p.CommandChangeLayout.prototype.constructor=p.CommandChangeLayout,p.BaseStatic.call(p.ControlDefinition=function(t,e,i,n){p.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=i||!1,this.parent=n||"",this.callActions("afterConstruct"),f.freeze(this),f.seal(this)}),p.ControlDefinition.prototype=Object.create(p.Base.prototype),p.ControlDefinition.prototype.constructor=p.ControlDefinition,(p.controlDefinitions=[]).push(new p.ControlDefinition("multimix","[data-filter][data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("filter","[data-filter]")),p.controlDefinitions.push(new p.ControlDefinition("sort","[data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("toggle","[data-toggle]")),p.BaseStatic.call(p.Control=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new p.UiClassNames,this.callActions("afterConstruct"),f.seal(this)}),p.Control.prototype=Object.create(p.Base.prototype),f.extend(p.Control.prototype,{constructor:p.Control,init:function(t,e,i){var n=this;if(this.callActions("beforeInit",arguments),n.el=t,n.type=e,n.selector=i,n.selector)n.status="live";else switch(n.canDisable="boolean"==typeof n.el.disable,n.type){case"filter":n.filter=n.el.getAttribute("data-filter");break;case"toggle":n.filter=n.el.getAttribute("data-toggle");break;case"sort":n.sort=n.el.getAttribute("data-sort");break;case"multimix":n.filter=n.el.getAttribute("data-filter"),n.sort=n.el.getAttribute("data-sort")}n.bindClick(),p.controls.push(n),this.callActions("afterInit",arguments)},isBound:function(t){return this.callActions("beforeIsBound",arguments),t=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",t,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this;this.callActions("beforeRemoveBinding",arguments),-1<(t=e.bound.indexOf(t))&&e.bound.splice(t,1),e.bound.length<1&&(e.unbindClick(),t=p.controls.indexOf(e),p.controls.splice(t,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},f.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),f.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e,i=this,n=null,o=null,s=!1,r={},a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=i.bound[0],n=i.selector?f.closestParent(t.target,o.config.selectors.control+i.selector,!0,o.dom.document):i.el){switch(i.type){case"filter":r.filter=i.filter||n.getAttribute("data-filter");break;case"sort":r.sort=i.sort||n.getAttribute("data-sort");break;case"multimix":r.filter=i.filter||n.getAttribute("data-filter"),r.sort=i.sort||n.getAttribute("data-sort");break;case"toggle":r.filter=i.filter||n.getAttribute("data-toggle"),s="live"===i.status?f.hasClass(n,i.classNames.active):"active"===i.status}for(l=0;l<i.bound.length;l++)e=new p.CommandMultimix,f.extend(e,r),a.push(e);for(a=i.callFilters("commandsHandleClick",a,arguments),i.pending=i.bound.length,l=0;o=i.bound[l];l++)(r=a[l])&&(o.lastClicked||(o.lastClicked=n),p.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===i.type?s?o.toggleOff(r.filter):o.toggleOn(r.filter):o.multimix(r)));this.callActions("afterHandleClick",arguments)}else i.callActions("afterHandleClick",arguments)},update:function(t,e){var i=this,n=new p.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),0<i.pending||("live"===i.status?i.updateLive(t,e):(n.sort=i.sort,n.filter=i.filter,i.callFilters("actionsUpdate",n,arguments),i.parseStatusChange(i.el,t,n,e)),i.callActions("afterUpdate",arguments))},updateLive:function(t,e){var i,n=this,o=null,s=null,r=-1;if(n.callActions("beforeUpdateLive",arguments),n.el){for(i=n.el.querySelectorAll(n.selector),r=0;s=i[r];r++){switch(o=new p.CommandMultimix,n.type){case"filter":o.filter=s.getAttribute("data-filter");break;case"sort":o.sort=s.getAttribute("data-sort");break;case"multimix":o.filter=s.getAttribute("data-filter"),o.sort=s.getAttribute("data-sort");break;case"toggle":o.filter=s.getAttribute("data-toggle")}o=n.callFilters("actionsUpdateLive",o,arguments),n.parseStatusChange(s,t,o,e)}n.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,i,n){var o=this,s="",r=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===i.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===i.sort&&e.filter===i.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(s=e.sort.replace(/:asc/g,"")),e.sort===i.sort||s===i.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(n.length<1&&o.renderStatus(t,"inactive"),e.filter===i.filter&&o.renderStatus(t,"active"),r=0;r<n.length;r++){if(n[r]===i.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var i=this;switch(i.callActions("beforeRenderStatus",arguments),e){case"active":f.addClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":f.removeClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),f.addClass(t,i.classNames.disabled),f.removeClass(t,i.classNames.active)}"live"!==i.status&&(i.status=e),i.callActions("afterRenderStatus",arguments)}}),p.controls=[],p.BaseStatic.call(p.StyleData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new p.TransformData,this.translateX=new p.TransformData,this.translateY=new p.TransformData,this.translateZ=new p.TransformData,this.rotateX=new p.TransformData,this.rotateY=new p.TransformData,this.rotateZ=new p.TransformData,this.callActions("afterConstruct"),f.seal(this)}),p.StyleData.prototype=Object.create(p.Base.prototype),p.StyleData.prototype.constructor=p.StyleData,p.BaseStatic.call(p.TransformData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),f.seal(this)}),p.TransformData.prototype=Object.create(p.Base.prototype),p.TransformData.prototype.constructor=p.TransformData,p.BaseStatic.call(p.TransformDefaults=function(){p.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),f.seal(this)}),p.TransformDefaults.prototype=Object.create(p.StyleData.prototype),p.TransformDefaults.prototype.constructor=p.TransformDefaults,p.transformDefaults=new p.TransformDefaults,p.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},p.BaseStatic.call(p.Events=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),f.seal(this)}),p.Events.prototype=Object.create(p.Base.prototype),p.Events.prototype.constructor=p.Events,p.Events.prototype.fire=function(t,e,i,n){var o=new p.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');o.state=new p.State,f.extend(o.state,i.state),i.futureState&&(o.futureState=new p.State,f.extend(o.futureState,i.futureState)),o.instance=i.instance,i.originalEvent&&(o.originalEvent=i.originalEvent),i=f.getCustomEvent(t,o,n),this.callFilters("eventFire",i,arguments),e.dispatchEvent(i)},p.events=new p.Events,p.BaseStatic.call(p.QueueItem=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),f.seal(this)}),p.QueueItem.prototype=Object.create(p.Base.prototype),p.QueueItem.prototype.constructor=p.QueueItem,p.BaseStatic.call(p.Mixer=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.config=new p.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new p.MixerDom,this.callActions("afterConstruct"),f.seal(this)}),p.Mixer.prototype=Object.create(p.Base.prototype),f.extend(p.Mixer.prototype,{constructor:p.Mixer,attach:function(t,e,i,n){var o=this,s=null,r=-1;for(o.callActions("beforeAttach",arguments),o.id=i,n&&f.extend(o.config,n,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&f.addClass(o.dom.container,o.config.layout.containerClassName),p.features.has.transitions||(o.config.animation.enable=!1),void 0===h.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),r=0;s=o.lastOperation.toHide[r];r++)s.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new p.State,i=new p.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(p.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=e.activeDataset=t.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,i.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(i.newSort=e.activeSort,t.sortOperation(i),t.printSort(!1,i),t.targets=i.newOrder):i.startOrder=i.newOrder=t.targets,i.startFilter=i.newFilter=e.activeFilter,i.startSort=i.newSort=e.activeSort,i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=t.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=t.callFilters("operationGetInitialState",i,[e]),(t.lastOperation=i).newFilter&&t.filterOperation(i),e=t.buildState(i)},cacheDom:function(t,e){var i=this;i.callActions("beforeCacheDom",arguments),i.dom.document=e,i.dom.body=i.dom.document.querySelector("body"),i.dom.container=t,i.dom.parent=t,i.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e,i=this,n=null,o=-1;if(i.callActions("beforeIndexTargets",arguments),i.dom.targets=i.config.layout.allowNestedTargets?i.dom.container.querySelectorAll(i.config.selectors.target):f.children(i.dom.container,i.config.selectors.target,i.dom.document),i.dom.targets=f.arrayFromList(i.dom.targets),i.targets=[],(e=i.config.load.dataset)&&e.length!==i.dom.targets.length)throw new Error(p.messages.errorDatasetPrerenderedMismatch());if(i.dom.targets.length){for(o=0;t=i.dom.targets[o];o++)(n=new p.Target).init(t,i,e?e[o]:void 0),n.isInDom=!0,i.targets.push(n);i.dom.parent=i.dom.targets[0].parentElement===i.dom.container?i.dom.container:i.dom.targets[0].parentElement}i.origOrder=i.targets,i.callActions("afterIndexTargets",arguments)},initControls:function(){var t,e,i=this,n=null,o=null,s=null,r=null,a=-1,l=-1;switch(i.callActions("beforeInitControls",arguments),i.config.controls.scope){case"local":o=i.dom.container;break;case"global":o=i.dom.document;break;default:throw new Error(p.messages.errorConfigInvalidControlsScope())}for(a=0;t=p.controlDefinitions[a];a++)if(i.config.controls.live||t.live){if(t.parent){if(!(s=i.dom[t.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[o];for(l=0;n=s[l];l++)r=i.getControl(n,t.type,t.selector),i.controls.push(r)}else for(e=o.querySelectorAll(i.config.selectors.control+t.selector),l=0;n=e[l];l++)(r=i.getControl(n,t.type,""))&&i.controls.push(r);i.callActions("afterInitControls",arguments)},getControl:function(t,e,i){var n=this,o=null,s=-1;if(n.callActions("beforeGetControl",arguments),!i)for(s=0;o=p.controls[s];s++){if(o.el===t&&o.isBound(n))return n.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===i)return o.addBinding(n),n.callFilters("controlGetControl",o,arguments)}return(o=new p.Control).init(t,e,i),o.classNames.base=f.getClassname(n.config.classNames,e),o.classNames.active=f.getClassname(n.config.classNames,e,n.config.classNames.modifierActive),o.classNames.disabled=f.getClassname(n.config.classNames,e,n.config.classNames.modifierDisabled),o.addBinding(n),n.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",i="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=f.clean(t.toggleArray),""===(i=t.toggleArray.join(e))&&(i=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",i,arguments)},buildToggleArray:function(t,e){var i=this,n="";if(i.callActions("beforeBuildToggleArray",arguments),t&&t.filter)n=t.filter.selector.replace(/\s/g,"");else{if(!e)return;n=e.activeFilter.selector.replace(/\s/g,"")}n!==i.config.selectors.target&&"all"!==n||(n=""),"or"===i.config.controls.toggleLogic?i.toggleArray=n.split(","):i.toggleArray=i.splitCompoundSelector(n),i.toggleArray=f.clean(i.toggleArray),i.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),i=[],n="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(n=""),n+=e[o],o%2!=0&&i.push(n);return i},updateControls:function(t){var e=this,i=null,n=new p.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?n.filter=t.filter.selector:n.filter=e.state.activeFilter.selector,t.sort?n.sort=e.buildSortString(t.sort):n.sort=e.buildSortString(e.state.activeSort),n.filter===e.config.selectors.target&&(n.filter="all"),""===n.filter&&(n.filter="none"),f.freeze(n),o=0;i=e.controls[o];o++)i.update(n,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var i,n=this,o=-1,s=null,r=null,a=null,l=-1;if(n.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),i=n.getNextSibling(t.index,t.sibling,t.position),s=n.dom.document.createDocumentFragment(),o=i?f.index(i,n.config.selectors.target):n.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<n.dom.targets.indexOf(a))throw new Error(p.messages.errorInsertPreexistingElement());a.style.display="none",s.appendChild(a),s.appendChild(n.dom.document.createTextNode(" ")),f.isElement(a,n.dom.document)&&a.matches(n.config.selectors.target)&&((r=new p.Target).init(a,n),r.isInDom=!0,n.targets.splice(o,0,r),o++)}n.dom.parent.insertBefore(s,i)}e.startOrder=n.origOrder=n.targets,n.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,i){var n=this,o=null;return t=Math.max(t,0),e&&"before"===i?o=e:e&&"after"===i?o=e.nextElementSibling||null:0<n.targets.length&&void 0!==t?o=t<n.targets.length||!n.targets.length?n.targets[t].dom.el:n.targets[n.targets.length-1].dom.el.nextElementSibling:0===n.targets.length&&0<n.dom.parent.children.length&&(n.config.layout.siblingAfter?o=n.config.layout.siblingAfter:n.config.layout.siblingBefore?o=n.config.layout.siblingBefore.nextElementSibling:n.dom.parent.children[0]),n.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,i,n=!1,o=null,s=-1;for(this.callActions("beforeFilterOperation",arguments),i=t.newFilter.action,s=0;o=t.newOrder[s];s++)n=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(n,o,i,t);if(t.toRemove.length)for(s=0;o=t.show[s];s++)-1<t.toRemove.indexOf(o)&&(t.show.splice(s,1),-1<(e=t.toShow.indexOf(o))&&t.toShow.splice(e,1),t.toHide.push(o),t.hide.push(o),s--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,i,n){var o=Array.prototype.slice.call(arguments,1),t=this.callFilters("testResultEvaluateHideShow",t,o);this.callActions("beforeEvaluateHideShow",arguments),!0===t&&"show"===i||!1===t&&"hide"===i?(n.show.push(e),e.isShown||n.toShow.push(e)):(n.hide.push(e),e.isShown&&n.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(i){var t,n=this,e=[],o=null,s=-1;if(n.callActions("beforeSortOperation",arguments),i.startOrder=n.targets,i.newSort.collection){for(e=[],s=0;t=i.newSort.collection[s];s++){if(n.dom.targets.indexOf(t)<0)throw new Error(p.messages.errorSortNonExistentElement());(o=new p.Target).init(t,n),o.isInDom=!0,e.push(o)}i.newOrder=e}else"random"===i.newSort.order?i.newOrder=f.arrayShuffle(i.startOrder):""===i.newSort.attribute?(i.newOrder=n.origOrder.slice(),"desc"===i.newSort.order&&i.newOrder.reverse()):(i.newOrder=i.startOrder.slice(),i.newOrder.sort(function(t,e){return n.compare(t,e,i.newSort)}));f.isEqualArray(i.newOrder,i.startOrder)&&(i.willSort=!1),n.callActions("afterSortOperation",arguments)},compare:function(t,e,i){var n=i.order,o=this.getAttributeValue(t,i.attribute),s=this.getAttributeValue(e,i.attribute),s=isNaN(+o)||isNaN(+s)?(o=o.toLowerCase(),s.toLowerCase()):(o=+o,+s);return o<s?"asc"===n?-1:1:s<o?"asc"===n?1:-1:o===s&&i.next?this.compare(t,e,i.next):0},getAttributeValue:function(t,e){return null===(t=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(p.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",t||0,arguments)},printSort:function(t,e){var i=this,n=t?e.newOrder:e.startOrder,o=t?e.startOrder:e.newOrder,t=n.length?n[n.length-1].dom.el.nextElementSibling:null,s=h.document.createDocumentFragment(),r=null,a=null,l=-1;for(i.callActions("beforePrintSort",arguments),l=0;r=n[l];l++)"absolute"!==(a=r.dom.el).style.position&&(f.removeWhitespace(a.previousSibling),a.parentElement.removeChild(a));for((e=t?t.previousSibling:i.dom.parent.lastChild)&&"#text"===e.nodeName&&f.removeWhitespace(e),l=0;r=o[l];l++)a=r.dom.el,f.isElement(s.lastChild)&&s.appendChild(h.document.createTextNode(" ")),s.appendChild(a);i.dom.parent.firstChild&&i.dom.parent.firstChild!==t&&s.insertBefore(h.document.createTextNode(" "),s.childNodes[0]),t?(s.appendChild(h.document.createTextNode(" ")),i.dom.parent.insertBefore(s,t)):i.dom.parent.appendChild(s),i.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){for(var i,n=t.split(" "),o=e,s=-1,s=0;s<n.length;s++){switch(i=n[s].split(":"),o.sortString=n[s],o.attribute=f.dashCase(i[0]),o.order=i[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;s<n.length-1&&(o.next=new p.CommandSort,f.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",i=t.config.animation.effectsIn||t.config.animation.effects,n=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new p.StyleData,t.effectsOut=new p.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",i,t.effectsIn,t.transformIn),t.parseEffect("fade",n,t.effectsOut,t.transformOut,!0),p.transformDefaults)p.transformDefaults[e]instanceof p.TransformData&&(t.parseEffect(e,i,t.effectsIn,t.transformIn),t.parseEffect(e,n,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",i,t.effectsIn,t.transformIn),t.parseEffect("stagger",n,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,i,n,o){var s,r,a=this,l="",c=["%","px","em","rem","vh","vw","deg"],d=-1;if(a.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(p.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(a.staggerDuration=0);else{switch(-1<(s=e.indexOf(t+"("))&&(e=e.substring(s),l=/\(([^)]+)\)/.exec(e)[1]),t){case"fade":i.opacity=l?parseFloat(l):0;break;case"stagger":a.staggerDuration=l?parseFloat(l):100;break;default:if(o&&a.config.animation.reverseOut&&"scale"!==t?i[t].value=-1*(l?parseFloat(l):p.transformDefaults[t].value):i[t].value=l?parseFloat(l):p.transformDefaults[t].value,l){for(d=0;r=c[d];d++)if(-1<l.indexOf(r)){i[t].unit=r;break}}else i[t].unit=p.transformDefaults[t].unit;n.push(t+"("+i[t].value+i[t].unit+")")}a.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,i=new p.State,n=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;n=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(n)<0)&&i.targets.push(n.dom.el);for(o=0;n=t.matching[o];o++)i.matching.push(n.dom.el);for(o=0;n=t.show[o];o++)i.show.push(n.dom.el);for(o=0;n=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(n)<0)&&i.hide.push(n.dom.el);return i.id=e.id,i.container=e.dom.container,i.activeFilter=t.newFilter,i.activeSort=t.newSort,i.activeDataset=t.newDataset,i.activeContainerClassName=t.newContainerClassName,i.hasFailed=t.hasFailed,i.totalTargets=e.targets.length,i.totalShow=t.show.length,i.totalHide=t.hide.length,i.totalMatching=t.matching.length,i.triggerElement=t.triggerElement,e.callFilters("stateBuildState",i,arguments)},goMix:function(t,e){var i=this,n=null;return i.callActions("beforeGoMix",arguments),i.config.animation.duration&&i.config.animation.effects&&f.isVisible(i.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),p.events.fire("mixStart",i.dom.container,{state:e.startState,futureState:e.newState,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixStart&&i.config.callbacks.onMixStart.call(i.dom.container,e.startState,e.newState,i),f.removeClass(i.dom.container,f.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed)),n=i.userDeferred||(i.userDeferred=f.defer(p.libraries)),i.isBusy=!0,t&&p.features.has.transitions?(h.pageYOffset!==e.docState.scrollTop&&h.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),i.config.animation.applyPerspective&&(i.dom.parent.style[p.features.perspectiveProp]=i.config.animation.perspectiveDistance,i.dom.parent.style[p.features.perspectiveOriginProp]=i.config.animation.perspectiveOrigin),i.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),i.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(i.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){i.moveTargets(e)})):i.config.debug.fauxAsync?setTimeout(function(){i.cleanUp(e)},i.config.animation.duration):i.cleanUp(e),i.callFilters("promiseGoMix",n.promise,arguments)},getStartMixData:function(t){var e=this,i=h.getComputedStyle(e.dom.parent),n=e.dom.parent.getBoundingClientRect(),o=null,s={},r=-1,a=i[p.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),r=0;o=t.show[r];r++)s=o.getPosData(),t.showPosData[r]={startPosData:s};for(r=0;o=t.toHide[r];r++)s=o.getPosData(),t.toHidePosData[r]={startPosData:s};t.startX=n.left,t.startY=n.top,t.startHeight=e.incPadding?n.height:n.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.startWidth=e.incPadding?n.width:n.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,i=null,n=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),n=0;i=t.toShow[n];n++)i.show();t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,i=-1;for(this.callActions("beforeGetInterMixData",arguments),i=0;e=t.show[i];i++)t.showPosData[i].interPosData=e.getPosData();for(i=0;e=t.toHide[i];i++)t.toHidePosData[i].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,i=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),i=0;e=t.toHide[i];i++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,i=this,n=null,o=null,s=-1;for(i.callActions("beforeGetFinalMixData",arguments),s=0;o=t.show[s];s++)t.showPosData[s].finalPosData=o.getPosData();for(s=0;o=t.toHide[s];s++)t.toHidePosData[s].finalPosData=o.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(n=h.getComputedStyle(i.dom.parent)),e=i.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=i.incPadding?e.height:e.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.newWidth=i.incPadding?e.width:e.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&i.printSort(!0,t),s=0;o=t.toShow[s];s++)o.hide();for(s=0;o=t.toHide[s];s++)o.show();t.willChangeLayout&&(f.removeClass(i.dom.container,t.newContainerClassName),f.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,i=null,n=null,o=Object.getOwnPropertyNames(e.effectsIn),s="",r=null,a=-1,l=-1,c=-1,d=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;i=t.show[c];c++)for((n=t.showPosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,i.isShown?(n.posIn.x=n.startPosData.x-n.interPosData.x,n.posIn.y=n.startPosData.y-n.interPosData.y):n.posIn.x=n.posIn.y=0,n.posOut.x=n.finalPosData.x-n.interPosData.x,n.posOut.y=n.finalPosData.y-n.interPosData.y,n.posIn.opacity=i.isShown?1:e.effectsIn.opacity,n.posOut.opacity=1,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,i.isShown||e.config.animation.nudge||(n.posIn.x=n.posOut.x,n.posIn.y=n.posOut.y),n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,e.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,a=(n.startPosData.width||n.finalPosData.width)-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-a,l=(n.startPosData.height||n.finalPosData.height)-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l,n.posOut.width=n.finalPosData.width,n.posOut.height=n.finalPosData.height,a=(n.finalPosData.width||n.startPosData.width)-n.interPosData.width,n.posOut.marginRight=n.finalPosData.marginRight-a,l=(n.finalPosData.height||n.startPosData.height)-n.interPosData.height,n.posOut.marginBottom=n.finalPosData.marginBottom-l,n.tweenData.width=n.posOut.width-n.posIn.width,n.tweenData.height=n.posOut.height-n.posIn.height,n.tweenData.marginRight=n.posOut.marginRight-n.posIn.marginRight,n.tweenData.marginBottom=n.posOut.marginBottom-n.posIn.marginBottom),d=0;s=o[d];d++)(r=e.effectsIn[s])instanceof p.TransformData&&r.value&&(n.posIn[s].value=r.value,n.posOut[s].value=0,n.tweenData[s].value=n.posOut[s].value-n.posIn[s].value,n.posIn[s].unit=n.posOut[s].unit=n.tweenData[s].unit=r.unit);for(c=0;i=t.toHide[c];c++)for((n=t.toHidePosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,n.posIn.x=i.isShown?n.startPosData.x-n.interPosData.x:0,n.posIn.y=i.isShown?n.startPosData.y-n.interPosData.y:0,n.posOut.x=e.config.animation.nudge?0:n.posIn.x,n.posOut.y=e.config.animation.nudge?0:n.posIn.y,n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,e.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,a=n.startPosData.width-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-a,l=n.startPosData.height-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l),n.posIn.opacity=1,n.posOut.opacity=e.effectsOut.opacity,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,d=0;s=o[d];d++)(r=e.effectsOut[s])instanceof p.TransformData&&r.value&&(n.posIn[s].value=0,n.posOut[s].value=r.value,n.tweenData[s].value=n.posOut[s].value-n.posIn[s].value,n.posIn[s].unit=n.posOut[s].unit=n.tweenData[s].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,i=null,n=null,o=null,s="",r=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;i=t.show[l];l++)n=new p.IMoveData,o=t.showPosData[l],s=i.isShown?"none":"show",(r=e.willTransition(s,t.hasEffect,o.posIn,o.posOut))&&a++,i.show(),n.posIn=o.posIn,n.posOut=o.posOut,n.statusChange=s,n.staggerIndex=a,n.operation=t,n.callback=r?c:null,i.move(n);for(l=0;i=t.toHide[l];l++)o=t.toHidePosData[l],n=new p.IMoveData,r=e.willTransition(s="hide",o.posIn,o.posOut),n.posIn=o.posIn,n.posOut=o.posOut,n.statusChange=s,n.staggerIndex=l,n.operation=t,n.callback=r?c:null,i.move(n);e.config.animation.animateResizeContainer&&(e.dom.parent.style[p.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(f.removeClass(e.dom.container,e.config.layout.ContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t,e=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],i=!1,n=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(n=0;t=e[n];n++)if(0!==("undefined"!==(t=this.effectsIn[t]).value?t.value:t)){i=!0;break}return this.callFilters("resultHasEffect",i,arguments)},willTransition:function(t,e,i,n){var o=!1,o=!!f.isVisible(this.dom.container)&&(!!("none"!==t&&e||i.x!==n.x||i.y!==n.y)||!!this.config.animation.animateResizeTargets&&(i.width!==n.width||i.height!==n.height||i.marginRight!==n.marginRight||i.marginTop!==n.marginTop));return this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e,i,n=this,o=null,s=null,r=-1;for(n.callActions("beforeCleanUp",arguments),r=n.targetsMoved=n.targetsImmovable=n.targetsBound=n.targetsDone=0;o=t.show[r];r++)o.cleanUp(),o.show();for(r=0;o=t.toHide[r];r++)o.cleanUp(),o.hide();if(t.willSort&&n.printSort(!1,t),n.dom.parent.style[p.features.transitionProp]=n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=n.dom.parent.style[p.features.perspectiveProp]=n.dom.parent.style[p.features.perspectiveOriginProp]="",t.willChangeLayout&&(f.removeClass(n.dom.container,t.startContainerClassName),f.addClass(n.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;o=n.targets[r];r++)-1<t.toRemove.indexOf(o)&&((e=o.dom.el.previousSibling)&&"#text"===e.nodeName&&(s=o.dom.el.nextSibling)&&"#text"===s.nodeName&&f.removeWhitespace(e),t.willSort||n.dom.parent.removeChild(o.dom.el),n.targets.splice(r,1),o.isInDom=!1,r--);n.origOrder=n.targets}t.willSort&&(n.targets=t.newOrder),n.state=t.newState,n.lastOperation=t,n.dom.targets=n.state.targets,p.events.fire("mixEnd",n.dom.container,{state:n.state,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixEnd&&n.config.callbacks.onMixEnd.call(n.dom.container,n.state,n),t.hasFailed&&(p.events.fire("mixFail",n.dom.container,{state:n.state,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixFail&&n.config.callbacks.onMixFail.call(n.dom.container,n.state,n),f.addClass(n.dom.container,f.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed))),"function"==typeof n.userCallback&&n.userCallback.call(n.dom.container,n.state,n),"function"==typeof n.userDeferred.resolve&&n.userDeferred.resolve(n.state),n.userCallback=null,n.userDeferred=null,n.lastClicked=null,n.isToggling=!1,n.isBusy=!1,n.queue.length&&(n.callActions("beforeReadQueueCleanUp",arguments),i=n.queue.shift(),n.userDeferred=i.deferred,n.isToggling=i.isToggling,n.lastClicked=i.triggerElement,(i.instruction.command instanceof p.CommandMultimix?n.multimix:n.dataset).apply(n,i.args)),n.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e,i=this,n=new p.UserInstruction,o=-1;for(n.animate=i.config.animation.enable,n.command=new p.CommandMultimix,o=0;o<t.length;o++)null!==(e=t[o])&&("object"==typeof e?f.extend(n.command,e):"boolean"==typeof e?n.animate=e:"function"==typeof e&&(n.callback=e));return!n.command.insert||n.command.insert instanceof p.CommandInsert||(n.command.insert=i.parseInsertArgs([n.command.insert]).command),!n.command.remove||n.command.remove instanceof p.CommandRemove||(n.command.remove=i.parseRemoveArgs([n.command.remove]).command),!n.command.filter||n.command.filter instanceof p.CommandFilter||(n.command.filter=i.parseFilterArgs([n.command.filter]).command),!n.command.sort||n.command.sort instanceof p.CommandSort||(n.command.sort=i.parseSortArgs([n.command.sort]).command),!n.command.changeLayout||n.command.changeLayout instanceof p.CommandChangeLayout||(n.command.changeLayout=i.parseChangeLayoutArgs([n.command.changeLayout]).command),n=i.callFilters("instructionParseMultimixArgs",n,arguments),f.freeze(n),n},parseFilterArgs:function(t){var e,i=new p.UserInstruction,n=-1;for(i.animate=this.config.animation.enable,i.command=new p.CommandFilter,n=0;n<t.length;n++)"string"==typeof(e=t[n])?i.command.selector=e:null===e?i.command.collection=[]:"object"==typeof e&&f.isElement(e,this.dom.document)?i.command.collection=[e]:"object"==typeof e&&void 0!==e.length?i.command.collection=f.arrayFromList(e):"object"==typeof e?f.extend(i.command,e):"boolean"==typeof e?i.animate=e:"function"==typeof e&&(i.callback=e);if(i.command.selector&&i.command.collection)throw new Error(p.messages.errorFilterInvalidArguments());return i=this.callFilters("instructionParseFilterArgs",i,arguments),f.freeze(i),i},parseSortArgs:function(t){var e,i=new p.UserInstruction,n="",o=-1;for(i.animate=this.config.animation.enable,i.command=new p.CommandSort,o=0;o<t.length;o++)if(null!==(e=t[o]))switch(typeof e){case"string":n=e;break;case"object":e.length&&(i.command.collection=f.arrayFromList(e));break;case"boolean":i.animate=e;break;case"function":i.callback=e}return n&&(i.command=this.parseSortString(n,i.command)),i=this.callFilters("instructionParseSortArgs",i,arguments),f.freeze(i),i},parseInsertArgs:function(t){var e,i=new p.UserInstruction,n=-1;for(i.animate=this.config.animation.enable,i.command=new p.CommandInsert,n=0;n<t.length;n++)null!==(e=t[n])&&("number"==typeof e?i.command.index=e:"string"==typeof e&&-1<["before","after"].indexOf(e)?i.command.position=e:"string"==typeof e?i.command.collection=f.arrayFromList(f.createElement(e).childNodes):"object"==typeof e&&f.isElement(e,this.dom.document)?i.command.collection.length?i.command.sibling=e:i.command.collection=[e]:"object"==typeof e&&e.length?i.command.collection.length?i.command.sibling=e[0]:i.command.collection=e:"object"==typeof e&&e.childNodes&&e.childNodes.length?i.command.collection.length?i.command.sibling=e.childNodes[0]:i.command.collection=f.arrayFromList(e.childNodes):"object"==typeof e?f.extend(i.command,e):"boolean"==typeof e?i.animate=e:"function"==typeof e&&(i.callback=e));if(i.command.index&&i.command.sibling)throw new Error(p.messages.errorInsertInvalidArguments());return!i.command.collection.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningInsertNoElements()),i=this.callFilters("instructionParseInsertArgs",i,arguments),f.freeze(i),i},parseRemoveArgs:function(t){var e,i,n=this,o=new p.UserInstruction,s=-1;for(o.animate=n.config.animation.enable,o.command=new p.CommandRemove,s=0;s<t.length;s++)if(null!==(i=t[s]))switch(typeof i){case"number":n.targets[i]&&(o.command.targets[0]=n.targets[i]);break;case"string":o.command.collection=f.arrayFromList(n.dom.parent.querySelectorAll(i));break;case"object":i&&i.length?o.command.collection=i:f.isElement(i,n.dom.document)?o.command.collection=[i]:f.extend(o.command,i);break;case"boolean":o.animate=i;break;case"function":o.callback=i}if(o.command.collection.length)for(s=0;e=n.targets[s];s++)-1<o.command.collection.indexOf(e.dom.el)&&o.command.targets.push(e);return!o.command.targets.length&&n.config.debug.showWarnings&&console.warn(p.messages.warningRemoveNoElements()),f.freeze(o),o},parseDatasetArgs:function(t){var e,i=new p.UserInstruction,n=-1;for(i.animate=this.config.animation.enable,i.command=new p.CommandDataset,n=0;n<t.length;n++)if(null!==(e=t[n]))switch(typeof e){case"object":Array.isArray(e)||"number"==typeof e.length?i.command.dataset=e:f.extend(i.command,e);break;case"boolean":i.animate=e;break;case"function":i.callback=e}return f.freeze(i),i},parseChangeLayoutArgs:function(t){var e,i=new p.UserInstruction,n=-1;for(i.animate=this.config.animation.enable,i.command=new p.CommandChangeLayout,n=0;n<t.length;n++)if(null!==(e=t[n]))switch(typeof e){case"string":i.command.containerClassName=e;break;case"object":f.extend(i.command,e);break;case"boolean":i.animate=e;break;case"function":i.callback=e}return f.freeze(i),i},queueMix:function(t){var e,i=this,n=null;return i.callActions("beforeQueueMix",arguments),n=f.defer(p.libraries),i.config.animation.queue&&i.queue.length<i.config.animation.queueLimit?(t.deferred=n,i.queue.push(t),i.config.controls.enable&&(i.isToggling?(i.buildToggleArray(t.instruction.command),e=i.getToggleSelector(),i.updateControls({filter:{selector:e}})):i.updateControls(t.instruction.command))):(i.config.debug.showWarnings&&console.warn(p.messages.warningMultimixInstanceQueueFull()),n.resolve(i.state),p.events.fire("mixBusy",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixBusy&&i.config.callbacks.onMixBusy.call(i.dom.container,i.state,i)),i.callFilters("promiseQueueMix",n.promise,arguments)},getDataOperation:function(t){var e=this,i=new p.Operation,n=[],i=e.callFilters("operationUnmappedGetDataOperation",i,arguments);if(e.dom.targets.length&&!(n=e.state.activeDataset||[]).length)throw new Error(p.messages.errorDatasetNotSet());return i.id=f.randomHex(),i.startState=e.state,i.startDataset=n,i.newDataset=t.slice(),e.diffDatasets(i),i.startOrder=e.targets,i.newOrder=i.show,e.config.animation.enable&&(e.getStartMixData(i),e.setInter(i),i.docState=f.getDocumentState(e.dom.document),e.getInterMixData(i),e.setFinal(i),e.getFinalMixData(i),e.parseEffects(),i.hasEffect=e.hasEffect(),e.getTweenData(i)),e.targets=i.show.slice(),i.newState=e.buildState(i),Array.prototype.push.apply(e.targets,i.toRemove),i=e.callFilters("operationMappedGetDataOperation",i,arguments)},diffDatasets:function(t){var e=this,i=[],n=[],o=[],s=null,r=null,a=null,l=null,c=null,d={},u="",h=-1;for(e.callActions("beforeDiffDatasets",arguments),h=0;s=t.newDataset[h];h++){if(void 0===(u=s[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(d[u])throw new Error(p.messages.errorDatasetDuplicateUid({uid:u}));d[u]=!0,(r=e.cache[u])instanceof p.Target?(e.config.data.dirtyCheck&&!f.deepEquals(s,r.data)&&(a=r.render(s),r.data=s,a!==r.dom.el&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(a,r.dom.el)),r.isShown||(a.style.display="none"),r.dom.el=a,r.isInDom&&r.bindEvents())),a=r.dom.el):((r=new p.Target).init(null,e,s),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,n.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),o.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),h=0;s=t.startDataset[h];h++)u=s[e.config.data.uidKey],r=e.cache[u],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):i.push(u);f.isEqualArray(i,n)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,i){var n=e?f.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);i.length;)this.targets.splice(n,0,i.shift()),n++},willSort:function(t,e){var i=!1,i=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next);return this.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t=this,e=t.parseFilterArgs(arguments),i=e.command.selector;return t.isToggling=!0,t.toggleArray.indexOf(i)<0&&t.toggleArray.push(i),i=t.getToggleSelector(),t.multimix({filter:i},e.animate,e.callback)},toggleOff:function(){var t=this,e=t.parseFilterArgs(arguments),i=e.command.selector,i=t.toggleArray.indexOf(i);return t.isToggling=!0,-1<i&&t.toggleArray.splice(i,1),i=t.getToggleSelector(),t.multimix({filter:i},e.animate,e.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),i=null;return t.callActions("beforeDataset",arguments),t.isBusy?((i=new p.QueueItem).args=arguments,i.instruction=e,t.queueMix(i)):(e.callback&&(t.userCallback=e.callback),i=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,e=t.getDataOperation(e.command.dataset),t.goMix(i,e))},multimix:function(){var t=this,e=null,i=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((e=new p.QueueItem).args=arguments,e.instruction=i,e.triggerElement=t.lastClicked,e.isToggling=t.isToggling,t.queueMix(e)):(e=t.getOperation(i.command),t.config.controls.enable&&(i.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),i.callback&&(t.userCallback=i.callback),i=i.animate^t.config.animation.enable?i.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(i,e))},getOperation:function(t){var e=this,i=t.sort,n=t.filter,o=t.changeLayout,s=t.remove,r=t.insert,a=new p.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=f.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(p.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,a),s&&(a.toRemove=s.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,i&&(a.startSort=a.startState.activeSort,a.newSort=i,a.willSort=e.willSort(i,a.startState.activeSort),a.willSort&&e.sortOperation(a)),a.startFilter=a.startState.activeFilter,a.newFilter=n||f.extend(new p.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=f.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var i,n=null,o=null,s=-1;for(e=Math.min(e,1),e=Math.max(e,0),s=0;n=t.show[s];s++)o=t.showPosData[s],n.applyTween(o,e);for(s=0;n=t.hide[s];s++)n.isShown&&n.hide(),-1<(i=t.toHide.indexOf(n))&&(o=t.toHidePosData[i],n.isShown||n.show(),n.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null,e=t?f.getProperty(this.config,t):this.config;return this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),f.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t=new p.State;return f.extend(t,this.state),f.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,i=null,n="";for(n in t.cache)(i=(e=t.cache[n]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(i,e.dom.el)),e.isShown||(i.style.display="none"),e.dom.el=i,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,i=null,n=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;i=e.controls[o];o++)i.removeBinding(e);for(o=0;n=e.targets[o];o++)t&&n.show(),n.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete p.instances[e.id],e.callActions("afterDestroy",arguments)}}),p.BaseStatic.call(p.IMoveData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),f.seal(this)}),p.IMoveData.prototype=Object.create(p.Base.prototype),p.IMoveData.prototype.constructor=p.IMoveData,p.BaseStatic.call(p.TargetDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),f.seal(this)}),p.TargetDom.prototype=Object.create(p.Base.prototype),p.TargetDom.prototype.constructor=p.TargetDom,p.BaseStatic.call(p.Target=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new p.TargetDom,this.callActions("afterConstruct"),f.seal(this)}),p.Target.prototype=Object.create(p.Base.prototype),f.extend(p.Target.prototype,{constructor:p.Target,init:function(t,e,i){var n=this,o="";if(n.callActions("beforeInit",arguments),n.mixer=e,t=t||n.render(i),n.cacheDom(t),n.bindEvents(),"none"!==n.dom.el.style.display&&(n.isShown=!0),i&&e.config.data.uidKey){if(void 0===(o=i[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));n.id=o,n.data=i,e.cache[o]=n}n.callActions("afterInit",arguments)},render:function(t){var e=null,i=null,n=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(e=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(p.messages.errorDatasetRendererNotSet());return(e=e(t))&&"object"==typeof e&&f.isElement(e)?i=e:"string"==typeof e&&((n=document.createElement("div")).innerHTML=e,i=n.firstElementChild),this.callFilters("elRender",i,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){t=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),t=isNaN(+t)?t.toLowerCase():+t,this.sortString=t,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var i,n,o=this,s=t.posIn,r=[],a=new p.StyleData,l=-1;for(o.callActions("beforeApplyTween",arguments),a.x=s.x,a.y=s.y,0===e?o.hide():o.isShown||o.show(),l=0;i=p.features.TWEENABLE[l];l++)n=t.tweenData[i],"x"===i?n&&(a.x=s.x+n*e):"y"===i?n&&(a.y=s.y+n*e):n instanceof p.TransformData?n.value&&(a[i].value=s[i].value+n.value*e,a[i].unit=n.unit,r.push(i+"("+a[i].value+n.unit+")")):n&&(a[i]=s[i]+n*e,o.dom.el.style[i]=a[i]);(a.x||a.y)&&r.unshift("translate("+a.x+"px, "+a.y+"px)"),r.length&&(o.dom.el.style[p.features.transformProp]=r.join(" ")),o.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,i=t.posIn,n=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+i.x+"px, "+i.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=i.width+"px",e.dom.el.style.height=i.height+"px"),e.dom.el.style.marginRight=i.marginRight+"px",e.dom.el.style.marginBottom=i.marginBottom+"px"),n&&(e.dom.el.style.opacity=i.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[p.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,i=[],n=[],o=e.mixer.config.animation.animateResizeTargets,s=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),i.push(e.writeTransitionRule(p.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&i.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(i.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),t.callback){switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(i),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||n.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":s&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),n=n.concat(e.mixer.transformOut);break;case"show":s&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&n.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[p.features.transformProp]=n.join(" "),e.callActions("afterApplyStylesOut",arguments)}else e.mixer.targetsImmovable++,e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation)},writeTransitionRule:function(t,e,i){e=this.getDelay(e),i=t+" "+(0<i?i:this.mixer.config.animation.duration)+"ms "+e+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing);return this.callFilters("ruleWriteTransitionRule",i,arguments)},getDelay:function(t){var e=this;return"function"==typeof e.mixer.config.animation.staggerSequence&&(t=e.mixer.config.animation.staggerSequence.call(e,t,e.state)),t=e.mixer.staggerDuration?t*e.mixer.staggerDuration:0,e.callFilters("delayGetDelay",t,arguments)},applyTransition:function(t){t=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[p.features.transitionProp]=t,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,i=t.propertyName,n=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<i.indexOf("transform")||-1<i.indexOf("opacity")||n&&-1<i.indexOf("height")||n&&-1<i.indexOf("width")||n&&-1<i.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),f.off(t.dom.el,"webkitTransitionEnd",t.handler),f.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===p.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},f.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,i=new p.StyleData;return e.callActions("beforeGetPosData",arguments),i.x=e.dom.el.offsetLeft,i.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(t=e.dom.el.getBoundingClientRect(),i.top=t.top,i.right=t.right,i.bottom=t.bottom,i.left=t.left,i.width=t.width,i.height=t.height),e.mixer.config.animation.animateResizeTargets&&(t=h.getComputedStyle(e.dom.el),i.marginBottom=parseFloat(t.marginBottom),i.marginRight=parseFloat(t.marginRight)),e.callFilters("posDataGetPosData",i,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[p.features.transformProp]="",t.dom.el.style[p.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),p.BaseStatic.call(p.Collection=function(t){var e,i=-1;for(this.callActions("beforeConstruct"),i=0;e=t[i];i++)this[i]=e;this.length=t.length,this.callActions("afterConstruct"),f.freeze(this)}),p.Collection.prototype=Object.create(p.Base.prototype),f.extend(p.Collection.prototype,{constructor:p.Collection,mixitup:function(t){var e=null,i=Array.prototype.slice.call(arguments),n=[],o=-1;for(this.callActions("beforeMixitup"),i.shift(),o=0;e=this[o];o++)n.push(e[t].apply(e,i));return this.callFilters("promiseMixitup",f.all(n,p.libraries),arguments)}}),p.BaseStatic.call(p.Operation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),f.seal(this)}),p.Operation.prototype=Object.create(p.Base.prototype),p.Operation.prototype.constructor=p.Operation,p.BaseStatic.call(p.State=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),f.seal(this)}),p.State.prototype=Object.create(p.Base.prototype),p.State.prototype.constructor=p.State,p.BaseStatic.call(p.UserInstruction=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),f.seal(this)}),p.UserInstruction.prototype=Object.create(p.Base.prototype),p.UserInstruction.prototype.constructor=p.UserInstruction,p.BaseStatic.call(p.Messages=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),f.seal(this)}),p.Messages.prototype=Object.create(p.Base.prototype),p.Messages.prototype.constructor=p.Messages,p.Messages.prototype.compileTemplates=function(){var t,e="";for(e in this)"string"==typeof(t=this[e])&&(this[f.camelCase(e)]=f.template(t))},p.messages=new p.Messages,p.BaseStatic.call(p.Facade=function(t){p.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),f.freeze(this),f.seal(this)}),p.Facade.prototype=Object.create(p.Base.prototype),p.Facade.prototype.constructor=p.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=p:"function"==typeof define&&define.amd?define(function(){return p}):void 0!==h.mixitup&&"function"==typeof h.mixitup||(h.mixitup=p),p.BaseStatic.call(p.constructor),p.NAME="mixitup",p.CORE_VERSION="3.3.1"}(window),function(l,r,f,g){"use strict";var o,s,a,d,e,c,h,u,n,t,i,p,m;function v(t,e){var i,n,o,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},i=(e=t&&t.data?u(t.data.options,e):e).$target||f(t.currentTarget).trigger("blur"),(o=f.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(i)||(s=e.selector?f(e.selector):(n=i.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+n+'"]'):f('[data-fancybox="'+n+'"]'):[i],r=f(s).index(i),(o=f.fancybox.open(s,e,r=r<0?0:r)).$trigger=i))}l.console=l.console||{info:function(t){}},f&&(f.fn.fancybox?console.info("fancyBox already initialized"):(t={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:f.noop,beforeLoad:f.noop,afterLoad:f.noop,beforeShow:f.noop,afterShow:f.noop,beforeClose:f.noop,afterClose:f.noop,onActivate:f.noop,onDeactivate:f.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},o=f(l),s=f(r),a=0,d=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},e=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},c=function(){var t,e=r.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(e.style[t]!==g)return i[t];return"transitionend"}(),h=function(t){return t&&t.length&&t[0].offsetHeight},u=function(t,e){var i=f.extend(!0,{},t,e);return f.each(e,function(t,e){f.isArray(e)&&(i[t]=e)}),i},f.extend((n=function(t,e,i){var n=this;n.opts=u({index:i},f.fancybox.defaults),f.isPlainObject(e)&&(n.opts=u(n.opts,e)),f.fancybox.isMobile&&(n.opts=u(n.opts,n.opts.mobile)),n.id=n.opts.id||++a,n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=!0,n.group=[],n.slides={},n.addContent(t),n.group.length&&n.init()}).prototype,{init:function(){var e,i,n=this,o=n.group[n.currIndex].opts;o.closeExisting&&f.fancybox.close(!0),f("body").addClass("fancybox-active"),!f.fancybox.getInstance()&&!1!==o.hideScrollbar&&!f.fancybox.isMobile&&r.body.scrollHeight>l.innerHeight&&(f("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-r.documentElement.clientWidth)+"px;}</style>"),f("body").addClass("compensate-for-scrollbar")),i="",f.each(o.buttons,function(t,e){i+=o.btnTpl[e]||""}),e=f(n.translate(n,o.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+n.id).addClass(o.baseClass).data("FancyBox",n).appendTo(o.parentEl),n.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){n.$refs[t]=e.find(".fancybox-"+t)}),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(t,e){var i=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return i[e]===g?t:i[e]})},addContent:function(t){var r=this,t=f.makeArray(t);f.each(t,function(t,e){var i,n,o={},s={};f.isPlainObject(e)?s=(o=e).opts||e:"object"===f.type(e)&&f(e).length?(s=(i=f(e)).data()||{},(s=f.extend(!0,{},s,s.options)).$orig=i,o.src=r.opts.src||s.src||i.attr("href"),o.type||o.src||(o.type="inline",o.src=e)):o={type:"html",src:e+""},o.opts=f.extend(!0,{},r.opts,s),f.isArray(s.buttons)&&(o.opts.buttons=s.buttons),f.fancybox.isMobile&&o.opts.mobile&&(o.opts=u(o.opts,o.opts.mobile)),i=o.type||o.opts.type,s=o.src||"",!i&&s&&((n=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(i="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===n[1]?"ogg":n[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?i="image":s.match(/\.(pdf)((\?|#).*)?$/i)?o=f.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!(i="iframe")}}}):"#"===s.charAt(0)&&(i="inline")),i?o.type=i:r.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<f.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=r.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<f.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===r.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length&&(o.opts.$orig=o.opts.$trigger)),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===f.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(e,[r,o])),"function"===f.type(r.opts.caption)&&(o.opts.caption=r.opts.caption.apply(e,[r,o])),o.opts.caption instanceof f||(o.opts.caption=o.opts.caption===g?"":o.opts.caption+""),"ajax"===o.type&&1<(n=s.split(/\s+/,2)).length&&(o.src=n.shift(),o.opts.filter=n.shift()),o.opts.modal&&(o.opts=f.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),r.group.push(o)}),Object.keys(r.slides).length&&(r.updateControls(),(t=r.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),n.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),n.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),n.next()}).on("click.fb","[data-fancybox-zoom]",function(t){n[n.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(n.requestId&&e(n.requestId),n.requestId=d(function(){n.update(t)})):(n.current&&"iframe"===n.current.type&&n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update(t)},f.fancybox.isMobile?600:250))}),s.on("keydown.fb",function(t){var e=(f.fancybox?f.fancybox.getInstance():null).current,i=t.keyCode||t.which;9==i?e.opts.trapFocus&&n.focus(t):!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||f(t.target).is("input,textarea,video,audio,select")||(8===i||27===i?(t.preventDefault(),n.close(t)):37===i||38===i?(t.preventDefault(),n.previous()):39===i||40===i?(t.preventDefault(),n.next()):n.trigger("afterKeydown",t,i))}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=l.setInterval(function(){n.idleSecondsCounter++,n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&!n.isDragging&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),s.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,n){var e,i,o,s,r,a,l,c,d=this,u=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(t=parseInt(t,10),!(i=(d.current||d).opts.loop)&&(t<0||u<=t))return!1;e=d.firstRun=!Object.keys(d.slides).length,s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,o=d.createSlide(t),1<u&&((i||o.index<u-1)&&d.createSlide(t+1),(i||0<o.index)&&d.createSlide(t-1)),d.current=o,d.currIndex=o.index,d.currPos=o.pos,d.trigger("beforeShow",e),d.updateControls(),o.forcedDuration=g,f.isNumeric(n)?o.forcedDuration=n:n=o.opts[e?"animationDuration":"transitionDuration"],n=parseInt(n,10),u=d.isMoved(o),o.$slide.addClass("fancybox-slide--current"),e?(o.opts.animationEffect&&n&&d.$refs.container.css("transition-duration",n+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(o)):(r=f.fancybox.getTranslate(s.$slide),a=f.fancybox.getTranslate(d.$refs.stage),f.each(d.slides,function(t,e){f.fancybox.stop(e.$slide,!0)}),s.pos!==o.pos&&(s.isComplete=!1),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),u?(c=r.left-(s.pos*r.width+s.pos*s.opts.gutter),f.each(d.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=e.pos*r.width+e.pos*e.opts.gutter;f.fancybox.setTranslate(e.$slide,{top:0,left:i-a.left+c}),e.pos!==o.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>o.pos?"next":"previous")),h(e.$slide),f.fancybox.animate(e.$slide,{top:0,left:(e.pos-o.pos)*r.width+(e.pos-o.pos)*e.opts.gutter},n,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===d.currPos&&d.complete()})})):n&&o.opts.transitionEffect&&(l="fancybox-animated fancybox-fx-"+o.opts.transitionEffect,s.$slide.addClass("fancybox-slide--"+(s.pos>o.pos?"next":"previous")),f.fancybox.animate(s.$slide,l,n,function(){s.$slide.removeClass(l).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),o.isLoaded?d.revealContent(o):d.loadSlide(o)),d.preload("image")}},createSlide:function(t){var e,i=this,n=t%i.group.length;return n=n<0?i.group.length+n:n,!i.slides[t]&&i.group[n]&&(e=f('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[t]=f.extend(!0,{},i.group[n],{pos:t,$slide:e,isLoaded:!1}),i.updateSlide(i.slides[t])),i.slides[t]},scaleToActual:function(t,e,i){var n,o,s,r,a=this,l=a.current,c=l.$content,d=f.fancybox.getTranslate(l.$slide).width,u=f.fancybox.getTranslate(l.$slide).height,h=l.width,p=l.height;a.isAnimating||a.isMoved()||!c||"image"!=l.type||!l.isLoaded||l.hasError||(a.isAnimating=!0,f.fancybox.stop(c),t=t===g?.5*d:t,e=e===g?.5*u:e,(n=f.fancybox.getTranslate(c)).top-=f.fancybox.getTranslate(l.$slide).top,n.left-=f.fancybox.getTranslate(l.$slide).left,l=h/n.width,r=p/n.height,o=.5*d-.5*h,s=.5*u-.5*p,d<h&&(o=0<(o=n.left*l-(t*l-t))?0:o)<d-h&&(o=d-h),u<p&&(s=0<(s=n.top*r-(e*r-e))?0:s)<u-p&&(s=u-p),a.updateCursor(h,p),f.fancybox.animate(c,{top:s,left:o,scaleX:l,scaleY:r},i||366,function(){a.isAnimating=!1}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop())},scaleToFit:function(t){var e=this,i=e.current,n=i.$content;e.isAnimating||e.isMoved()||!n||"image"!=i.type||!i.isLoaded||i.hasError||(e.isAnimating=!0,f.fancybox.stop(n),i=e.getFitPos(i),e.updateCursor(i.width,i.height),f.fancybox.animate(n,{top:i.top,left:i.left,scaleX:i.width/n.width(),scaleY:i.height/n.height()},t||366,function(){e.isAnimating=!1}))},getFitPos:function(t){var e,i,n=t.$content,o=t.$slide,s=t.width||t.opts.width,r=t.height||t.opts.height,a={};return!!(t.isLoaded&&n&&n.length)&&(e=f.fancybox.getTranslate(this.$refs.stage).width,i=f.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(o.css("paddingLeft"))+parseFloat(o.css("paddingRight"))+parseFloat(n.css("marginLeft"))+parseFloat(n.css("marginRight")),i-=parseFloat(o.css("paddingTop"))+parseFloat(o.css("paddingBottom"))+parseFloat(n.css("marginTop"))+parseFloat(n.css("marginBottom")),s&&r||(s=e,r=i),e-.5<(s*=n=Math.min(1,e/s,i/r))&&(s=e),i-.5<(r*=n)&&(r=i),"image"===t.type?(a.top=Math.floor(.5*(i-r))+parseFloat(o.css("paddingTop")),a.left=Math.floor(.5*(e-s))+parseFloat(o.css("paddingLeft"))):"video"===t.contentType&&(s/(n=t.opts.width&&t.opts.height?s/r:t.opts.ratio||16/9)<r?r=s/n:r*n<s&&(s=r*n)),a.width=s,a.height=r,a)},update:function(i){var n=this;f.each(n.slides,function(t,e){n.updateSlide(e,i)})},updateSlide:function(t,e){var i=this,n=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;i.adjustCaption(t),n&&(o||s||"video"===t.contentType)&&!t.hasError&&(f.fancybox.stop(n),f.fancybox.setTranslate(n,i.getFitPos(t)),t.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),i.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,n=i.$slide;!e.isClosing&&i&&(n.siblings().css({transform:"",opacity:""}),n.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),f.fancybox.animate(n,{top:0,left:0,opacity:1},t===g?0:t,function(){n.css({transform:"",opacity:""}),i.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,t=t||this.current;return!!t&&(i=f.fancybox.getTranslate(this.$refs.stage),e=f.fancybox.getTranslate(t.$slide),!t.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-i.top)||.5<Math.abs(e.left-i.left)))},updateCursor:function(t,e){var i=this,n=i.current,o=i.$refs.container;n&&!i.isClosing&&i.Guestures&&(o.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),e=!!(t=i.canPan(t,e))||i.isZoomable(),o.toggleClass("fancybox-is-zoomable",e),f("[data-fancybox-zoom]").prop("disabled",!e),t?o.addClass("fancybox-can-pan"):e&&("zoom"===n.opts.clickContent||f.isFunction(n.opts.clickContent)&&"zoom"==n.opts.clickContent(n))?o.addClass("fancybox-can-zoomIn"):n.opts.touch&&(n.opts.touch.vertical||1<i.group.length)&&"video"!==n.contentType&&o.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,n=this.current,o=n.$content;return t!==g&&e!==g?i=t<n.width&&e<n.height:o&&(i=(i=f.fancybox.getTranslate(o)).width<n.width&&i.height<n.height),i},canPan:function(t,e){var i=this.current,n=null,o=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(o=this.getFitPos(i),t!==g&&e!==g?n={width:t,height:e}:i.isComplete&&(n=f.fancybox.getTranslate(i.$content)),n&&o&&(o=1.5<Math.abs(n.width-o.width)||1.5<Math.abs(n.height-o.height))),o},loadSlide:function(i){var t,e,n,o=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===o.trigger("beforeLoad",i))return i.isLoading=!1;switch(t=i.type,(e=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),t){case"image":o.setImage(i);break;case"iframe":o.setIframe(i);break;case"html":o.setContent(i,i.src||i.content);break;case"video":o.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":f(i.src).length?o.setContent(i,f(i.src)):o.setError(i);break;case"ajax":o.showLoading(i),n=f.ajax(f.extend({},i.opts.ajax.settings,{url:i.src,success:function(t,e){"success"===e&&o.setContent(i,t)},error:function(t,e){t&&"abort"!==e&&o.setError(i)}})),e.one("onReset",function(){n.abort()});break;default:o.setError(i)}return!0}},setImage:function(e){var t,i=this;setTimeout(function(){var t=e.$image;i.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||i.showLoading(e)},50),i.checkSrcset(e),e.$content=f('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=r.createElement("img")).onerror=function(){f(this).remove(),e.$ghost=null},t.onload=function(){i.afterLoad(e)},e.$ghost=f(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),i.setBigImage(e)},checkSrcset:function(t){var e,i,n,o,s=t.opts.srcset||t.opts.image.srcset;if(s){n=l.devicePixelRatio||1,o=l.innerWidth*n,(i=s.split(",").map(function(t){var n={};return t.trim().split(/\s+/).forEach(function(t,e){var i=parseInt(t.substring(0,t.length-1),10);if(0===e)return n.url=t;i&&(n.value=i,n.postfix=t[t.length-1])}),n})).sort(function(t,e){return t.value-e.value});for(var r=0;r<i.length;r++){var a=i[r];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=n){e=a;break}}(e=!e&&i.length?i[i.length-1]:e)&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var i=this,t=r.createElement("img"),n=f(t);e.$image=n.one("error",function(){i.setError(e)}).one("load",function(){var t;e.$ghost||(i.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),i.afterLoad(e)),i.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<o.width()/o.height()?"100":Math.round(e.width/e.height*100))+"vw"),n.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!i.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),i.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&n.naturalWidth&&n.naturalHeight?n.trigger("load"):t.error&&n.trigger("error")},resolveImageSlideSize:function(t,e,i){var n=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=i,0<n&&(t.width=n,t.height=Math.floor(n*i/e)),0<o&&(t.width=Math.floor(o*e/i),t.height=o)},setIframe:function(o){var s,e=this,r=o.opts.iframe,a=o.$slide;o.$content=f('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=s=f(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(o.$content),r.preload?(e.showLoading(o),s.on("load.fb error.fb",function(t){this.isReady=1,o.$slide.trigger("refresh"),e.afterLoad(o)}),a.on("refresh.fb",function(){var t,e=o.$content,i=r.css.width,n=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),i===g&&(i=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",i||"").css("max-width",""),n===g&&(n=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",n||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(o),s.attr("src",o.src),a.one("onReset",function(){try{f(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}f(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&f.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof f&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=f("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===f.type(e)&&(e=f("<div>").append(f.trim(e)).contents()),t.opts.filter&&(e=f("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){f(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(f(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),f(e).appendTo(t.$slide),f(e).is("video,audio")&&(f(e).addClass("fancybox-video"),f(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||f(e).attr("width"),t.opts.height=t.opts.height||f(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=f(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=f(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&f('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e=this,t=t||e.current,i=t.opts.caption,n=t.opts.preventCaptionOverlap,o=e.$refs.caption,s=!1;o.toggleClass("fancybox-caption--separate",n),n&&i&&i.length&&(t.pos!==e.currPos?((n=o.clone().appendTo(o.parent())).children().eq(0).empty().html(i),s=n.outerHeight(!0),n.empty().remove()):e.$caption&&(s=e.$caption.outerHeight(!0)),t.$slide.css("padding-bottom",s||""))},adjustLayout:function(t){var e,i,n,o,t=t||this.current;t.isLoaded&&!0!==t.opts.disableLayoutFix&&(t.$content.css("margin-bottom",""),t.$content.outerHeight()>t.$slide.height()+.5&&(n=t.$slide[0].style["padding-bottom"],o=t.$slide.css("padding-bottom"),0<parseFloat(o)&&(e=t.$slide[0].scrollHeight,t.$slide.css("padding-bottom",0),Math.abs(e-t.$slide[0].scrollHeight)<1&&(i=o),t.$slide.css("padding-bottom",n))),t.$content.css("margin-bottom",i))},revealContent:function(t){var e,i,n,o,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),d=t.isRevealed;t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],n=t.opts[s.firstRun?"animationDuration":"transitionDuration"],n=parseInt(t.forcedDuration===g?n:t.forcedDuration,10),"zoom"===(e=!c&&t.pos===s.currPos&&n?e:!1)&&(t.pos===s.currPos&&n&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,(o="auto"==(o=t.opts.zoomOpacity)?.1<Math.abs(t.width/t.height-l.width/l.height):o)&&(l.opacity=.1,a.opacity=1),f.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),h(t.$content),f.fancybox.animate(t.$content,a,n,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(f.fancybox.stop(r),i="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),h(r),"image"!==t.type&&t.$content.hide().show(0),f.fancybox.animate(r,"fancybox-slide--current",n,function(){r.removeClass(i).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),t.pos===s.currPos&&s.complete()))},getThumbPos:function(t){var e,i,n,o,t=t.$thumb;return!!(t&&(n=t[0])&&n.ownerDocument===r&&(f(".fancybox-container").css("pointer-events","none"),o={x:n.getBoundingClientRect().left+n.offsetWidth/2,y:n.getBoundingClientRect().top+n.offsetHeight/2},o=r.elementFromPoint(o.x,o.y)===n,f(".fancybox-container").css("pointer-events",""),o))&&(n=f.fancybox.getTranslate(t),o=parseFloat(t.css("border-top-width")||0),e=parseFloat(t.css("border-right-width")||0),i=parseFloat(t.css("border-bottom-width")||0),t=parseFloat(t.css("border-left-width")||0),e={top:n.top+o,left:n.left+t,width:n.width-e-t,height:n.height-o-i,scaleX:1,scaleY:1},0<n.width&&0<n.height&&e)},complete:function(){var t,i=this,e=i.current,n={};!i.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),i.preload("inline"),h(e.$slide),e.$slide.addClass("fancybox-slide--complete"),f.each(i.slides,function(t,e){e.pos>=i.currPos-1&&e.pos<=i.currPos+1?n[e.pos]=e:e&&(f.fancybox.stop(e.$slide),e.$slide.off().remove())}),i.slides=n),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):i.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,i,n=this;n.group.length<2||(i=n.slides[n.currPos+1],(e=n.slides[n.currPos-1])&&e.type===t&&n.loadSlide(e),i&&i.type===t&&n.loadSlide(i))},focus:function(t,e){var i=this,n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");i.isClosing||((e=(e=!t&&i.current&&i.current.isComplete?i.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):i.$refs.container.find("*:visible")).filter(n).filter(function(){return"hidden"!==f(this).css("visibility")&&!f(this).hasClass("disabled")})).length?(n=e.index(r.activeElement),t&&t.shiftKey?(n<0||0==n)&&(t.preventDefault(),e.eq(e.length-1).trigger("focus")):(n<0||n==e.length-1)&&(t&&t.preventDefault(),e.eq(0).trigger("focus"))):i.$refs.container.trigger("focus"))},activate:function(){var e=this;f(".fancybox-container").each(function(){var t=f(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function i(){l.cleanUp(t)}var n,o,s,r,a,l=this,c=l.current;return!l.isClosing&&(!(l.isClosing=!0)===l.trigger("beforeClose",t)?(l.isClosing=!1,d(function(){l.update()}),!1):(l.removeEvents(),o=c.$content,n=c.opts.animationEffect,e=f.isNumeric(e)?e:n?c.opts.animationDuration:0,c.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?f.fancybox.stop(c.$slide):n=!1,c.$slide.siblings().trigger("onReset").remove(),e&&l.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",e+"ms"),l.hideLoading(c),l.hideControls(!0),l.updateCursor(),"zoom"===(n="zoom"!==n||o&&e&&"image"===c.type&&!l.isMoved()&&!c.hasError&&(a=l.getThumbPos(c))?n:"fade")?(f.fancybox.stop(o),r={top:(r=f.fancybox.getTranslate(o)).top,left:r.left,scaleX:r.width/a.width,scaleY:r.height/a.height,width:a.width,height:a.height},(s="auto"==(s=c.opts.zoomOpacity)?.1<Math.abs(c.width/c.height-a.width/a.height):s)&&(a.opacity=0),f.fancybox.setTranslate(o,r),h(o),f.fancybox.animate(o,a,e,i)):n&&e?f.fancybox.animate(c.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+n,e,i):!0===t?setTimeout(i,e):i(),!0))},cleanUp:function(t){var e,i=this,n=i.current.opts.$orig;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",t),i.current.opts.backFocus&&(n=n&&n.length&&n.is(":visible")?n:i.$trigger)&&n.length&&(t=l.scrollX,e=l.scrollY,n.trigger("focus"),f("html, body").scrollTop(e).scrollLeft(t)),i.current=null,(n=f.fancybox.getInstance())?n.activate():(f("body").removeClass("fancybox-active compensate-for-scrollbar"),f("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,n=Array.prototype.slice.call(arguments,1),o=this,e=e&&e.opts?e:o.current;if(e?n.unshift(e):e=o,n.unshift(o),!1===(i=f.isFunction(e.opts[t])?e.opts[t].apply(e,n):i))return i;("afterClose"!==t&&o.$refs?o.$refs.container:s).trigger(t+".fb",n)},updateControls:function(){var t=this,e=t.current,i=e.index,n=t.$refs.container,o=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=o).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),n.find("[data-fancybox-count]").html(t.group.length),n.find("[data-fancybox-index]").html(i+1),n.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&i<=0),n.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&i>=t.group.length-1),"image"===e.type?n.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&n.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),f(r.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=(t.current||t).opts,i=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,i.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<t.group.length)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&1<t.group.length)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),f.fancybox={version:"3.5.7",defaults:t,getInstance:function(t){var e=f('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof n&&("string"===f.type(t)?e[t].apply(e,i):"function"===f.type(t)&&t.apply(e,i),e)},open:function(t,e,i){return new n(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),s.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=r.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(r.documentMode&&r.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var i="",n={};if(t&&e)return e.left===g&&e.top===g||(i=(e.left===g?t.position():e).left+"px, "+(e.top===g?t.position():e).top+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),e.scaleX!==g&&e.scaleY!==g?i+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==g&&(i+=" scaleX("+e.scaleX+")"),i.length&&(n.transform=i),e.opacity!==g&&(n.opacity=e.opacity),e.width!==g&&(n.width=e.width),e.height!==g&&(n.height=e.height),t.css(n)},animate:function(e,i,n,o,s){var r,a=this;f.isFunction(n)&&(o=n,n=null),a.stop(e),r=a.getTranslate(e),e.on(c,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(a.stop(e),f.isNumeric(n)&&e.css("transition-duration",""),f.isPlainObject(i)?i.scaleX!==g&&i.scaleY!==g&&a.setTranslate(e,{top:i.top,left:i.left,width:r.width*i.scaleX,height:r.height*i.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(i),f.isFunction(o)&&o(t))}),f.isNumeric(n)&&e.css("transition-duration",n+"ms"),f.isPlainObject(i)?(i.scaleX!==g&&i.scaleY!==g&&(delete i.width,delete i.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),f.fancybox.setTranslate(e,i)):e.addClass(i),e.data("timer",setTimeout(function(){e.trigger(c)},n+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(c),t.off(c).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},f.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?f("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},v):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},v),this},s.on("click.fb-start","[data-fancybox]",v),s.on("click.fb-start","[data-fancybox-trigger]",function(t){f('[data-fancybox="'+f(this).attr("data-fancybox-trigger")+'"]').eq(f(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:f(this)})}),i=".fancybox-button",p="fancybox-focus",m=null,s.on("mousedown mouseup focus blur",i,function(t){switch(t.type){case"mousedown":m=f(this);break;case"mouseup":m=null;break;case"focusin":f(i).removeClass(p),f(this).is(m)||f(this).is("[disabled]")||f(this).addClass(p);break;case"focusout":f(i).removeClass(p)}})))}(window,document,jQuery),function(p){"use strict";function f(i,t,e){if(i)return"object"===p.type(e=e||"")&&(e=p.param(e,!0)),p.each(t,function(t,e){i=i.replace("$"+t,e||"")}),e.length&&(i+=(0<i.indexOf("?")?"&":"?")+e),i}var n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},o=(p(document).on("objectNeedsType.fb",function(t,e,o){var s,r,a,l,c,d,u=o.src||"",h=!1,i=p.extend(!0,{},n,o.opts.media);p.each(i,function(t,e){if(r=u.match(e.matcher)){if(h=e.type,d=t,c={},e.paramPlace&&r[e.paramPlace]){l=(l="?"==(l=r[e.paramPlace])[0]?l.substring(1):l).split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(c[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return a=p.extend(!0,{},e.params,o.opts[t],c),u="function"===p.type(e.url)?e.url.call(this,r,a,o):f(e.url,r,a),s="function"===p.type(e.thumb)?e.thumb.call(this,r,a,o):f(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,i,n){return"&start="+((i?60*parseInt(i,10):0)+parseInt(n,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),h?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===h&&(o.opts=p.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(o,{type:h,src:u,origSrc:o.src,contentSource:d,contentType:"image"===h?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(o.type=o.opts.defaultType)}),{youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,i=this;this[t].loaded?setTimeout(function(){i.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){i[t].loaded=!0,i.done(t)}:e.onload=function(){i[t].loaded=!0,i.done(t)},document.body.appendChild(e))},done:function(t){var e,i;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=p.fancybox.getInstance())&&(i=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){e.next()}))}});p(document).on({"afterShow.fb":function(t,e,i){1<e.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&o.load(i.contentSource)}})}(jQuery),function(d,l,u){"use strict";function h(t){var e,i=[];for(e in t=(t=t.originalEvent||t||d.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[e].pageX?i.push({x:t[e].pageX,y:t[e].pageY}):t[e].clientX&&i.push({x:t[e].clientX,y:t[e].clientY});return i}function p(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||u.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,i=t[0].attributes,n=i.length;e<n;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return 1}function f(t){for(var e,i,n,o=!1;(e=t.get(0),n=i=n=i=void 0,i=d.getComputedStyle(e)["overflow-y"],n=d.getComputedStyle(e)["overflow-x"],i=("scroll"===i||"auto"===i)&&e.scrollHeight>e.clientHeight,n=("scroll"===n||"auto"===n)&&e.scrollWidth>e.clientWidth,!(o=i||n))&&((t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body")););return o}function i(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",u.proxy(e,"ontouchstart"))}var g=d.requestAnimationFrame||d.webkitRequestAnimationFrame||d.mozRequestAnimationFrame||d.oRequestAnimationFrame||function(t){return d.setTimeout(t,1e3/60)},m=d.cancelAnimationFrame||d.webkitCancelAnimationFrame||d.mozCancelAnimationFrame||d.oCancelAnimationFrame||function(t){d.clearTimeout(t)};i.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),u(l).off(".fb.touch"),t.requestId&&(m(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},i.prototype.ontouchstart=function(t){var e=this,i=u(t.target),n=e.instance,o=n.current,s=o.$slide,r=o.$content,a="touchstart"==t.type;a&&e.$container.off("mousedown.fb.touch"),t.originalEvent&&2==t.originalEvent.button||!s.length||!i.length||c(i)||c(i.parent())||!i.is("img")&&t.originalEvent.clientX>i[0].clientWidth+i.offset().left||(!o||n.isAnimating||o.$slide.hasClass("fancybox-animated")?(t.stopPropagation(),t.preventDefault()):(e.realPoints=e.startPoints=h(t),e.startPoints.length&&(o.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=i,e.$content=r,e.opts=o.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=n.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=u.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=u.fancybox.getTranslate(s),e.stagePos=u.fancybox.getTranslate(n.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,u(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",u.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",u.proxy(e,"ontouchmove")),u.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(i.is(e.$stage)||e.$stage.find(i).length)||(i.is(".fancybox-image")&&t.preventDefault(),u.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(e.isScrollable=f(i)||f(i.parent()),u.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!o.hasError||(e.canPan?(u.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,u.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-u(d).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-u(d).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=p(e.startPoints[0],e.startPoints[1]))))))},i.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(t){var e=this;void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?e.ontouchend(t):e.isScrolling?e.canTap=!1:(e.newPoints=h(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=p(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=p(e.newPoints[0],e.startPoints[0],"y"),e.distance=p(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom())))},i.prototype.onSwipe=function(t){var e,o=this,s=o.instance,i=o.isSwiping,n=o.sliderStartPos.left||0;if(!0===i){if(10<Math.abs(o.distance)){if(o.canTap=!1,s.group.length<2&&o.opts.vertical?o.isSwiping="y":s.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<u(d).width()?o.isSwiping="x":(e=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<e&&e<135?"y":"x"),"y"===o.isSwiping&&u.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);s.isDragging=o.isSwiping,o.startPoints=o.newPoints,u.each(s.slides,function(t,e){var i,n;u.fancybox.stop(e.$slide),i=u.fancybox.getTranslate(e.$slide),n=u.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(o.sliderStartPos.top=i.top-n.top,o.sliderStartPos.left=i.left-n.left),u.fancybox.setTranslate(e.$slide,{top:i.top-n.top,left:i.left-n.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}}else"x"==i&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?n+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?n-=Math.pow(-o.distanceX,.8):n+=o.distanceX),o.sliderLastPos={top:"x"==i?0:o.sliderStartPos.top+o.distanceY,left:n},o.requestId&&(m(o.requestId),o.requestId=null),o.requestId=g(function(){o.sliderLastPos&&(u.each(o.instance.slides,function(t,e){var i=e.pos-o.instance.currPos;u.fancybox.setTranslate(e.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*e.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))})},i.prototype.onPan=function(){var t=this;p(t.newPoints[0],t.realPoints[0])<(u.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)}))},i.prototype.limitMovement=function(){var t=this,e=t.canvasWidth,i=t.canvasHeight,n=t.distanceX,o=t.distanceY,t=t.contentStartPos,s=t.left,r=t.top,a=t.width,t=t.height,l=e<a?s+n:s,c=r+o,d=Math.max(0,.5*e-.5*a),u=Math.max(0,.5*i-.5*t),e=Math.min(e-a,.5*e-.5*a),a=Math.min(i-t,.5*i-.5*t);return 0<n&&d<l&&(l=d-1+Math.pow(-d+s+n,.8)||0),n<0&&l<e&&(l=e+1-Math.pow(e-s-n,.8)||0),0<o&&u<c&&(c=u-1+Math.pow(-u+r+o,.8)||0),{top:c=o<0&&c<a?a+1-Math.pow(a-r-o,.8)||0:c,left:l}},i.prototype.limitPosition=function(t,e,i,n){var o=this.canvasWidth,s=this.canvasHeight;return t=o<i?(t=0<t?0:t)<o-i?o-i:t:Math.max(0,o/2-i/2),{top:e=s<n?(e=0<e?0:e)<s-n?s-n:e:Math.max(0,s/2-n/2),left:t}},i.prototype.onZoom=function(){var t=this,e=t.contentStartPos,i=e.width,n=e.height,o=e.left,e=e.top,s=p(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,r=Math.floor(i*s),a=Math.floor(n*s),i=(i-r)*t.percentageOfImageAtPinchPointX,n=(n-a)*t.percentageOfImageAtPinchPointY,l=(t.newPoints[0].x+t.newPoints[1].x)/2-u(d).scrollLeft(),c=(t.newPoints[0].y+t.newPoints[1].y)/2-u(d).scrollTop(),l=l-t.centerPointStartX,e={top:e+(n+(c-t.centerPointStartY)),left:o+(i+l),scaleX:s,scaleY:s};t.canTap=!1,t.newWidth=r,t.newHeight=a,t.contentLastPos=e,t.requestId&&m(t.requestId),t.requestId=g(function(){u.fancybox.setTranslate(t.$content,t.contentLastPos)})},i.prototype.ontouchend=function(t){var e=this,i=e.isSwiping,n=e.isPanning,o=e.isZooming,s=e.isScrolling;if(e.endPoints=h(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),u(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(m(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,n?e.endPanning():o?e.endZooming():e.endSwiping(i,s)},i.prototype.endSwiping=function(t,e){var i=this,n=!1,o=i.instance.group.length,s=Math.abs(i.distanceX),o="x"==t&&1<o&&(130<i.dMs&&10<s||50<s);i.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(i.distanceY)?(u.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),n=i.instance.close(!0,250)):o&&0<i.distanceX?n=i.instance.previous(300):o&&i.distanceX<0&&(n=i.instance.next(300)),!1!==n||"x"!=t&&"y"!=t||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var t,e,i=this;i.contentLastPos&&(t=!1===i.opts.momentum||350<i.dMs?(e=i.contentLastPos.left,i.contentLastPos.top):(e=i.contentLastPos.left+500*i.velocityX,i.contentLastPos.top+500*i.velocityY),(e=i.limitPosition(e,t,i.contentStartPos.width,i.contentStartPos.height)).width=i.contentStartPos.width,e.height=i.contentStartPos.height,u.fancybox.animate(i.$content,e,366))},i.prototype.endZooming=function(){var t,e,i=this,n=i.instance.current,o=i.newWidth,s=i.newHeight;i.contentLastPos&&(t=i.contentLastPos.left,e=i.contentLastPos.top,u.fancybox.setTranslate(i.$content,{top:e,left:t,width:o,height:s,scaleX:1,scaleY:1}),o<i.canvasWidth&&s<i.canvasHeight?i.instance.scaleToFit(150):o>n.width||s>n.height?i.instance.scaleToActual(i.centerPointStartX,i.centerPointStartY,150):(n=i.limitPosition(t,e,o,s),u.fancybox.animate(i.$content,n,150)))},i.prototype.onTap=function(e){function t(t){if(t=r.opts[t],t=u.isFunction(t)?t.apply(s,[r,e]):t)switch(t){case"close":s.close(n.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(n.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(n.startEvent))}}var i,n=this,o=u(e.target),s=n.instance,r=s.current,a=e&&h(e)||n.startPoints,l=a[0]?a[0].x-u(d).scrollLeft()-n.stagePos.left:0,c=a[0]?a[0].y-u(d).scrollTop()-n.stagePos.top:0;if((!e.originalEvent||2!=e.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))i="Outside";else if(o.is(".fancybox-slide"))i="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;i="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(c-n.tapY))return this;t("dblclick"+i)}else n.tapX=l,n.tapY=c,r.opts["dblclick"+i]&&r.opts["dblclick"+i]!==r.opts["click"+i]?n.tapped=setTimeout(function(){n.tapped=null,s.isAnimating||t("click"+i)},500):t("click"+i);return this}},u(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new i(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(s,r){"use strict";r.extend(!0,r.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(t){this.instance=t,this.init()}r.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,i=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=r('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this,i=e.instance,n=i.current;n&&(!0===t||n.opts.loop||i.currIndex<i.group.length-1)?e.isActive&&"video"!==n.contentType&&(e.$progress&&r.fancybox.animate(e.$progress.show(),{scaleX:1},n.opts.slideShow.speed),e.timer=setTimeout(function(){i.current.opts.loop||i.current.index!=i.group.length-1?i.next():i.jumpTo(0)},n.opts.slideShow.speed)):(e.stop(),i.idleSecondsCounter=0,i.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),r(s).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new i(e))},"beforeShow.fb":function(t,e,i,n){e=e&&e.SlideShow;n?e&&i.opts.slideShow.autoStart&&e.start():e&&e.isActive&&e.clear()},"afterShow.fb":function(t,e,i){e=e&&e.SlideShow;e&&e.isActive&&e.set()},"afterKeydown.fb":function(t,e,i,n,o){e=e&&e.SlideShow;!e||!i.opts.slideShow||80!==o&&32!==o||r(s.activeElement).is("button,a,input")||(n.preventDefault(),e.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){e=e&&e.SlideShow;e&&e.stop()}}),r(s).on("visibilitychange",function(){var t=r.fancybox.getInstance(),t=t&&t.SlideShow;t&&t.isActive&&(s.hidden?t.clear():t.set())})}(document,jQuery),function(s,i){"use strict";var n,o=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},i=0;i<t.length;i++){var n=t[i];if(n&&n[1]in s){for(var o=0;o<n.length;o++)e[t[0][o]]=n[o];return e}}return!1}();o&&(n={request:function(t){(t=t||s.documentElement)[o.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[o.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[o.fullscreenElement])},enabled:function(){return Boolean(s[o.fullscreenEnabled])}},i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(s).on(o.fullscreenchange,function(){var t=n.isFullscreen(),e=i.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})),i(s).on({"onInit.fb":function(t,e){o?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),n.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&n.request(),e.FullScreen=n):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,i,n,o){e&&e.FullScreen&&70===o&&(n.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&n.exit()}})}(document,jQuery),function(t,s){"use strict";function i(t){this.init(t)}var r="fancybox-thumbs",a=r+"-active";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);s.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,i=t.group,n=0;e.instance=t,e.opts=i[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=i.length;o<s&&(i[o].thumb&&n++,!(1<n));o++);1<n&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var i,t=this,e=t.instance,n=t.opts.parentEl,o=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(n).addBack().filter(n)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(i=e.thumb)||"image"!==e.type||(i=e.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=o.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,i,n=this,o=n.$list,s=n.$grid;n.instance.current&&(i=(e=o.children().removeClass(a).filter('[data-index="'+n.instance.current.index+'"]').addClass(a)).position(),"y"===n.opts.axis&&(i.top<0||i.top>o.height()-e.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+i.top},t):"x"===n.opts.axis&&(i.left<s.scrollLeft()||i.left>s.scrollLeft()+(s.width()-e.outerWidth()))&&o.parent().stop().animate({scrollLeft:i.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){e&&!e.Thumbs&&(e=new i(e)).isActive&&!0===e.opts.autoStart&&e.show()},"beforeShow.fb":function(t,e,i,n){e=e&&e.Thumbs;e&&e.isVisible&&e.focus(n?0:250)},"afterKeydown.fb":function(t,e,i,n,o){e=e&&e.Thumbs;e&&e.isActive&&71===o&&(n.preventDefault(),e.toggle())},"beforeClose.fb":function(t,e){e=e&&e.Thumbs;e&&e.isVisible&&!1!==e.opts.hideOnClose&&e.$grid.hide()}})}(document,jQuery),function(t,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),o(t).on("click","[data-fancybox-share]",function(){var t,e,i=o.fancybox.getInstance(),n=i.current||null;n&&("function"===o.type(n.opts.share.url)&&(t=n.opts.share.url.apply(n,[i,n])),n=n.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===n.type?encodeURIComponent(n.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]}))).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),o.fancybox.open({src:i.translate(i,n),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){i.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,n){"use strict";function o(){var t=s.location.hash.substr(1),e=t.split("-"),i=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:i<1?1:i,gallery:e.join("-")}}function e(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function a(t){return!!t&&(""!==(t=(t=(t.current||t).opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&t)}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),n(function(){!1!==n.fancybox.defaults.hash&&(n(r).on({"onInit.fb":function(t,e){var i,n;!1!==e.group[e.currIndex].opts.hash&&(i=o(),(n=a(e))&&i.gallery&&n==i.gallery&&(e.currIndex=i.index-1))},"beforeShow.fb":function(t,e,i,n){var o;i&&!1!==i.opts.hash&&(o=a(e))&&(e.currentHash=o+(1<e.group.length?"-"+(i.index+1):""),s.location.hash!=="#"+e.currentHash&&(n&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[n?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),n&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,i){i&&!1!==i.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),n(s).on("hashchange.fb",function(){var t=o(),i=null;n.each(n(".fancybox-container").get().reverse(),function(t,e){e=n(e).data("FancyBox");if(e&&e.currentHash)return i=e,!1}),i?i.currentHash===t.gallery+"-"+t.index||1===t.index&&i.currentHash==t.gallery||(i.currentHash=null,i.close()):""!==t.gallery&&e(t)}),setTimeout(function(){n.fancybox.getInstance()||e(o())},50))})}(window,document,jQuery),function(t,e){"use strict";var o=(new Date).getTime();e(t).on({"onInit.fb":function(t,n,e){n.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=n.current,i=(new Date).getTime();n.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-o<250||(o=i,n[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var n,s=window.Slick||{};n=0,(s=function(t,e){var i=this;i.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},i.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(i,i.initials),i.activeBreakpoint=null,i.animType=null,i.animProp=null,i.breakpoints=[],i.breakpointSettings=[],i.cssTransitions=!1,i.focussed=!1,i.interrupted=!1,i.hidden="hidden",i.paused=!0,i.positionProp=null,i.respondTo=null,i.rowCount=1,i.shouldClick=!0,i.$slider=c(t),i.$slidesCache=null,i.transformType=null,i.transitionType=null,i.visibilityChange="visibilitychange",i.windowWidth=0,i.windowTimer=null,t=c(t).data("slick")||{},i.options=c.extend({},i.defaults,e,t),i.currentSlide=i.options.initialSlide,i.originalSettings=i.options,void 0!==document.mozHidden?(i.hidden="mozHidden",i.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(i.hidden="webkitHidden",i.visibilityChange="webkitvisibilitychange"),i.autoPlay=c.proxy(i.autoPlay,i),i.autoPlayClear=c.proxy(i.autoPlayClear,i),i.autoPlayIterator=c.proxy(i.autoPlayIterator,i),i.changeSlide=c.proxy(i.changeSlide,i),i.clickHandler=c.proxy(i.clickHandler,i),i.selectHandler=c.proxy(i.selectHandler,i),i.setPosition=c.proxy(i.setPosition,i),i.swipeHandler=c.proxy(i.swipeHandler,i),i.dragHandler=c.proxy(i.dragHandler,i),i.keyHandler=c.proxy(i.keyHandler,i),i.instanceUid=n++,i.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,i.registerBreakpoints(),i.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(t,e,i){var n=this;if("boolean"==typeof e)i=e,e=null;else if(e<0||e>=n.slideCount)return!1;n.unload(),"number"==typeof e?0===e&&0===n.$slides.length?c(t).appendTo(n.$slideTrack):i?c(t).insertBefore(n.$slides.eq(e)):c(t).insertAfter(n.$slides.eq(e)):!0===i?c(t).prependTo(n.$slideTrack):c(t).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),n.$slidesCache=n.$slides,n.reinit()},s.prototype.animateHeight=function(){var t,e=this;1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical&&(t=e.$slides.eq(e.currentSlide).outerHeight(!0),e.$list.animate({height:t},e.options.speed))},s.prototype.animateSlide=function(t,e){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(t=-t),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:t},n.options.speed,n.options.easing,e):n.$slideTrack.animate({top:t},n.options.speed,n.options.easing,e):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),c({animStart:n.currentLeft}).animate({animStart:t},{duration:n.options.speed,easing:n.options.easing,step:function(t){t=Math.ceil(t),!1===n.options.vertical?i[n.animType]="translate("+t+"px, 0px)":i[n.animType]="translate(0px,"+t+"px)",n.$slideTrack.css(i)},complete:function(){e&&e.call()}})):(n.applyTransition(),t=Math.ceil(t),!1===n.options.vertical?i[n.animType]="translate3d("+t+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+t+"px, 0px)",n.$slideTrack.css(i),e&&setTimeout(function(){n.disableTransition(),e.call()},n.options.speed))},s.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t=t&&null!==t?c(t).not(this.$slider):t},s.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},s.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,(!1===e.options.fade?e.$slideTrack:e.$slides.eq(t)).css(i)},s.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},s.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var t,e,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)e.append(c("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=e.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},s.prototype.buildRows=function(){var t,e,i,n=this,o=document.createDocumentFragment(),s=n.$slider.children();if(0<n.options.rows){for(i=n.options.slidesPerRow*n.options.rows,e=Math.ceil(s.length/i),t=0;t<e;t++){for(var r=document.createElement("div"),a=0;a<n.options.rows;a++){for(var l=document.createElement("div"),c=0;c<n.options.slidesPerRow;c++){var d=t*i+(a*n.options.slidesPerRow+c);s.get(d)&&l.appendChild(s.get(d))}r.appendChild(l)}o.appendChild(r)}n.$slider.empty().append(o),n.$slider.children().children().children().css({width:100/n.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(t,e){var i,n,o,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?o=l:"slider"===s.respondTo?o=a:"min"===s.respondTo&&(o=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in n=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[i]&&(n=s.breakpoints[i]):o>s.breakpoints[i]&&(n=s.breakpoints[i]));null!==n?null!==s.activeBreakpoint&&n===s.activeBreakpoint&&!e||(s.activeBreakpoint=n,"unslick"===s.breakpointSettings[n]?s.unslick(n):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[n]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=n):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=n),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},s.prototype.changeSlide=function(t,e){var i,n=this,o=c(t.currentTarget);switch(o.is("a")&&t.preventDefault(),o.is("li")||(o=o.closest("li")),i=n.slideCount%n.options.slidesToScroll!=0?0:(n.slideCount-n.currentSlide)%n.options.slidesToScroll,t.data.message){case"previous":s=0==i?n.options.slidesToScroll:n.options.slidesToShow-i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide-s,!1,e);break;case"next":s=0==i?n.options.slidesToScroll:i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide+s,!1,e);break;case"index":var s=0===t.data.index?0:t.data.index||o.index()*n.options.slidesToScroll;n.slideHandler(n.checkNavigable(s),!1,e),o.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(t){var e=this.getNavigableIndexes(),i=0;if(t>e[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},s.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},s.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},s.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},s.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},s.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",(!1===this.options.fade?this.$slideTrack:this.$slides.eq(t)).css(e)},s.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},s.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},s.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=e.is(":focus"),i.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},s.prototype.getLeft=function(t){var e,i,n=this,o=0;return n.slideOffset=0,e=n.$slides.first().outerHeight(!0),!0===n.options.infinite?(n.slideCount>n.options.slidesToShow&&(n.slideOffset=n.slideWidth*n.options.slidesToShow*-1,i=-1,!0===n.options.vertical&&!0===n.options.centerMode&&(2===n.options.slidesToShow?i=-1.5:1===n.options.slidesToShow&&(i=-2)),o=e*n.options.slidesToShow*i),n.slideCount%n.options.slidesToScroll!=0&&t+n.options.slidesToScroll>n.slideCount&&n.slideCount>n.options.slidesToShow&&(o=t>n.slideCount?(n.slideOffset=(n.options.slidesToShow-(t-n.slideCount))*n.slideWidth*-1,(n.options.slidesToShow-(t-n.slideCount))*e*-1):(n.slideOffset=n.slideCount%n.options.slidesToScroll*n.slideWidth*-1,n.slideCount%n.options.slidesToScroll*e*-1))):t+n.options.slidesToShow>n.slideCount&&(n.slideOffset=(t+n.options.slidesToShow-n.slideCount)*n.slideWidth,o=(t+n.options.slidesToShow-n.slideCount)*e),n.slideCount<=n.options.slidesToShow&&(o=n.slideOffset=0),!0===n.options.centerMode&&n.slideCount<=n.options.slidesToShow?n.slideOffset=n.slideWidth*Math.floor(n.options.slidesToShow)/2-n.slideWidth*n.slideCount/2:!0===n.options.centerMode&&!0===n.options.infinite?n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)-n.slideWidth:!0===n.options.centerMode&&(n.slideOffset=0,n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)),i=!1===n.options.vertical?t*n.slideWidth*-1+n.slideOffset:t*e*-1+o,!0===n.options.variableWidth&&(e=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(t):n.$slideTrack.children(".slick-slide").eq(t+n.options.slidesToShow),i=!0===n.options.rtl?e[0]?-1*(n.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,!0===n.options.centerMode&&(e=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(t):n.$slideTrack.children(".slick-slide").eq(t+n.options.slidesToShow+1),i=!0===n.options.rtl?e[0]?-1*(n.$slideTrack.width()-e[0].offsetLeft-e.width()):0:e[0]?-1*e[0].offsetLeft:0,i+=(n.$list.width()-e.outerWidth())/2)),i},s.prototype.getOption=s.prototype.slickGetOption=function(t){return this.options[t]},s.prototype.getNavigableIndexes=function(){for(var t=this,e=0,i=0,n=[],o=!1===t.options.infinite?t.slideCount:(e=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,2*t.slideCount);e<o;)n.push(e),e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return n},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var i,n=this,o=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0;return!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*n.swipeLeft)return i=e,!1}),Math.abs(c(i).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},s.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},s.prototype.initADA=function(){var i=this,n=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(t){return 0<=t&&t<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+t,tabindex:-1}),-1!==e&&(t="slick-slide-control"+i.instanceUid+e,c("#"+t).length&&c(this).attr({"aria-describedby":t}))}),i.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+t,"aria-controls":"slick-slide"+i.instanceUid+e,"aria-label":t+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=i.currentSlide,e=t+i.options.slidesToShow;t<e;t++)i.options.focusOnChange?i.$slides.eq(t).attr({tabindex:"0"}):i.$slides.eq(t).removeAttr("tabindex");i.activateADA()},s.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},s.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},s.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},s.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},s.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var t,e,i,s=this;function n(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),n=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),n&&t.attr("sizes",n)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},o.src=e})}if(!0===s.options.centerMode?i=!0===s.options.infinite?(e=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(e=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(e=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,i=Math.ceil(e+s.options.slidesToShow),!0===s.options.fade&&(0<e&&e--,i<=s.slideCount&&i++)),t=s.$slider.find(".slick-slide").slice(e,i),"anticipated"===s.options.lazyLoad)for(var o=e-1,r=i,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)o<0&&(o=s.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(r)),o--,r++;n(t),s.slideCount<=s.options.slidesToShow?n(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?n(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&n(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},s.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},s.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(t){t.preventDefault()},s.prototype.progressiveLazyLoad=function(t){t=t||1;var e,i,n,o,s=this,r=c("img[data-lazy]",s.$slider);r.length?(e=r.first(),i=e.attr("data-lazy"),n=e.attr("data-srcset"),o=e.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){n&&(e.attr("srcset",n),o&&e.attr("sizes",o)),e.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,e,i]),s.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout(function(){s.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,i]),s.progressiveLazyLoad())},r.src=i):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(t){var e=this,i=e.slideCount-e.options.slidesToShow;!e.options.infinite&&e.currentSlide>i&&(e.currentSlide=i),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),i=e.currentSlide,e.destroy(!0),c.extend(e,e.initials,{currentSlide:i}),e.init(),t||e.changeSlide({data:{message:"index",index:i}},!1)},s.prototype.registerBreakpoints=function(){var t,e,i,n=this,o=n.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in n.respondTo=n.options.respondTo||"window",o)if(i=n.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===e&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(e),n.breakpointSettings[e]=o[t].settings}n.breakpoints.sort(function(t,e){return n.options.mobileFirst?t-e:e-t})}},s.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},s.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(t,e,i){var n=this;if(t="boolean"==typeof t?!0===(e=t)?0:n.slideCount-1:!0===e?--t:t,n.slideCount<1||t<0||t>n.slideCount-1)return!1;n.unload(),(!0===i?n.$slideTrack.children():n.$slideTrack.children(this.options.slide).eq(t)).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},s.prototype.setCSS=function(t){var e,i,n=this,o={};!0===n.options.rtl&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",o[n.positionProp]=t,!1!==n.transformsEnabled&&(!(o={})===n.cssTransitions?o[n.animType]="translate("+e+", "+i+")":o[n.animType]="translate3d("+e+", "+i+", 0px)"),n.$slideTrack.css(o)},s.prototype.setDimensions=function(){var t=this,e=(!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length))),t.$slides.first().outerWidth(!0)-t.$slides.first().width());!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},s.prototype.setFade=function(){var i,n=this;n.$slides.each(function(t,e){i=n.slideWidth*t*-1,!0===n.options.rtl?c(e).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var t;1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical&&(t=this.$slides.eq(this.currentSlide).outerHeight(!0),this.$list.css("height",t))},s.prototype.setOption=s.prototype.slickSetOption=function(){var t,e,i,n,o,s=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(i=arguments[0],n=arguments[1],r=arguments[2],"responsive"===arguments[0]&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[i]=n;else if("multiple"===o)c.each(i,function(t,e){s.options[t]=e});else if("responsive"===o)for(e in n)if("array"!==c.type(s.options.responsive))s.options.responsive=[n[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===n[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(n[e])}r&&(s.unload(),s.reinit())},s.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},s.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},s.prototype.setSlideClasses=function(t){var e,i,n,o=this,s=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true");o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode?(i=o.options.slidesToShow%2==0?1:0,n=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&((n<=t&&t<=o.slideCount-1-n?o.$slides.slice(t-n+i,t+n+1):(e=o.options.slidesToShow+t,s.slice(e-n+1+i,e+n+2))).addClass("slick-active").attr("aria-hidden","false"),0===t?s.eq(s.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&s.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")):(0<=t&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow):s.length<=o.options.slidesToShow?s:(i=o.slideCount%o.options.slidesToShow,e=!0===o.options.infinite?o.options.slidesToShow+t:t,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?s.slice(e-(o.options.slidesToShow-i),e+i):s.slice(e,e+o.options.slidesToShow))).addClass("slick-active").attr("aria-hidden","false"),"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},s.prototype.setupInfinite=function(){var t,e,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(e=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,t=n.slideCount;t>n.slideCount-i;--t)c(n.$slides[e=t-1]).clone(!0).attr("id","").attr("data-slick-index",e-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(t=0;t<i+n.slideCount;t+=1)e=t,c(n.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},s.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},s.prototype.selectHandler=function(t){t=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),t=(t=parseInt(t.attr("data-slick-index")))||0;this.slideCount<=this.options.slidesToShow?this.slideHandler(t,!1,!0):this.slideHandler(t)},s.prototype.slideHandler=function(t,e,i){var n,o,s,r=this;e=e||!1,!0===r.animating&&!0===r.options.waitForAnimate||!0===r.options.fade&&r.currentSlide===t||(!1===e&&r.asNavFor(t),n=t,e=r.getLeft(n),s=r.getLeft(r.currentSlide),r.currentLeft=null===r.swipeLeft?s:r.swipeLeft,!1===r.options.infinite&&!1===r.options.centerMode&&(t<0||t>r.getDotCount()*r.options.slidesToScroll)||!1===r.options.infinite&&!0===r.options.centerMode&&(t<0||t>r.slideCount-r.options.slidesToScroll)?!1===r.options.fade&&(n=r.currentSlide,!0!==i&&r.slideCount>r.options.slidesToShow?r.animateSlide(s,function(){r.postSlide(n)}):r.postSlide(n)):(r.options.autoplay&&clearInterval(r.autoPlayTimer),o=n<0?r.slideCount%r.options.slidesToScroll!=0?r.slideCount-r.slideCount%r.options.slidesToScroll:r.slideCount+n:n>=r.slideCount?r.slideCount%r.options.slidesToScroll!=0?0:n-r.slideCount:n,r.animating=!0,r.$slider.trigger("beforeChange",[r,r.currentSlide,o]),t=r.currentSlide,r.currentSlide=o,r.setSlideClasses(r.currentSlide),r.options.asNavFor&&(s=(s=r.getNavTarget()).slick("getSlick")).slideCount<=s.options.slidesToShow&&s.setSlideClasses(r.currentSlide),r.updateDots(),r.updateArrows(),!0===r.options.fade?(!0!==i?(r.fadeSlideOut(t),r.fadeSlide(o,function(){r.postSlide(o)})):r.postSlide(o),r.animateHeight()):!0!==i&&r.slideCount>r.options.slidesToShow?r.animateSlide(e,function(){r.postSlide(o)}):r.postSlide(o)))},s.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var t=this.touchObject.startX-this.touchObject.curX,e=this.touchObject.startY-this.touchObject.curY,e=Math.atan2(e,t),t=Math.round(180*e/Math.PI);return(t=t<0?360-Math.abs(t):t)<=45&&0<=t||t<=360&&315<=t?!1===this.options.rtl?"left":"right":135<=t&&t<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?35<=t&&t<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},s.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},s.prototype.swipeMove=function(t){var e,i,n=this,o=void 0!==t.originalEvent?t.originalEvent.touches:null;return!(!n.dragging||n.scrolling||o&&1!==o.length)&&(e=n.getLeft(n.currentSlide),n.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,n.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,n.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(n.touchObject.curX-n.touchObject.startX,2))),o=Math.round(Math.sqrt(Math.pow(n.touchObject.curY-n.touchObject.startY,2))),!n.options.verticalSwiping&&!n.swiping&&4<o?!(n.scrolling=!0):(!0===n.options.verticalSwiping&&(n.touchObject.swipeLength=o),o=n.swipeDirection(),void 0!==t.originalEvent&&4<n.touchObject.swipeLength&&(n.swiping=!0,t.preventDefault()),t=(!1===n.options.rtl?1:-1)*(n.touchObject.curX>n.touchObject.startX?1:-1),!0===n.options.verticalSwiping&&(t=n.touchObject.curY>n.touchObject.startY?1:-1),i=n.touchObject.swipeLength,(n.touchObject.edgeHit=!1)===n.options.infinite&&(0===n.currentSlide&&"right"===o||n.currentSlide>=n.getDotCount()&&"left"===o)&&(i=n.touchObject.swipeLength*n.options.edgeFriction,n.touchObject.edgeHit=!0),!1===n.options.vertical?n.swipeLeft=e+i*t:n.swipeLeft=e+i*(n.$list.height()/n.listWidth)*t,!0===n.options.verticalSwiping&&(n.swipeLeft=e+i*t),!0!==n.options.fade&&!1!==n.options.touchMove&&(!0===n.animating?(n.swipeLeft=null,!1):void n.setCSS(n.swipeLeft))))},s.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},s.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},s.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2);!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){for(var t,e=arguments[0],i=Array.prototype.slice.call(arguments,1),n=this.length,o=0;o<n;o++)if("object"==typeof e||void 0===e?this[o].slick=new s(this[o],e):t=this[o].slick[e].apply(this[o].slick,i),void 0!==t)return t;return this}}),function(q){"use strict";var z='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',a={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},W={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,i){return t===e?t=e:t===i&&(t=i),t}function X(t){return void 0!==t}var e=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,V=function(t){return e.test(t)?(t=e.exec(t),{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}):null};function Y(t,e,i){i=i/100*(e-t);return i=1===(i=Math.round(t+i).toString(16)).length?"0"+i:i}function G(s,l){this.node=s.get(0);var c,e,d,u,h,t,i=this,n=(s.empty().addClass("jq-ry-container"),q("<div/>").addClass("jq-ry-group-wrapper").appendTo(s)),p=q("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(n),o=q("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(n),f=0,r=l.rating,a=!1;function g(t){X(t)||(t=l.rating);var t=(r=t)/c,e=t*d;1<t&&(e+=(Math.ceil(t)-1)*h),x(l.ratedFill),(e=l.rtl?100-e:e)<0?e=0:100<e&&(e=100),o.css("width",e+"%")}function m(){t=e*l.numStars+u*(l.numStars-1),d=e/t*100,h=u/t*100,s.width(t),g()}function v(t){t=l.starWidth=t;return e=window.parseFloat(l.starWidth.replace("px","")),p.find("svg").attr({width:l.starWidth,height:t}),o.find("svg").attr({width:l.starWidth,height:t}),m(),s}function y(t){return l.spacing=t,u=parseFloat(l.spacing.replace("px","")),p.find("svg:not(:first-child)").css({"margin-left":t}),o.find("svg:not(:first-child)").css({"margin-left":t}),m(),s}function b(t){return l.normalFill=t,(l.rtl?o:p).find("svg").attr({fill:l.normalFill}),s}var w=l.ratedFill;function x(t){var e,i;return l.multiColor?(e=(r-f)/l.maxValue*100,t=function(t,e,i){if(!t||!e)return null;i=X(i)?i:0,t=V(t),e=V(e);var n=Y(t.r,e.r,i),o=Y(t.b,e.b,i);return"#"+n+Y(t.g,e.g,i)+o}((i=l.multiColor||{}).startColor||W.startColor,i.endColor||W.endColor,e)):w=t,l.ratedFill=t,(l.rtl?p:o).find("svg").attr({fill:l.ratedFill}),s}function _(t){l.rtl=t=!!t,b(l.normalFill),g()}function C(t){l.multiColor=t,x(t||w)}function S(t){l.numStars=t,c=l.maxValue/l.numStars,p.empty(),o.empty();for(var e=0;e<l.numStars;e++)p.append(q(l.starSvg||z)),o.append(q(l.starSvg||z));return v(l.starWidth),b(l.normalFill),y(l.spacing),g(),s}function T(t){return l.maxValue=t,c=l.maxValue/l.numStars,l.rating>t&&$(t),g(),s}function N(t){return l.precision=t,$(l.rating),s}function R(t){return l.halfStar=t,s}function j(t){return l.fullStar=t,s}function k(t){var e,i,n=p.offset().left,o=n+p.width(),s=l.maxValue,t=t.pageX,r=0;if(t<n)r=f;else if(o<t)r=s;else{t=(t-n)/(o-n);if(0<u)for(var a=t*=100;0<a;)d<a?(r+=c,a-=d+h):(r+=a/d*c,a=0);else r=t*l.maxValue;n=(o=r)%c,t=c/2,e=l.halfStar,((i=l.fullStar)||e)&&(i||e&&t<n?o+=c-n:(o-=n,0<n&&(o+=t))),r=o}return l.rtl&&(r=s-r),parseFloat(r)}function A(t){return l.readOnly=t,s.attr("readonly",!0),M(),t||(s.removeAttr("readonly"),s.on("mousemove",E).on("mouseenter",E).on("mouseleave",P).on("click",D).on("rateyo.init",O).on("rateyo.change",I).on("rateyo.set",F)),s}function $(t){var e=l.maxValue,i=("string"==typeof t&&("%"===t[t.length-1]&&(t=t.substr(0,t.length-1),T(e=100)),t=parseFloat(t)),t),n=f,o=e;if(n<=i&&i<=o)return t=parseFloat(t.toFixed(l.precision)),U(parseFloat(t),f,e),l.rating=t,g(),a&&s.trigger("rateyo.set",{rating:t}),s;throw Error("Invalid Rating, expected value between "+n+" and "+o)}function L(t){return l.onInit=t,s}function H(t){return l.onSet=t,s}function B(t){return l.onChange=t,s}function E(t){var t=k(t).toFixed(l.precision),e=l.maxValue;g(t=U(parseFloat(t),f,e)),s.trigger("rateyo.change",{rating:t})}function P(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(e=!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))||e)||(g(),s.trigger("rateyo.change",{rating:l.rating}))}function D(t){t=k(t).toFixed(l.precision),t=parseFloat(t);i.rating(t)}function O(t,e){l.onInit&&"function"==typeof l.onInit&&l.onInit.apply(this,[e.rating,i])}function I(t,e){l.onChange&&"function"==typeof l.onChange&&l.onChange.apply(this,[e.rating,i])}function F(t,e){l.onSet&&"function"==typeof l.onSet&&l.onSet.apply(this,[e.rating,i])}function M(){s.off("mousemove",E).off("mouseenter",E).off("mouseleave",P).off("click",D).off("rateyo.init",O).off("rateyo.change",I).off("rateyo.set",F)}this.rating=function(t){return X(t)?($(t),s):l.rating},this.destroy=function(){var i,n;return l.readOnly||M(),G.prototype.collection=(i=s.get(0),n=this.collection,q.each(n,function(t){var e;if(i===this.node)return e=n.slice(0,t),t=n.slice(t+1,n.length),n=e.concat(t),!1}),n),s.removeClass("jq-ry-container").children().remove(),s},this.method=function(t){if(!t)throw Error("Method name not specified!");var e;if(X(this[t]))return e=Array.prototype.slice.apply(arguments,[]).slice(1),this[t].apply(this,e);throw Error("Method "+t+" doesn't exist!")},this.option=function(t,e){if(!X(t))return l;var i;switch(t){case"starWidth":i=v;break;case"numStars":i=S;break;case"normalFill":i=b;break;case"ratedFill":i=x;break;case"multiColor":i=C;break;case"maxValue":i=T;break;case"precision":i=N;break;case"rating":i=$;break;case"halfStar":i=R;break;case"fullStar":i=j;break;case"readOnly":i=A;break;case"spacing":i=y;break;case"rtl":i=_;break;case"onInit":i=L;break;case"onSet":i=H;break;case"onChange":i=B;break;default:throw Error("No such option as "+t)}return X(e)?i(e):l[t]},S(l.numStars),A(l.readOnly),l.rtl&&_(l.rtl),this.collection.push(this),this.rating(l.rating,!0),a=!0,s.trigger("rateyo.init",{rating:l.rating})}function l(t,e){var i;return q.each(e,function(){if(t===this.node)return i=this,!1}),i}G.prototype.collection=[],window.RateYo=G,q.fn.rateYo=function(){return function(e){var o=G.prototype.collection,t=q(this);if(0===t.length)return t;var n,s,r,i=Array.prototype.slice.apply(arguments,[]);if(0===i.length)e=i[0]={};else{if(1!==i.length||"object"!=typeof i[0]){if(1<=i.length&&"string"==typeof i[0])return n=i[0],s=i.slice(1),r=[],q.each(t,function(t,e){e=l(e,o);if(!e)throw Error("Trying to set options before even initialization");var i=e[n];if(!i)throw Error("Method "+n+" does not exist!");i=i.apply(e,s);r.push(i)}),r=1===r.length?r[0]:r;throw Error("Invalid Arguments")}e=i[0]}return e=q.extend({},a,e),q.each(t,function(){var i,n,t=l(this,o);return t||(t=q(this),i={},n=q.extend({},e),q.each(t.data(),function(t,e){0===t.indexOf("rateyo")&&(t=(t=t.replace(/^rateyo/,""))[0].toLowerCase()+t.slice(1),i[t]=e,delete n[t])}),new G(q(this),q.extend({},i,n)))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(r,a,l,t,c){"use strict";function e(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:r(l),body:r(a.body),input:r(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var n,o,t=(i=this.$cache.input).prop("value"),s={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null};for(o in"INPUT"!==i[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",i[0]),(n={skin:i.data("skin"),type:i.data("type"),min:i.data("min"),max:i.data("max"),from:i.data("from"),to:i.data("to"),step:i.data("step"),min_interval:i.data("minInterval"),max_interval:i.data("maxInterval"),drag_interval:i.data("dragInterval"),values:i.data("values"),from_fixed:i.data("fromFixed"),from_min:i.data("fromMin"),from_max:i.data("fromMax"),from_shadow:i.data("fromShadow"),to_fixed:i.data("toFixed"),to_min:i.data("toMin"),to_max:i.data("toMax"),to_shadow:i.data("toShadow"),prettify_enabled:i.data("prettifyEnabled"),prettify_separator:i.data("prettifySeparator"),force_edges:i.data("forceEdges"),keyboard:i.data("keyboard"),grid:i.data("grid"),grid_margin:i.data("gridMargin"),grid_num:i.data("gridNum"),grid_snap:i.data("gridSnap"),hide_min_max:i.data("hideMinMax"),hide_from_to:i.data("hideFromTo"),prefix:i.data("prefix"),postfix:i.data("postfix"),max_postfix:i.data("maxPostfix"),decorate_both:i.data("decorateBoth"),values_separator:i.data("valuesSeparator"),input_values_separator:i.data("inputValuesSeparator"),disable:i.data("disable"),block:i.data("block"),extra_classes:i.data("extraClasses")}).values=n.values&&n.values.split(","),n)!n.hasOwnProperty(o)||n[o]!==c&&""!==n[o]||delete n[o];t!==c&&""!==t&&((t=t.split(n.input_values_separator||e.input_values_separator||";"))[0]&&t[0]==+t[0]&&(t[0]=+t[0]),t[1]&&t[1]==+t[1]&&(t[1]=+t[1]),e&&e.values&&e.values.length?(s.from=t[0]&&e.values.indexOf(t[0]),s.to=t[1]&&e.values.indexOf(t[1])):(s.from=t[0]&&+t[0],s.to=t[1]&&+t[1])),r.extend(s,e),r.extend(s,n),this.options=s,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}var i,n=0,o=(t=t.userAgent,i=/msie\s\d+/i,0<t.search(i)&&i.exec(t).toString().split(" ")[1]<9&&(r("html").addClass("lt-ie9"),!0));Function.prototype.bind||(Function.prototype.bind=function(i){var n=this,o=[].slice;if("function"!=typeof n)throw new TypeError;var s=o.call(arguments,1),r=function(){var t,e;return this instanceof r?((t=function(){}).prototype=n.prototype,t=new t,e=n.apply(t,s.concat(o.call(arguments))),Object(e)===e?e:t):n.apply(i,s.concat(o.call(arguments)))};return r}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),o=n.length>>>0;if(0!=o){e=+e||0;if(!(o<=(e=Math.abs(e)===1/0?0:e)))for(i=Math.max(0<=e?e:o-Math.abs(e),0);i<o;){if(i in n&&n[i]===t)return i;i++}}return-1});e.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,n=this.options.to;t<i&&n===e?this.$cache.s_from.addClass("type_last"):n<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),o&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),("single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to)).on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),o&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(i=(e="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,i+=e.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:i}))},pointerMove:function(t){this.dragging&&(t=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX,this.coords.x_pointer=t-this.coords.x_gap,this.calc())},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,o&&r("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(r.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||this.target||"from",this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),o&&r("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100,i=this.options.step/i;t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){var t,e;this.options&&(this.options.hide_min_max?(this.$cache.min[0].style.display="none",this.$cache.max[0].style.display="none"):(this.options.values.length?(this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]))):(t=this._prettify(this.options.min),e=this._prettify(this.options.max),this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))),this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)))},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e,i,n=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,n=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,n=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(n)),this.target){case"base":var o=(this.options.max-this.options.min)/100,s=(this.result.from-this.options.min)/o,o=(this.result.to-this.options.min)/o;this.coords.p_single_real=this.toFixed(s),this.coords.p_from_real=this.toFixed(s),this.coords.p_to_real=this.toFixed(o),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":this.options.from_fixed||(this.coords.p_single_real=this.convertToRealPercent(n),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real));break;case"from":this.options.from_fixed||(this.coords.p_from_real=this.convertToRealPercent(n),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real));break;case"to":this.options.to_fixed||(this.coords.p_to_real=this.convertToRealPercent(n),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real));break;case"both":this.options.from_fixed||this.options.to_fixed||(n=this.toFixed(n+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(n)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(n)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real));break;case"both_one":this.options.from_fixed||this.options.to_fixed||(s=this.convertToRealPercent(n),o=this.result.from_percent,i=s+(e=(o=this.result.to_percent-o)/2),100<(i=(s=s-e)<0?(s=0)+o:i)&&(s=(i=100)-o),this.coords.p_from_real=this.calcWithStep(s),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(i),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real))}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){var t,e,i,n,o;this.options&&(i=this.options.values.length,t=this.options.p_values,this.options.hide_from_to||("single"===this.options.type?(n=i?this.decorate(t[this.result.from]):(e=this._prettify(this.result.from),this.decorate(e,this.result.from)),this.$cache.single.html(n),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"):(t=i?(n=this.options.decorate_both?(n=this.decorate(t[this.result.from]),(n+=this.options.values_separator)+this.decorate(t[this.result.to])):this.decorate(t[this.result.from]+this.options.values_separator+t[this.result.to]),o=this.decorate(t[this.result.from]),this.decorate(t[this.result.to])):(e=this._prettify(this.result.from),i=this._prettify(this.result.to),n=this.options.decorate_both?(n=this.decorate(e,this.result.from),(n+=this.options.values_separator)+this.decorate(i,this.result.to)):this.decorate(e+this.options.values_separator+i,this.result.to),o=this.decorate(e,this.result.from),this.decorate(i,this.result.to)),this.$cache.single.html(n),this.$cache.from.html(o),this.$cache.to.html(t),this.calcLabels(),e=Math.min(this.labels.p_single_left,this.labels.p_from_left),i=this.labels.p_single_left+this.labels.p_single_fake,n=this.labels.p_to_left+this.labels.p_to_fake,o=Math.max(i,n),this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",o=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",n):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(i,n))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),e<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",o>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible")))},drawShadow:function(){var t,e,i=this.options,n=this.$cache,o="number"==typeof i.from_min&&!isNaN(i.from_min),s="number"==typeof i.from_max&&!isNaN(i.from_max),r="number"==typeof i.to_min&&!isNaN(i.to_min),a="number"==typeof i.to_max&&!isNaN(i.to_max);"single"===i.type?i.from_shadow&&(o||s)?(t=this.convertToPercent(o?i.from_min:i.min),e=this.convertToPercent(s?i.from_max:i.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_single[0].style.display="block",n.shad_single[0].style.left=t+"%",n.shad_single[0].style.width=e+"%"):n.shad_single[0].style.display="none":(i.from_shadow&&(o||s)?(t=this.convertToPercent(o?i.from_min:i.min),e=this.convertToPercent(s?i.from_max:i.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,n.shad_from[0].style.display="block",n.shad_from[0].style.left=t+"%",n.shad_from[0].style.width=e+"%"):n.shad_from[0].style.display="none",i.to_shadow&&(r||a)?(o=this.convertToPercent(r?i.to_min:i.min),s=this.convertToPercent(a?i.to_max:i.max)-o,o=this.toFixed(o-this.coords.p_handle/100*o),s=this.toFixed(s-this.coords.p_handle/100*s),o+=this.coords.p_handle/2,n.shad_to[0].style.display="block",n.shad_to[0].style.left=o+"%",n.shad_to[0].style.width=s+"%"):n.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i=this.options.max-this.options.min;return i?(e=e?t:t-this.options.min,this.toFixed(e/(i/100))):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i=this.options.min,n=this.options.max,o=i.toString().split(".")[1],s=n.toString().split(".")[1],r=0,a=0;if(0===t)return this.options.min;if(100===t)return this.options.max;o&&(r=l=o.length),s&&(r=e=s.length),l&&e&&(r=e<=l?l:e),i<0&&(i=+(i+(a=Math.abs(i))).toFixed(r),n=+(n+a).toFixed(r));var l,o=(n-i)/100*t+i,s=this.options.step.toString().split(".")[1],o=s?+o.toFixed(s.length):+(o=(o/=this.options.step)*this.options.step).toFixed(0);return a&&(o-=a),(l=s?+o.toFixed(s.length):this.toFixed(o))<this.options.min?l=this.options.min:l>this.options.max&&(l=this.options.max),l},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),this.toFixed(e=100===t?100:e)},checkMinInterval:function(t,e,i){var n,o=this.options;return o.min_interval?(n=this.convertToValue(t),e=this.convertToValue(e),"from"===i?e-n<o.min_interval&&(n=e-o.min_interval):n-e<o.min_interval&&(n=e+o.min_interval),this.convertToPercent(n)):t},checkMaxInterval:function(t,e,i){var n,o=this.options;return o.max_interval?(n=this.convertToValue(t),e=this.convertToValue(e),"from"===i?e-n>o.max_interval&&(n=e-o.max_interval):n-e>o.max_interval&&(n=e+o.max_interval),this.convertToPercent(n)):t},checkDiapason:function(t,e,i){var t=this.convertToValue(t),n=this.options;return"number"!=typeof e&&(e=n.min),(i="number"!=typeof i?n.max:i)<(t=t<e?e:t)&&(t=i),this.convertToPercent(t)},toFixed:function(t){return+(t=t.toFixed(20))},_prettify:function(t){return this.options.prettify_enabled?(this.options.prettify&&"function"==typeof this.options.prettify?this.options:this).prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,n=this.result,o=i.values,s=o.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),s)for(i.p_values=[],i.min=0,i.max=s-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<s;e++)t=+o[e],t=isNaN(t)?o[e]:(o[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),n&&(n.min!==i.min&&(n.min=i.min),n.max!==i.max&&(n.max=i.max),(n.from<n.min||n.from>n.max)&&(n.from=i.from),(n.to<n.min||n.to>n.max)&&(n.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",n=this.options;return n.prefix&&(i+=n.prefix),i+=t,n.max_postfix&&(n.values.length&&t===n.p_values[n.max]||e===n.max)&&(i+=n.max_postfix,n.postfix&&(i+=" ")),n.postfix&&(i+=n.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,n,o,s,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,d=4,u="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),i=this.toFixed(100/(l=50<l?50:l)),4<l&&(d=3),7<l&&(d=2),14<l&&(d=1),28<l&&(d=0),t=0;t<l+1;t++){for(n=d,100<(c=this.toFixed(i*t))&&(c=100),o=((this.coords.big[t]=c)-i*(t-1))/(n+1),e=1;e<=n&&0!==c;e++)u+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-o*e)+'%"></span>';u+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',s=this.convertToValue(c),u+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(s=r.values.length?r.p_values[s]:this._prettify(s))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(u),this.cacheGridLabels()}},cacheGridLabels:function(){for(var t,e=this.coords.big_num,i=0;i<e;i++)t=this.$cache.grid.find(".js-grid-text-"+i),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){for(var t,e=[],i=[],n=this.coords.big_num,o=0;o<n;o++)this.coords.big_w[o]=this.$cache.grid_labels[o].outerWidth(!1),this.coords.big_p[o]=this.toFixed(this.coords.big_w[o]/this.coords.w_rs*100),this.coords.big_x[o]=this.toFixed(this.coords.big_p[o]/2),e[o]=this.toFixed(this.coords.big[o]-this.coords.big_x[o]),i[o]=this.toFixed(e[o]+this.coords.big_p[o]);for(this.options.force_edges&&(e[0]<-this.coords.grid_gap&&(e[0]=-this.coords.grid_gap,i[0]=this.toFixed(e[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),i[n-1]>100+this.coords.grid_gap&&(i[n-1]=100+this.coords.grid_gap,e[n-1]=this.toFixed(i[n-1]-this.coords.big_p[n-1]),this.coords.big_x[n-1]=this.toFixed(this.coords.big_p[n-1]-this.coords.grid_gap))),this.calcGridCollision(2,e,i),this.calcGridCollision(4,e,i),o=0;o<n;o++)t=this.$cache.grid_labels[o][0],this.coords.big_x[o]!==Number.POSITIVE_INFINITY&&(t.style.marginLeft=-this.coords.big_x[o]+"%")},calcGridCollision:function(t,e,i){for(var n,o,s=this.coords.big_num,r=0;r<s&&!(s<=(n=r+t/2));r+=t)o=this.$cache.grid_labels[n][0],i[r]<=e[n]?o.style.visibility="visible":o.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=r.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),r.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},r.fn.ionRangeSlider=function(t){return this.each(function(){r.data(this,"ionRangeSlider")||r.data(this,"ionRangeSlider",new e(this,t,n++))})};for(var s=0,d=["ms","moz","webkit","o"],u=0;u<d.length&&!l.requestAnimationFrame;++u)l.requestAnimationFrame=l[d[u]+"RequestAnimationFrame"],l.cancelAnimationFrame=l[d[u]+"CancelAnimationFrame"]||l[d[u]+"CancelRequestAnimationFrame"];l.requestAnimationFrame||(l.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),n=Math.max(0,16-(i-s)),o=l.setTimeout(function(){t(i+n)},n);return s=i+n,o}),l.cancelAnimationFrame||(l.cancelAnimationFrame=function(t){clearTimeout(t)})}),function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e():t.ScrollMagic=e()}(this,function(){"use strict";function N(){L.log(2,"(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")}N.version="2.0.8","undefined"!=typeof window&&window.addEventListener("mousewheel",void 0);var R="data-scrollmagic-pin-spacer",$=(N.Controller=function(t){function n(t){return t.length<=1?t:((t=t.slice(0)).sort(function(t,e){return t.scrollOffset()>e.scrollOffset()?1:-1}),t)}var i,o,e,s="ScrollMagic.Controller",r="FORWARD",a="REVERSE",l="PAUSED",c=$.defaults,d=this,u=L.extend({},c,t),h=[],p=!1,f=0,g=l,m=!0,v=0,y=!0,b=function(){0<u.refreshInterval&&(o=window.setTimeout(k,u.refreshInterval))},w=function(){return u.vertical?L.get.scrollTop(u.container):L.get.scrollLeft(u.container)},x=function(){return u.vertical?L.get.height(u.container):L.get.width(u.container)},_=this._setScrollPos=function(t){u.vertical?m?window.scrollTo(L.get.scrollLeft(),t):u.container.scrollTop=t:m?window.scrollTo(t,L.get.scrollTop()):u.container.scrollLeft=t},C=function(){var i,t;y&&p&&(i=L.type.Array(p)?p:h.slice(0),p=!1,t=f,t=(f=d.scrollPos())-t,(g=0!=t?0<t?r:a:g)===a&&i.reverse(),i.forEach(function(t,e){A(3,"updating Scene "+(e+1)+"/"+i.length+" ("+h.length+" total)"),t.update(!0)}),0===i.length&&3<=u.loglevel&&A(3,"updating 0 Scenes (nothing added to controller)"))},S=function(){i=L.rAF(C)},T=function(t){A(3,"event fired causing an update:",t.type),"resize"==t.type&&(v=x(),g=l),!0!==p&&(p=!0,S())},k=function(){if(!m&&v!=x()){var e;try{e=new Event("resize",{bubbles:!1,cancelable:!1})}catch(t){(e=document.createEvent("Event")).initEvent("resize",!1,!1)}u.container.dispatchEvent(e)}h.forEach(function(t,e){t.refresh()}),b()},A=this._log=function(t,e){u.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+s+") ->"),L.log.apply(window,arguments))};this._options=u;for(e in this.addScene=function(t){if(L.type.Array(t))t.forEach(function(t,e){d.addScene(t)});else if(t instanceof N.Scene){if(t.controller()!==d)t.addTo(d);else if(h.indexOf(t)<0){for(var e in h.push(t),h=n(h),t.on("shift.controller_sort",function(){h=n(h)}),u.globalSceneOptions)t[e]&&t[e].call(t,u.globalSceneOptions[e]);A(3,"adding Scene (now "+h.length+" total)")}}else A(1,"ERROR: invalid argument supplied for '.addScene()'");return d},this.removeScene=function(t){var e;return L.type.Array(t)?t.forEach(function(t,e){d.removeScene(t)}):-1<(e=h.indexOf(t))&&(t.off("shift.controller_sort"),h.splice(e,1),A(3,"removing Scene (now "+h.length+" left)"),t.remove()),d},this.updateScene=function(t,i){return L.type.Array(t)?t.forEach(function(t,e){d.updateScene(t,i)}):i?t.update(!0):!0!==p&&t instanceof N.Scene&&(-1==(p=p||[]).indexOf(t)&&p.push(t),p=n(p),S()),d},this.update=function(t){return T({type:"resize"}),t&&C(),d},this.scrollTo=function(t,e){if(L.type.Number(t))_.call(u.container,t,e);else if(t instanceof N.Scene)t.controller()===d?d.scrollTo(t.scrollOffset(),e):A(2,"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.",t);else if(L.type.Function(t))_=t;else{var i=L.get.elements(t)[0];if(i){for(;i.parentNode.hasAttribute(R);)i=i.parentNode;var n=u.vertical?"top":"left",o=L.get.offset(u.container),s=L.get.offset(i);m||(o[n]-=d.scrollPos()),d.scrollTo(s[n]-o[n],e)}else A(2,"scrollTo(): The supplied argument is invalid. Scroll cancelled.",t)}return d},this.scrollPos=function(t){return arguments.length?(L.type.Function(t)?w=t:A(2,"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'."),d):w.call(d)},this.info=function(t){var e={size:v,vertical:u.vertical,scrollPos:f,scrollDirection:g,container:u.container,isDocument:m};return arguments.length?void 0!==e[t]?e[t]:void A(1,'ERROR: option "'+t+'" is not available'):e},this.loglevel=function(t){return arguments.length?(u.loglevel!=t&&(u.loglevel=t),d):u.loglevel},this.enabled=function(t){return arguments.length?(y!=t&&(y=!!t,d.updateScene(h,!0)),d):y},this.destroy=function(t){window.clearTimeout(o);for(var e=h.length;e--;)h[e].destroy(t);return u.container.removeEventListener("resize",T),u.container.removeEventListener("scroll",T),L.cAF(i),A(3,"destroyed "+s+" (reset: "+(t?"true":"false")+")"),null},u)c.hasOwnProperty(e)||(A(2,'WARNING: Unknown option "'+e+'"'),delete u[e]);if(u.container=L.get.elements(u.container)[0],!u.container)throw A(1,"ERROR creating object "+s+": No valid scroll container supplied"),s+" init failed.";(m=u.container===window||u.container===document.body||!document.body.contains(u.container))&&(u.container=window),v=x(),u.container.addEventListener("resize",T),u.container.addEventListener("scroll",T);t=parseInt(u.refreshInterval,10);return u.refreshInterval=L.type.Number(t)?t:c.refreshInterval,b(),A(3,"added new "+s+" controller (v"+N.version+")"),d},{defaults:{container:window,vertical:!0,globalSceneOptions:{},loglevel:2,refreshInterval:100}}),j=(N.Controller.addOption=function(t,e){$.defaults[t]=e},N.Controller.extend=function(t){var e=this;N.Controller=function(){return e.apply(this,arguments),this.$super=L.extend({},this),t.apply(this,arguments)||this},L.extend(N.Controller,e),N.Controller.prototype=e.prototype,N.Controller.prototype.constructor=N.Controller},{defaults:{duration:0,offset:0,triggerElement:void 0,triggerHook:.5,reverse:!0,loglevel:2},validate:{offset:function(t){if(t=parseFloat(t),L.type.Number(t))return t;throw['Invalid value for option "offset":',t]},triggerElement:function(t){if(t=t||void 0){var e=L.get.elements(t)[0];if(!e||!e.parentNode)throw['Element defined in option "triggerElement" was not found:',t];t=e}return t},triggerHook:function(t){var e={onCenter:.5,onEnter:1,onLeave:0};if(L.type.Number(t))t=Math.max(0,Math.min(parseFloat(t),1));else{if(!(t in e))throw['Invalid value for option "triggerHook": ',t];t=e[t]}return t},reverse:function(t){return!!t},loglevel:function(t){if(t=parseInt(t),!L.type.Number(t)||t<0||3<t)throw['Invalid value for option "loglevel":',t];return t}},shifts:["duration","offset","triggerHook"]}),L=((N.Scene=function(t){function c(){a&&h&&v===l&&!a.info("isDocument")&&P()}function d(){a&&h&&v===l&&((p.relSize.width||p.relSize.autoFullWidth)&&L.get.width(window)!=L.get.width(p.spacer.parentNode)||p.relSize.height&&L.get.height(window)!=L.get.height(p.spacer.parentNode))&&D()}function u(t){a&&h&&v===l&&!a.info("isDocument")&&(t.preventDefault(),a._setScrollPos(a.info("scrollPos")-((t.wheelDelta||t[a.info("vertical")?"wheelDeltaY":"wheelDeltaX"])/3||30*-t.detail)))}var i,a,h,p,n="ScrollMagic.Scene",r="BEFORE",l="DURING",f="AFTER",o=j.defaults,g=this,m=L.extend({},o,t),v=r,y=0,s={start:0,end:0},b=0,w=!0,x={},_=(this.on=function(t,i){return L.type.Function(i)?(t=t.trim().split(" ")).forEach(function(t){var t=t.split("."),e=t[0],t=t[1];"*"!=e&&(x[e]||(x[e]=[]),x[e].push({namespace:t||"",callback:i}))}):_(1,"ERROR when calling '.on()': Supplied callback for '"+t+"' is not a valid function!"),g},this.off=function(t,s){return t?(t=t.trim().split(" ")).forEach(function(t,e){var t=t.split("."),i=t[0],o=t[1]||"";("*"===i?Object.keys(x):[i]).forEach(function(t){for(var e=x[t]||[],i=e.length;i--;){var n=e[i];!n||o!==n.namespace&&"*"!==o||s&&s!=n.callback||e.splice(i,1)}e.length||delete x[t]})}):_(1,"ERROR: Invalid event name supplied."),g},this.trigger=function(t,i){var n,o;return t?(t=t.trim().split("."),n=t[0],o=t[1],t=x[n],_(3,"event fired:",n,i?"->":"",i||""),t&&t.forEach(function(t,e){o&&o!==t.namespace||t.callback.call(g,new N.Event(n,t.namespace,g,i))})):_(1,"ERROR: Invalid event name supplied."),g},g.on("change.internal",function(t){"loglevel"!==t.what&&"tweenChanges"!==t.what&&("triggerElement"===t.what?S():"reverse"===t.what&&g.update())}).on("shift.internal",function(t){e(),g.update()}),this._log=function(t,e){m.loglevel>=t&&(Array.prototype.splice.call(arguments,1,0,"("+n+") ->"),L.log.apply(window,arguments))}),e=(this.addTo=function(t){return t instanceof N.Controller?a!=t&&(a&&a.removeScene(g),a=t,A(),C(!0),S(!0),e(),a.info("container").addEventListener("resize",T),t.addScene(g),g.trigger("add",{controller:a}),_(3,"added "+n+" to controller"),g.update()):_(1,"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller"),g},this.enabled=function(t){return arguments.length?(w!=t&&(w=!!t,g.update(!0)),g):w},this.remove=function(){var t;return a&&(a.info("container").removeEventListener("resize",T),t=a,a=void 0,t.removeScene(g),g.trigger("remove"),_(3,"removed "+n+" from controller")),g},this.destroy=function(t){return g.trigger("destroy",{reset:t}),g.remove(),g.off("*.*"),_(3,"destroyed "+n+" (reset: "+(t?"true":"false")+")"),null},this.update=function(t){var e;return a&&(t?a.enabled()&&w?(t=a.info("scrollPos"),e=0<m.duration?(t-s.start)/(s.end-s.start):t>=s.start?1:0,g.trigger("update",{startPos:s.start,endPos:s.end,scrollPos:t}),g.progress(e)):h&&v===l&&P(!0):a.updateScene(g,!1)),g},this.refresh=function(){return C(),S(),g},this.progress=function(t){var e,i,n,o,s;return arguments.length?(e=!1,i=v,n=a?a.info("scrollDirection"):"PAUSED",s=m.reverse||y<=t,0===m.duration?(e=y!=t,v=0===(y=t<1&&s?0:1)?r:l):t<0&&v!==r&&s?(v=r,e=!(y=0)):0<=t&&t<1&&s?(y=t,v=l,e=!0):1<=t&&v!==f?(y=1,v=f,e=!0):v!==l||s||P(),e&&(o={progress:y,state:v,scrollDirection:n},t=function(t){g.trigger(t,o)},(s=v!=i)&&i!==l&&(t("enter"),t(i===r?"start":"end")),t("progress"),s&&v!==l&&(t(v===r?"start":"end"),t("leave"))),g):y},function(){s={start:b+m.offset},a&&m.triggerElement&&(s.start-=a.info("size")*m.triggerHook),s.end=s.start+m.duration}),C=function(t){var e;i&&$(e="duration",i.call(g))&&!t&&(g.trigger("change",{what:e,newval:m[e]}),g.trigger("shift",{reason:e}))},S=function(t){var e=0,i=m.triggerElement;if(a&&(i||0<b)){if(i)if(i.parentNode){for(var n=a.info(),o=L.get.offset(n.container),s=n.vertical?"top":"left";i.parentNode.hasAttribute(R);)i=i.parentNode;var r=L.get.offset(i);n.isDocument||(o[s]-=a.scrollPos()),e=r[s]-o[s]}else _(2,"WARNING: triggerElement was removed from DOM and will be reset to",void 0),g.triggerElement(void 0);n=e!=b;b=e,n&&!t&&g.trigger("shift",{reason:"triggerElementPosition"})}},T=function(t){0<m.triggerHook&&g.trigger("shift",{reason:"containerResize"})},k=L.extend(j.validate,{duration:function(e){var t;if(L.type.String(e)&&e.match(/^(\.|\d)*\d+%$/)&&(t=parseFloat(e)/100,e=function(){return a?a.info("size")*t:0}),L.type.Function(e)){i=e;try{e=parseFloat(i.call(g))}catch(t){e=-1}}if(e=parseFloat(e),!L.type.Number(e)||e<0)throw i?(i=void 0,['Invalid return value of supplied function for option "duration":',e]):['Invalid value for option "duration":',e];return e}}),A=function(t){(t=arguments.length?[t]:Object.keys(k)).forEach(function(e,t){if(k[e])try{i=k[e](m[e])}catch(t){var i=o[e],n=L.type.String(t)?[t]:t;L.type.Array(n)?(n[0]="ERROR: "+n[0],n.unshift(1),_.apply(this,n)):_(1,"ERROR: Problem executing validation callback for option '"+e+"':",t.message)}finally{m[e]=i}})},$=function(t,e){var i=!1,n=m[t];return m[t]!=e&&(m[t]=e,A(t),i=n!=m[t]),i},E=function(e){g[e]||(g[e]=function(t){return arguments.length?("duration"===e&&(i=void 0),$(e,t)&&(g.trigger("change",{what:e,newval:m[e]}),-1<j.shifts.indexOf(e)&&g.trigger("shift",{reason:e})),g):m[e]})},P=(this.controller=function(){return a},this.state=function(){return v},this.scrollOffset=function(){return s.start},this.triggerPosition=function(){var t=m.offset;return a&&(m.triggerElement?t+=b:t+=a.info("size")*g.triggerHook()),t},g.on("shift.internal",function(t){t="duration"===t.reason;(v===f&&t||v===l&&0===m.duration)&&P(),t&&D()}).on("progress.internal",function(t){P()}).on("add.internal",function(t){D()}).on("destroy.internal",function(t){g.removePin(t.reset)}),function(t){var e,i,n;h&&a&&(e=a.info(),i=p.spacer.firstChild,t||v!==l?(t={position:p.inFlow?"relative":"absolute",top:0,left:0},n=L.css(i,"position")!=t.position,p.pushFollowers?0<m.duration&&(v===f&&0===parseFloat(L.css(p.spacer,"padding-top"))||v===r&&0===parseFloat(L.css(p.spacer,"padding-bottom")))&&(n=!0):t[e.vertical?"top":"left"]=m.duration*y,L.css(i,t),n&&D()):("fixed"!=L.css(i,"position")&&(L.css(i,{position:"fixed"}),D()),t=L.get.offset(p.spacer,!0),n=m.reverse||0===m.duration?e.scrollPos-s.start:Math.round(y*m.duration*10)/10,t[e.vertical?"top":"left"]+=n,L.css(p.spacer.firstChild,{top:t.top,left:t.left})))}),D=function(){var t,e,i,n,o;h&&a&&p.inFlow&&(t=v===l,e=a.info("vertical"),i=p.spacer.firstChild,n=L.isMarginCollapseType(L.css(p.spacer,"display")),o={},p.relSize.width||p.relSize.autoFullWidth?t?L.css(h,{width:L.get.width(p.spacer)}):L.css(h,{width:"100%"}):(o["min-width"]=L.get.width(e?h:i,!0,!0),o.width=t?o["min-width"]:"auto"),p.relSize.height?t?L.css(h,{height:L.get.height(p.spacer)-(p.pushFollowers?m.duration:0)}):L.css(h,{height:"100%"}):(o["min-height"]=L.get.height(e?i:h,!0,!n),o.height=t?o["min-height"]:"auto"),p.pushFollowers&&(o["padding"+(e?"Top":"Left")]=m.duration*y,o["padding"+(e?"Bottom":"Right")]=m.duration*(1-y)),L.css(p.spacer,o))};this.setPin=function(t,e){var i=e&&e.hasOwnProperty("pushFollowers");if(e=L.extend({},{pushFollowers:!0,spacerClass:"scrollmagic-pin-spacer"},e),t=L.get.elements(t)[0])if("fixed"===L.css(t,"position"))_(1,"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.");else{if(h){if(h===t)return g;g.removePin()}var n,t=(h=t).parentNode.style.display,o=["top","left","bottom","right","margin","marginLeft","marginRight","marginTop","marginBottom"],s=(h.parentNode.style.display="none","absolute"!=L.css(h,"position")),r=L.css(h,o.concat(["display"])),a=L.css(h,["width","height"]),t=(h.parentNode.style.display=t,!s&&e.pushFollowers&&(_(2,"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled."),e.pushFollowers=!1),window.setTimeout(function(){h&&0===m.duration&&i&&e.pushFollowers&&_(2,"WARNING: pushFollowers =",!0,"has no effect, when scene duration is 0.")},0),h.parentNode.insertBefore(document.createElement("div"),h)),l=L.extend(r,{position:s?"relative":"absolute",boxSizing:"content-box",mozBoxSizing:"content-box",webkitBoxSizing:"content-box"});s||L.extend(l,L.css(h,["width","height"])),L.css(t,l),t.setAttribute(R,""),L.addClass(t,e.spacerClass),p={spacer:t,relSize:{width:"%"===a.width.slice(-1),height:"%"===a.height.slice(-1),autoFullWidth:"auto"===a.width&&s&&L.isMarginCollapseType(r.display)},pushFollowers:e.pushFollowers,inFlow:s},h.___origStyle||(h.___origStyle={},n=h.style,o.concat(["width","height","position","boxSizing","mozBoxSizing","webkitBoxSizing"]).forEach(function(t){h.___origStyle[t]=n[t]||""})),p.relSize.width&&L.css(t,{width:a.width}),p.relSize.height&&L.css(t,{height:a.height}),t.appendChild(h),L.css(h,{position:s?"relative":"absolute",margin:"auto",top:"auto",left:"auto",bottom:"auto",right:"auto"}),(p.relSize.width||p.relSize.autoFullWidth)&&L.css(h,{boxSizing:"border-box",mozBoxSizing:"border-box",webkitBoxSizing:"border-box"}),window.addEventListener("scroll",c),window.addEventListener("resize",c),window.addEventListener("resize",d),h.addEventListener("mousewheel",u),h.addEventListener("DOMMouseScroll",u),_(3,"added pin"),P()}else _(1,"ERROR calling method 'setPin()': Invalid pin element supplied.");return g},this.removePin=function(t){var e,i,n;return h&&(v===l&&P(!0),!t&&a||((e=p.spacer.firstChild).hasAttribute(R)&&(i=p.spacer.style,n={},["margin","marginLeft","marginRight","marginTop","marginBottom"].forEach(function(t){n[t]=i[t]||""}),L.css(e,n)),p.spacer.parentNode.insertBefore(e,p.spacer),p.spacer.parentNode.removeChild(p.spacer),h.parentNode.hasAttribute(R)||(L.css(h,h.___origStyle),delete h.___origStyle)),window.removeEventListener("scroll",c),window.removeEventListener("resize",c),window.removeEventListener("resize",d),h.removeEventListener("mousewheel",u),h.removeEventListener("DOMMouseScroll",u),h=void 0,_(3,"removed pin (reset: "+(t?"true":"false")+")")),g};var O,I,F,M=[];for(I in g.on("destroy.internal",function(t){g.removeClassToggle(t.reset)}),this.setClassToggle=function(t,e){t=L.get.elements(t);return 0!==t.length&&L.type.String(e)?(0<M.length&&g.removeClassToggle(),O=e,M=t,g.on("enter.internal_class leave.internal_class",function(t){var i="enter"===t.type?L.addClass:L.removeClass;M.forEach(function(t,e){i(t,O)})})):_(1,"ERROR calling method 'setClassToggle()': Invalid "+(0===t.length?"element":"classes")+" supplied."),g},this.removeClassToggle=function(t){return t&&M.forEach(function(t,e){L.removeClass(t,O)}),g.off("start.internal_class end.internal_class"),O=void 0,M=[],g},m)o.hasOwnProperty(I)||(_(2,'WARNING: Unknown option "'+I+'"'),delete m[I]);for(F in o)E(F);return A(),g}).addOption=function(t,e,i,n){t in j.defaults?N._util.log(1,"[static] ScrollMagic.Scene -> Cannot add Scene option '"+t+"', because it already exists."):(j.defaults[t]=e,j.validate[t]=i,n&&j.shifts.push(t))},N.Scene.extend=function(t){var e=this;N.Scene=function(){return e.apply(this,arguments),this.$super=L.extend({},this),t.apply(this,arguments)||this},L.extend(N.Scene,e),N.Scene.prototype=e.prototype,N.Scene.prototype.constructor=N.Scene},N.Event=function(t,e,i,n){for(var o in n=n||{})this[o]=n[o];return this.type=t,this.target=this.currentTarget=i,this.namespace=e||"",this.timeStamp=this.timestamp=Date.now(),this},N._util=function(s){for(var t={},r=function(t){return parseFloat(t)||0},a=function(t){return t.currentStyle||s.getComputedStyle(t)},n=function(t,e,i,n){if((e=e===document?s:e)===s)n=!1;else if(!f.DomElement(e))return 0;t=t.charAt(0).toUpperCase()+t.substr(1).toLowerCase();var o=(i?e["offset"+t]||e["outer"+t]:e["client"+t]||e["inner"+t])||0;return i&&n&&(i=a(e),o+="Height"===t?r(i.marginTop)+r(i.marginBottom):r(i.marginLeft)+r(i.marginRight)),o},l=function(t){return t.replace(/^[^a-z]+([a-z])/g,"$1").replace(/-([a-z])/g,function(t){return t[1].toUpperCase()})},o=(t.extend=function(t){for(t=t||{},d=1;d<arguments.length;d++)if(arguments[d])for(var e in arguments[d])arguments[d].hasOwnProperty(e)&&(t[e]=arguments[d][e]);return t},t.isMarginCollapseType=function(t){return-1<["block","flex","list-item","table","-webkit-box"].indexOf(t)},0),e=["ms","moz","webkit","o"],i=s.requestAnimationFrame,c=s.cancelAnimationFrame,d=0;!i&&d<e.length;++d)i=s[e[d]+"RequestAnimationFrame"],c=s[e[d]+"CancelAnimationFrame"]||s[e[d]+"CancelRequestAnimationFrame"];c=c||function(t){s.clearTimeout(t)},t.rAF=(i=i||function(t){var e=(new Date).getTime(),i=Math.max(0,16-(e-o)),n=s.setTimeout(function(){t(e+i)},i);return o=e+i,n}).bind(s),t.cAF=c.bind(s);var u=["error","warn","log"],h=s.console||{};for(h.log=h.log||function(){},d=0;d<u.length;d++){var p=u[d];h[p]||(h[p]=h.log)}t.log=function(t){(u.length<t||t<=0)&&(t=u.length);var e=new Date,e=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+":"+("00"+e.getMilliseconds()).slice(-3),t=u[t-1],i=Array.prototype.splice.call(arguments,1),t=Function.prototype.bind.call(h[t],h);i.unshift(e),t.apply(h,i)};var f=t.type=function(t){return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/,"$1").toLowerCase()},g=(f.String=function(t){return"string"===f(t)},f.Function=function(t){return"function"===f(t)},f.Array=function(t){return Array.isArray(t)},f.Number=function(t){return!f.Array(t)&&0<=t-parseFloat(t)+1},f.DomElement=function(t){return"object"==typeof HTMLElement||"function"==typeof HTMLElement?t instanceof HTMLElement||t instanceof SVGElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName},t.get={});return g.elements=function(t){var e=[];if(f.String(t))try{t=document.querySelectorAll(t)}catch(t){return e}if("nodelist"===f(t)||f.Array(t)||t instanceof NodeList)for(var i=0,n=e.length=t.length;i<n;i++){var o=t[i];e[i]=f.DomElement(o)?o:g.elements(o)}else!f.DomElement(t)&&t!==document&&t!==s||(e=[t]);return e},g.scrollTop=function(t){return t&&"number"==typeof t.scrollTop?t.scrollTop:s.pageYOffset||0},g.scrollLeft=function(t){return t&&"number"==typeof t.scrollLeft?t.scrollLeft:s.pageXOffset||0},g.width=function(t,e,i){return n("width",t,e,i)},g.height=function(t,e,i){return n("height",t,e,i)},g.offset=function(t,e){var i={top:0,left:0};return t&&t.getBoundingClientRect&&(t=t.getBoundingClientRect(),i.top=t.top,i.left=t.left,e||(i.top+=g.scrollTop(),i.left+=g.scrollLeft())),i},t.addClass=function(t,e){e&&(t.classList?t.classList.add(e):t.className+=" "+e)},t.removeClass=function(t,e){e&&(t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," "))},t.css=function(t,e){if(f.String(e))return a(t)[l(e)];var i,n,o;if(f.Array(e))return i={},n=a(t),e.forEach(function(t,e){i[t]=n[l(t)]}),i;for(o in e){var s=e[o];s==parseFloat(s)&&(s+="px"),t.style[l(o)]=s}},t}(window||{}));return N.Scene.prototype.addIndicators=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},N.Scene.prototype.removeIndicators=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js"),this},N.Scene.prototype.setTween=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},N.Scene.prototype.removeTween=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js"),this},N.Scene.prototype.setVelocity=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},N.Scene.prototype.removeVelocity=function(){return N._util.log(1,"(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js"),this},N}),function(t){"use strict";"function"==typeof define&&define.amd?define("parollerjs",["jquery"],t):"object"==typeof module&&"object"==typeof module.exports?module.exports=t(require("jquery")):t(jQuery)}(function(v){"use strict";function y(){b=!1}var b=!1,w=function(t,e){return t.css({"background-position":"center "+-e+"px"})},x=function(t,e){return t.css({"background-position":-e+"px center"})},_=function(t,e,i,n){return t.css({"-webkit-transform":"translateY("+e+"px)"+(n="none"===n?"":n),"-moz-transform":"translateY("+e+"px)"+n,transform:"translateY("+e+"px)"+n,transition:i,"will-change":"transform"})},C=function(t,e,i,n){return t.css({"-webkit-transform":"translateX("+e+"px)"+(n="none"===n?"":n),"-moz-transform":"translateX("+e+"px)"+n,transform:"translateX("+e+"px)"+n,transition:i,"will-change":"transform"})},S=function(t,e,i){var n=t.data("paroller-factor"),n=n||i.factor;return e<576?t.data("paroller-factor-xs")||i.factorXs||n:e<=768?t.data("paroller-factor-sm")||i.factorSm||n:e<=1024?t.data("paroller-factor-md")||i.factorMd||n:e<=1200?t.data("paroller-factor-lg")||i.factorLg||n:e<=1920&&(t.data("paroller-factor-xl")||i.factorXl)||n},T=function(t,e){return Math.round(t*e)},k=function(t,e,i,n){return Math.round((t-i/2+n)*e)},A=function(t){return t.css({"background-position":"unset"})},$=function(t){return t.css({transform:"unset",transition:"unset"})};v.fn.paroller=function(f){var g=v(window).height(),m=v(document).height(),f=v.extend({factor:0,factorXs:0,factorSm:0,factorMd:0,factorLg:0,factorXl:0,transition:"translate 0.1s ease",type:"background",direction:"vertical"},f);return this.each(function(){var i=v(this),n=v(window).width(),o=i.offset().top,s=i.outerHeight(),t=i.data("paroller-type"),e=i.data("paroller-direction"),r=i.data("paroller-transition"),a=i.css("transform"),l=r||f.transition,c=t||f.type,d=e||f.direction,u=0,h=T(o,u),p=k(o,u,g,s);"background"===c?"vertical"===d?w(i,h):"horizontal"===d&&x(i,h):"foreground"===c&&("vertical"===d?_(i,p,l,a):"horizontal"===d&&C(i,p,l,a)),v(window).on("resize",function(){var t=v(this).scrollTop();n=v(window).width(),o=i.offset().top,s=i.outerHeight(),u=S(i,n,f),h=Math.round(o*u),p=Math.round((o-g/2+s)*u),b||(window.requestAnimationFrame(y),b=!0),"background"===c?(A(i),"vertical"===d?w(i,h):"horizontal"===d&&x(i,h)):"foreground"===c&&t<=m&&($(i),"vertical"===d?_(i,p,l):"horizontal"===d&&C(i,p,l))}),v(window).on("scroll",function(){var t=v(this).scrollTop(),e=v(document).scrollTop();u=0===e?0:S(i,n,f),h=Math.round((o-t)*u),p=Math.round((o-g/2+s-t)*u),b||(window.requestAnimationFrame(y),b=!0),"background"===c?"vertical"===d?w(i,h):"horizontal"===d&&x(i,h):"foreground"===c&&t<=m&&("vertical"===d?_(i,p,l,a):"horizontal"===d&&C(i,p,l,a))})})}}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t($||require("jquery")):t(jQuery)}(function(D){"use strict";var o="styler",i={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function s(t,e){this.element=t,this.options=D.extend({},i,e);t=this.options.locale;void 0!==this.options.locales[t]&&D.extend(this.options,this.options.locales[t]),this.init()}function O(t){var e,i;D(t.target).parents().hasClass("jq-selectbox")||"OPTION"==t.target.nodeName||D("div.jq-selectbox.opened").length&&(t=D("div.jq-selectbox.opened"),e=D("div.jq-selectbox__search input",t),i=D("div.jq-selectbox__dropdown",t),t.find("select").data("_"+o).options.onSelectClosed.call(t),e.length&&e.val("").keyup(),i.hide().find("li.sel").addClass("selected"),t.removeClass("focused opened dropup dropdown"))}s.prototype={init:function(){var t,e,i,n,o,A=D(this.element),$=this.options,E=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),a=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function P(){void 0!==A.attr("id")&&""!==A.attr("id")&&(this.id=A.attr("id")+$.idSuffix),this.title=A.attr("title"),this.classes=A.attr("class"),this.data=A.data()}A.is(":checkbox")?((t=function(){var t=new P,e=D('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);A.after(e).prependTo(e),A.is(":checked")&&e.addClass("checked"),A.is(":disabled")&&e.addClass("disabled"),e.click(function(t){t.preventDefault(),A.triggerHandler("click"),e.is(".disabled")||(A.is(":checked")?(A.prop("checked",!1),e.removeClass("checked")):(A.prop("checked",!0),e.addClass("checked")),A.focus().change())}),A.closest("label").add('label[for="'+A.attr("id")+'"]').on("click.styler",function(t){D(t.target).is("a")||D(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),A.on("change.styler",function(){A.is(":checked")?e.addClass("checked"):e.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&e.click()}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})})(),A.on("refresh",function(){A.closest("label").add('label[for="'+A.attr("id")+'"]').off(".styler"),A.off(".styler").parent().before(A).remove(),t()})):A.is(":radio")?((e=function(){var t=new P,e=D('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);A.after(e).prependTo(e),A.is(":checked")&&e.addClass("checked"),A.is(":disabled")&&e.addClass("disabled"),D.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return D(this).find(t).length===t.length})},D.fn.commonParent=function(){return D(this).commonParents().first()},e.click(function(t){t.preventDefault(),A.triggerHandler("click"),e.is(".disabled")||((t=D('input[name="'+A.attr("name")+'"]')).commonParent().find(t).prop("checked",!1).parent().removeClass("checked"),A.prop("checked",!0).parent().addClass("checked"),A.focus().change())}),A.closest("label").add('label[for="'+A.attr("id")+'"]').on("click.styler",function(t){D(t.target).is("a")||D(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),A.on("change.styler",function(){A.parent().addClass("checked")}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})})(),A.on("refresh",function(){A.closest("label").add('label[for="'+A.attr("id")+'"]').off(".styler"),A.off(".styler").parent().before(A).remove(),e()})):A.is(":file")?((i=function(){var t=new P,n=A.data("placeholder"),e=(void 0===n&&(n=$.filePlaceholder),A.data("browse")),o=(void 0!==e&&""!==e||(e=$.fileBrowse),D('<div class="jq-file"><div class="jq-file__name">'+n+'</div><div class="jq-file__browse">'+e+"</div></div>").attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data)),e=(A.after(o).appendTo(o),A.is(":disabled")&&o.addClass("disabled"),A.val()),s=D("div.jq-file__name",o);e&&s.text(e.replace(/.+[\\\/]/,"")),A.on("change.styler",function(){var t,e,i=A.val();A.is("[multiple]")&&(i="",0<(t=A[0].files.length)&&(i=e=(e=void 0===(e=A.data("number"))?$.fileNumber:e).replace("%s",t))),s.text(i.replace(/.+[\\\/]/,"")),""===i?(s.text(n),o.removeClass("changed")):o.addClass("changed")}).on("focus.styler",function(){o.addClass("focused")}).on("blur.styler",function(){o.removeClass("focused")}).on("click.styler",function(){o.removeClass("focused")})})(),A.on("refresh",function(){A.off(".styler").parent().before(A).remove(),i()})):A.is('input[type="number"]')?((n=function(){var t=new P,e=D('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);A.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),A.is(":disabled")&&e.addClass("disabled");function i(t){var e,i=A.val(),n=(D.isNumeric(i)||(i=0,A.val("0")),t.is(".minus")?e=Number(i)-a:t.is(".plus")&&(e=Number(i)+a),(a.toString().split(".")[1]||[]).length);if(0<n){for(var o="1";o.length<=n;)o+="0";e=Math.round(e*o)/o}D.isNumeric(s)&&D.isNumeric(r)?s<=e&&e<=r&&A.val(e):D.isNumeric(s)&&!D.isNumeric(r)?s<=e&&A.val(e):(D.isNumeric(s)||!D.isNumeric(r)||e<=r)&&A.val(e)}var s,r,a,n=null,o=null;void 0!==A.attr("min")&&(s=A.attr("min")),void 0!==A.attr("max")&&(r=A.attr("max")),a=void 0!==A.attr("step")&&D.isNumeric(A.attr("step"))?Number(A.attr("step")):Number(1);e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var t=D(this);i(t),n=setTimeout(function(){o=setInterval(function(){i(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(n),clearInterval(o)}).on("mouseup","div.jq-number__spin",function(){A.change().trigger("input")}),A.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))})(),A.on("refresh",function(){A.off(".styler").closest(".jq-number").before(A).remove(),n()})):A.is("select")?((o=function(){function C(e){var i,n,o=e.prop("scrollHeight")-e.outerHeight();e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(t){i=t.originalEvent.detail<0||0<t.originalEvent.wheelDelta?1:-1,n=e.scrollTop(),(o<=n&&i<0||n<=0&&0<i)&&(t.stopPropagation(),t.preventDefault())})}var t,e,i,o,n,s,S=D("option",A),T="";function k(){for(var t=0;t<S.length;t++){var e,i=S.eq(t),n="",o="",s="",r="",a="",l="",c="",d="",u="",h=(i.prop("selected")&&(o="selected sel"),i.is(":disabled")&&(o="disabled"),i.is(":selected:disabled")&&(o="selected sel disabled"),void 0!==i.attr("id")&&""!==i.attr("id")&&(r=' id="'+i.attr("id")+$.idSuffix+'"'),void 0!==i.attr("title")&&""!==S.attr("title")&&(a=' title="'+i.attr("title")+'"'),void 0!==i.attr("class")&&(c=" "+i.attr("class"),u=' data-jqfs-class="'+i.attr("class")+'"'),i.data());for(e in h)""!==h[e]&&(l+=" data-"+e+'="'+h[e]+'"');n="<li"+u+l+(s=o+c!==""?' class="'+o+c+'"':s)+a+r+">"+i.html()+"</li>",i.parent().is("optgroup")&&(n="<li"+u+l+' class="'+o+c+" option"+(d=void 0!==i.parent().attr("class")?" "+i.parent().attr("class"):d)+'"'+a+r+">"+i.html()+"</li>",i.is(":first-child")&&(n='<li class="optgroup'+d+'">'+i.parent().attr("label")+"</li>"+n)),T+=n}}function r(){var t=new P,e="",i=A.data("placeholder"),n=A.data("search"),o=A.data("search-limit"),s=A.data("search-not-found"),r=A.data("search-placeholder"),l=A.data("smart-positioning"),c=(void 0===i&&(i=$.selectPlaceholder),void 0!==n&&""!==n||(n=$.selectSearch),void 0!==o&&""!==o||(o=$.selectSearchLimit),void 0!==s&&""!==s||(s=$.selectSearchNotFound),void 0===r&&(r=$.selectSearchPlaceholder),void 0!==l&&""!==l||(l=$.selectSmartPositioning),D('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data));A.after(c).prependTo(c);var d=0<(d=c.css("z-index"))?d:1,a=D("div.jq-selectbox__select",c),u=D("div.jq-selectbox__select-text",c),t=S.filter(":selected"),h=(k(),D('<div class="jq-selectbox__dropdown">'+(e=n?'<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+s+"</div>":e)+"<ul>"+T+"</ul></div>")),p=(c.append(h),D("ul",h)),f=D("li",h),g=D("input",h),m=D("div.jq-selectbox__not-found",h).hide(),v=(f.length<o&&g.parent().hide(),""===S.first().text()&&S.first().is(":selected")&&!1!==i?u.text(i).addClass("placeholder"):u.text(t.text()),0),y=0,b=(f.css({display:"inline-block"}),f.each(function(){var t=D(this);t.innerWidth()>v&&(v=t.innerWidth(),y=t.width())}),f.css({display:""}),u.is(".placeholder")&&u.width()>v?u.width(u.width()):(r=(n=c.clone().appendTo("body").width("auto")).outerWidth(),n.remove(),r==c.outerWidth()&&u.width(y)),v>c.width()&&h.width(v),""===S.first().text()&&""!==A.data("placeholder")&&f.first().hide(),c.outerHeight(!0)),w=g.parent().outerHeight(!0)||0,x=p.css("max-height"),s=f.filter(".selected"),_=(s.length<1&&f.first().addClass("selected sel"),void 0===f.data("li-height")&&(e=f.outerHeight(),!1!==i&&(e=f.eq(1).outerHeight()),f.data("li-height",e)),h.css("top"));"auto"==h.css("left")&&h.css({left:0}),"auto"==h.css("top")&&(h.css({top:b}),_=b),h.hide(),s.length&&(S.first().text()!=t.text()&&c.addClass("changed"),c.data("jqfs-class",s.data("jqfs-class")),c.addClass(s.data("jqfs-class"))),A.is(":disabled")?c.addClass("disabled"):(a.click(function(){var t,e,i,n,o,s,r;function a(){p.css("max-height",Math.floor((i-t.scrollTop()-20-w)/e)*e)}D("div.jq-selectbox").filter(".opened").length&&$.onSelectClosed.call(D("div.jq-selectbox").filter(".opened")),A.focus(),E||(t=D(window),e=f.data("li-height"),i=c.offset().top,n=t.height()-b-(i-t.scrollTop()),void 0!==(r=A.data("visible-options"))&&""!==r||(r=$.selectVisibleOptions),o=5*e,s=e*r,0<r&&r<6&&(o=s),0===r&&(s="auto"),r=function(){h.height("auto").css({bottom:"auto",top:_});function t(){p.css("max-height",Math.floor((n-20-w)/e)*e)}t(),p.css("max-height",s),"none"!=x&&p.css("max-height",x),n<h.outerHeight()+20&&t()},!0===l||1===l?o+w+20<n?(r(),c.removeClass("dropup").addClass("dropdown")):(h.height("auto").css({top:"auto",bottom:_}),a(),p.css("max-height",s),"none"!=x&&p.css("max-height",x),i-t.scrollTop()-20<h.outerHeight()+20&&a(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?o+w+20<n&&(r(),c.removeClass("dropup").addClass("dropdown")):(h.height("auto").css({bottom:"auto",top:_}),p.css("max-height",s),"none"!=x&&p.css("max-height",x)),c.offset().left+h.outerWidth()>t.width()&&h.css({left:"auto",right:0}),D("div.jqselect").css({zIndex:d-1}).removeClass("opened"),c.css({zIndex:d}),h.is(":hidden")?(D("div.jq-selectbox__dropdown:visible").hide(),h.show(),c.addClass("opened focused"),$.onSelectOpened.call(c)):(h.hide(),c.removeClass("opened dropup dropdown"),D("div.jq-selectbox").filter(".opened").length&&$.onSelectClosed.call(c)),g.length&&(g.val("").keyup(),m.hide(),g.keyup(function(){var t=D(this).val();f.each(function(){D(this).html().match(new RegExp(".*?"+t+".*?","i"))?D(this).show():D(this).hide()}),""===S.first().text()&&""!==A.data("placeholder")&&f.first().hide(),f.filter(":visible").length<1?m.show():m.hide()})),f.filter(".selected").length&&(""===A.val()?p.scrollTop(0):(p.innerHeight()/e%2!=0&&(e/=2),p.scrollTop(p.scrollTop()+f.filter(".selected").position().top-p.innerHeight()/2+e))),C(p))}),f.hover(function(){D(this).siblings().removeClass("selected")}),f.filter(".selected").text(),f.filter(":not(.disabled):not(.optgroup)").click(function(){A.focus();var t,e=D(this),i=e.text();e.is(".selected")||(t=e.index(),t-=e.prevAll(".optgroup").length,e.addClass("selected sel").siblings().removeClass("selected sel"),S.prop("selected",!1).eq(t).prop("selected",!0),u.text(i),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",e.data("jqfs-class")),c.addClass(e.data("jqfs-class")),A.change()),h.hide(),c.removeClass("opened dropup dropdown"),$.onSelectClosed.call(c)}),h.mouseout(function(){D("li.sel",h).addClass("selected")}),A.on("change.styler",function(){u.text(S.filter(":selected").text()).removeClass("placeholder"),f.removeClass("selected sel").not(".optgroup").eq(A[0].selectedIndex).addClass("selected sel"),S.first().text()!=f.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),D("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=f.data("li-height");""===A.val()?u.text(i).addClass("placeholder"):u.text(S.filter(":selected").text()),f.removeClass("selected sel").not(".optgroup").eq(A[0].selectedIndex).addClass("selected sel"),38!=t.which&&37!=t.which&&33!=t.which&&36!=t.which||(""===A.val()?p.scrollTop(0):p.scrollTop(p.scrollTop()+f.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||p.scrollTop(p.scrollTop()+f.filter(".selected").position().top-p.innerHeight()+e),13==t.which&&(t.preventDefault(),h.hide(),c.removeClass("opened dropup dropdown"),$.onSelectClosed.call(c))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),a.click())}),O.registered||(D(document).on("click",O),O.registered=!0))}A.is("[multiple]")?a||E||(t=new P,e=D('<div class="jq-select-multiple jqselect"></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data),A.after(e),k(),e.append("<ul>"+T+"</ul>"),i=D("ul",e),o=D("li",e),t=A.attr("size"),n=i.outerHeight(),s=o.outerHeight(),void 0!==t&&0<t?i.css({height:s*t}):i.css({height:4*s}),n>e.height()&&(i.css("overflowY","scroll"),C(i),o.filter(".selected").length&&i.scrollTop(i.scrollTop()+o.filter(".selected").position().top)),A.prependTo(e),A.is(":disabled")?(e.addClass("disabled"),S.each(function(){D(this).is(":selected")&&o.eq(D(this).index()).addClass("selected")})):(o.filter(":not(.disabled):not(.optgroup)").click(function(t){A.focus();var e,i,n=D(this);t.ctrlKey||t.metaKey||n.addClass("selected"),t.shiftKey||n.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||n.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(n.is(".selected")?n.removeClass("selected first"):n.addClass("selected first"),n.siblings().removeClass("first")),t.shiftKey&&(i=e=!1,n.siblings().removeClass("selected").siblings(".first").addClass("selected"),n.prevAll().each(function(){D(this).is(".first")&&(e=!0)}),n.nextAll().each(function(){D(this).is(".first")&&(i=!0)}),e&&n.prevAll().each(function(){if(D(this).is(".selected"))return!1;D(this).not(".disabled, .optgroup").addClass("selected")}),i&&n.nextAll().each(function(){if(D(this).is(".selected"))return!1;D(this).not(".disabled, .optgroup").addClass("selected")}),1==o.filter(".selected").length&&n.addClass("first")),S.prop("selected",!1),o.filter(".selected").each(function(){var t=D(this),e=t.index();t.is(".option")&&(e-=t.prevAll(".optgroup").length),S.eq(e).prop("selected",!0)}),A.change()}),S.each(function(t){D(this).data("optionIndex",t)}),A.on("change.styler",function(){o.removeClass("selected");var e=[];S.filter(":selected").each(function(){e.push(D(this).data("optionIndex"))}),o.not(".optgroup").filter(function(t){return-1<D.inArray(t,e)}).addClass("selected")}).on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}),n>e.height()&&A.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||i.scrollTop(i.scrollTop()+o.filter(".selected").position().top-s),40!=t.which&&39!=t.which&&34!=t.which||i.scrollTop(i.scrollTop()+o.filter(".selected:last").position().top-i.innerHeight()+2*s)}))):r()})(),A.on("refresh",function(){A.off(".styler").parent().before(A).remove(),o()})):A.is(":reset")&&A.on("click",function(){setTimeout(function(){A.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=D(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+o).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+o).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},D.fn[o]=function(e){var i,n=arguments;return void 0===e||"object"==typeof e?(this.each(function(){D.data(this,"_"+o)||D.data(this,"_"+o,new s(this,e))}).promise().done(function(){var t=D(this[0]).data("_"+o);t&&t.options.onFormStyled.call()}),this):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each(function(){var t=D.data(this,"_"+o);t instanceof s&&"function"==typeof t[e]&&(i=t[e].apply(t,Array.prototype.slice.call(n,1)))}),void 0!==i?i:this):void 0},O.registered=!1}),$(".comments-form__btn").click(function(){$("form")[0].reset()}),$(function(){$(".footer-top__title").on("click",function(){$(this).siblings().slideToggle(),$(this).toggleClass("active")}),$(".menu__btn").on("click",function(){$(".menu__list").toggleClass("menu__list--active")}),$(".product-tabs__top-item").on("click",function(t){t.preventDefault(),$(".product-tabs__top-item").removeClass("product-tabs__top-item--active"),$(this).addClass("product-tabs__top-item--active"),$(".product-tabs__content-item").removeClass("product-tabs__content-item--active"),$($(this).attr("href")).addClass("product-tabs__content-item--active")}),$(".product-slide__thumb").slick({focusOnSelect:!0,slidesToShow:4,slidesToScroll:1,vertical:!0,arrows:!1,draggable:!1,asNavFor:".product-slide__big"}),$(".product-slide__big").slick({draggable:!1,arrows:!1,fade:!0,asNavFor:".product-slide__thumb"}),$(".blog-page__slide").slick({infinite:!1,prevArrow:'<button class="prev-arrow"><svg class="icon" style="width: 10px;height: 15px;"><use xlink:href="img/icons/sprite.svg#play"></use></svg></button>',nextArrow:'<button class="next-arrow"><svg class="icon" style="width: 10px;height: 15px;"><use xlink:href="img/icons/sprite.svg#play"></use></svg></button> '}),$(".shop-content__filter-btn").on("click",function(){$(".shop-content__filter-btn").removeClass("shop-content__filter-btn--active"),$(this).addClass("shop-content__filter-btn--active")}),$(".button-list").on("click",function(){$(".product-item").addClass("product-item--list")}),$(".button-grid").on("click",function(){$(".product-item").removeClass("product-item--list")}),$(".select-style, .product-one__num").styler(),$(".filter-price__input").ionRangeSlider({type:"double",min:0,max:1e3,from:200,to:800,prefix:"$",onStart:function(t){$(".filter-price__from").text(t.from),$(".filter-price__to").text(t.to)},onChange:function(t){$(".filter-price__from").text(t.from),$(".filter-price__to").text(t.to)}}),$(".slider").slick({dots:!0,arrows:!1,autoplaySpeed:6e3}),$(".product-item__star, .product-one__star, .comments__content-star").rateYo({starWidth:"17px",normalFill:"#ccccce",ratedFill:"#ffc35b",readOnly:!0,starSvg:' <svg class="icon"> <use xlink:href="img/icons/sprite.svg#icon-star"></use></svg>'});var t=$(".promo__clock").attr("data-time");{var o=t;const s=(t=document.querySelector(".promo__clock")).querySelector(".promo__clock-days"),r=t.querySelector(".promo__clock-hours"),a=t.querySelector(".promo__clock-minutes"),l=t.querySelector(".promo__clock-seconds");function e(){n=o,n=Date.parse(n)-Date.parse(new Date),t=Math.floor(n/1e3%60),e=Math.floor(n/1e3/60%60),i=Math.floor(n/36e5%24);var t,e,i,n={total:n,days:Math.floor(n/864e5),hours:i,minutes:e,seconds:t};s.innerHTML=n.days,r.innerHTML=("0"+n.hours).slice(-2),a.innerHTML=("0"+n.minutes).slice(-2),l.innerHTML=("0"+n.seconds).slice(-2),n.total<=0&&clearInterval(c)}e();const c=setInterval(e,1e3)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
